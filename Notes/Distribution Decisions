1. Closed, Inner, or Open Source?
    -Open Source
        -Helps the community
        -Recruiting
        -Public Review = Find Issues Quickly
        -Free Development
    -Closed Source
        -Privacy
        -Freedom, Control
        -Company-Specific Features
    -Inner Source
        -Between Open and Closed
        -Components are internally Open Source
        -No team owns a Components
        -Eliminates Bottlenecks
        -More Involvement and Investment

2. Package Hosting
    -NPM (Node Package Manager)
    -Universal Package Managers
        -Complete Control, no 3rd Party dependency
        -Centralized Asset Hosting
        -Easier on-boarding/management
        -Avoid separate fees for each type
        -Undiscoverable from general public (could be feature)
        -Must grant access to new hires
        -Must configure registry setting
    -NPM Private management (7$ per user)
        -private namespace (any name for package)
        -npm install @your-org-namespace

3. Import Approach
    -named import Approach
        import {Label} from 'ps-react'
        -concise
        -imports entire library
        -bloats bundle
        -need index.js at root
    -import from /lib
        -imports single components to reduce bundle size 
        -don't need index.js at root
        import Label form 'ps-react/lib/Label'
        -most common, simple
        -slightly longer import statement
    -Import from Package root
        -import Label from 'ps-react/Label';
        -import single components
        -concise path
        -no index.js
        -custom build, need to generate package.json dynamically

4. npm publish
    -publishes everything it finds in the directory where its run
        -some files are automatically ignored 
    -Specifying npm Package files
        -.npmignore
            -list files not to publish 
            -publish in root 
            -comments start with '#'
        -files array in package.json
            -list files to publish 
            "files": [
                "lib"
            ],
            -easy to understand, no extra file, no accidental publish
            -less maintenance
        -dedicated folder
            -copy files to publish to folder and publish folder
            -write build to /lib
            -write package.json to /lib
            -copy relevant files to /lib
            -run "npm publish" from /lib

-Module Syntax
    -CommonJS
        var jquery = require('jquery');
        module.exports = jquery;
    -ES Module
        import jquery from 'jquery';
        export default jquery
    -Modules are statically analyzable
        -reliable autocompletion
        -tree shaking / dead code elimination

-UMD build
    -Universal Module Definition
    -Expose your component as a global variable

-Documentation Hosting
    -Static HTML and JS
    -AWS, Azure, Heroku, Firebase, Github Pages, Google Cloud Platform