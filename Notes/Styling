Compiled CSS
    -sass, post-css, etc.
    -Compile down to plain CSS
    -build in supprot for variables, custom functions, vendor prefixes
    -nested selectors
    -sass variables
        e.g. $font-stack: Helvetica, sans-serif
             $primary-color: #333 body
             font: 100% $font-stack
             color: $primary-color
    -sass nesting
        nav
            ul
                margin:0
                list-style: none
            ul
                ......
    -PostCSS
        -transpiles your CSS
        -autoprefix
        -CSS4
        -Polyfill Flexbox
        -style linting
        -Accessibility

CSS Naming Schemes
    -ultimately, any style compiles down to plain CSS
    -often use long and brittle selectors
    -Solution: Global CSS
        -naming schemes: BEM, OOCSS, SMACSS
            -BEM most popular
    -BEM
        -use classes to declare all styles
        -Block - Element - Modifier
        -Block is the root of the component (the component in React)
        -Element is a part of the block (part of the component)
        -Modifier is a variant/extension of a block (e.g. error state)
        -Example
            //Block
                .registrationform{}
            //Element
                .registrationform__submitbutton{}
            //Modifier
                .registrationform--error{}

Inline styles
    -used to most of this app
    -keys are camelCase
    -values are strings
    -commas instead of semicolons
    -capitalized vendor prefixes
    -Why use React inline styles?
        -Easy
        -Encapsulated
        -Explicit
        -No mental mapping overhead that is typical to CSS
        -Deterministic
        -Dynamic state-based styles
    -Why not use React inline styles?
        -can't use pseduo classes, pseduo elements, media queries, style
        fallbacks, animations
        -must use !important to override
        -messier markup
    -How opinionated should my styling be?
        -inline stlyes = more flexibility
        -external styles = more flexibility

CSS Modules
    -class names are scoped locally by default
    -Write plain CSS
    -Webpack CSS loader to import stylesheet
    -Reference style like an object
    -Use the class name of an object plus a hash to uniquely encapsulate it 
    -Why use CSS modules?
        -write plain css, or Sass/Less
        -Explicit
        -composable
        -Automatic encapsulation
        -no risk of naming conflicts
        -write short CSS selectors
        -supports global CSS
    -Why not use CSS modules?
        -no dynamic state-based styles
        -theming is tricky

CSS in JS
    -Why JS over Sass, Less, PostCSS?
        -you already know JS
        -handles variables, functions, looping
        -better and mature language
        -leverage the same tooling
            -ESLint
            -Minification
            -Dead code elimination by bundler
        -Issues
            -no sourcemaps
            -library lock-in
            -may lack full CSS support 
            -confusing when mixed with CSS
            -Forces consumers to accept your decision
    -Which JS and CSS library?
        -Too many options!
        -Top starred options on github
            -styled-components, radium, aphrodite, jss, glamor
            