Questions about Components

1. Audience?
    -Team, Project, Business, Public
    -Start Small, Start Specific
        -Solve specific problems first, then work to larger

2. Rigid or Flexible?
    -Users may want to change Style
    -Users may want to switch up the Layout
        -horizontal vs. vertical
        -media query cutoff points
    -Data Display
    -Logic
    -Components exist on spectrum from Rigid to Flexible
        -rigid components have few props to control
    -Rigid components are simpler to create and maintain
        -less chance to break it
        -easier to understand
        -simpler to test, fewer edge cases
        -less maintenance
        -Highly opinionated = more consistent, less fatigue
        -Easy to add flexibility, hard to remove
    -Start Rigid, move to flexible where necessary and justified
    -Flexible
        -Reusable in more contexts
    -Tragedy of the Commons
        -with a shared resource individuals act in self interest
            -against the common good
            -farmers sharing land let their livestock overgraze
        -Props are easy to add, but hard to remove
            -significant cost over time
            -a component that is everything for everyone is too bloated

3. Link, Wrap, or Fork?
    -Link  
        + simplest, "here's a suggestion"
        + Link it in docs with a short description
        + Don't need to write own documentation
        - Rely on Third Party
        + Don't need to make changes
        - Need to watch the repo to stay up-to-date 
        + If there are new features, enjoy for free 
        - Can't customize the code 
        + Self Styling options, separate styles
        - Low level of Cohesion, sticks out
        + Low commitment to the component, free to move on
    -Wrap  
        -"Pretend we Built it"
        + Can decide which props to expose, change names, etc.
        + Nice middle ground
        + Can make components feel integrated in your library
        + Choose when to add new features, upgrades
        + Customizable, enhance, abstract
        +/- Styling varies 
        +/- Cohesion varies
        + Still a low level of commitment 
        +/- Difficulty: more than linking, less than Fork
    -Fork
        -Own the code
        -Copy of codebase and maintain it yourself
        + Documentation looks integrated 
        + Full control over the component 
        -/+ New features are your responsibility 
        + Built in styles
        + High level of cohesion in the library
        - Big commitment
        - Least simple
    -Questions to ask
        -Is it good enough to simply link?
        -Does it fit our model?
        -Are styles overridable?
        -Is the project actively maintained?

4. When should I add a component to the library?
    -Tried out in 3 different applications
        -Rule of 3
        -If it works in all 3, its ready for a reusable library
    -Create a "reusable" folder in projects
        -Central place to store app-specific reusable components
        -refer back to it when looking for reusable stuff to test elsewhere
