-Why reusable components?
    -components = lego blocks
    -Allow for consistency
        -shared vocabulary across team
    -Better efficiency
        -saving time and decision making
    -Easier to collaborate
    -Cross Platform
    -Enforced front-end Architecture
    -Future Friendly for modifications and iterations
    -Self Contained
        -set of concerns in an approachable and usable way
    -Allows for Scalability
    -All of the above allows for faster development
    -Less code written = less bugs

-Why not Web Components?
    -JS libraries keep innovating where Web does not
    -Spotty browser support (biggest reason)
    -Don't enable anything new

-Other Options
    -angular, ember, view

-React Component Limitations
    -require React
    -Potential version conflict
    -impractical to simultaneously run different versions

-What makes React good?
    -lightweight library
        -focused on reusable components
        -can "sprinkle" on legacy apps
        -smaller react-like libraries like Inferno and Preact
        -can be used with limited bandwith
    -Strong and large Community working with it 
        -20,000 react components used by Facebook
        -over a dozen mature component libraries
        -used by Walmart, Netflix, AirBnB, Reddit, etc.
    -Stability
        -Components made with earlier version still work 
            -Angular1 vs. Angular2 are very different
        -Team has offered automated code modes to update code for new versions
    -React is the most attractive component platform available today

-React Reusable Component Decisions
    -Core Decisions
    -Design
    -Dev Environment
    -Documentation
    -Styling
    -Testing
    -Deployment