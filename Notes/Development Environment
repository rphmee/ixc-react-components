Create a Library, or Standalone components?

-Material UI (ui library made by google)
-React Bootstrap (library to sync up with Bootstrap)
-Blueprint (modern ui library)
-React-Dates (standalone date picker)
-Griddle (standalone for grid)
-React-dnd (drag and drop support)

-Library
    -suite of related react components in a single npm package
    -Provides consistency, similar look and feel
    -Easier to add a new component
        -documentation exists
    -simple to organize (DRY: don't repeat yourself)
    -Quickly add components
    -Simpler dependency management
    -More discoverable. Only market one thing.
        -New components available to users once they upgrade
    -Easier integration testing.
    -People can still use only what they want

-Standalone
    -Easier to build than a library
    -Easier to adopt, users can grab single component
    -Low Commitment for the author and the consumer
    -Developers can find 'Best of Breed' for components
    -More flexible as consistency is not important
    -Less version churn
    -Lerna: Single repo for multiple NPM packages
        -hosting multiple libraries
        -good for integration testing
        -used by Babel and create-react-app

Dev Environment Options

-Boilerplate Project
    -Over 100 to choose from
        -List on andrewfarmer.com/starter-projects/
    -e.g. create-react-app
        -most popular react boilerplate available
        -supported by the Facebook team
        -bundles popular technology
        -well tested
        -east to upgrade
        -Eject at any point for complete configurability
            -handle manual upgrades
        -Strongly opinionated
            -Babel over TypeScript
            -Webpack over Rollup, Browserfy
    -e.g. nwb
        -wraps up Node, Webpack, and Babel
        -not just for apps, component library focused
        -testing via Mocha and Karma
        -Transpiles to ES5
        -Can leave ES imports for tree shaking to reduce bundle sizes
        -Optional Universal Module D build
        -Oriented towards a single component
        -NWB: Node Webpack Babel
    -complete flexibility on documentation approach
    -no popular component libs use doc tools
-Documentation Tool Project
    -Style Guide
    -Documentation is basically your App
    -e.g. React Storybook
        -most popular react doc tool
    -e.g. React Styleguidist
        -similar to Storybook, includes code snippet
        -includes Eva automated testing
    -e.g. React Styleguide-generator
    -e.g. Attelier
        -interactive playground approach
    -e.g. bluekit
        -interactive plaground approach
    -e.g. react-cosmos
        -interactive code window with preview
    -clear documentation approach
    -searchable list of components 
    -working examples
    -prop documentation
    -code snippet display
-Build Your Own Custom Development Environment
    -Full control over every facet of app
    -Pick your favorite tooling
    -Complete understanding of your Environment
        -quickly change as needed
    -More up front work
    -Existing boilerplates work great
    -Boilerplates can get you 90% there
    -Building a JavaScript development environment course
    -May not necessarily use Webpack
        -used by most popular react component libraries
        -Rollup is popular for library authors
            -smaller bundle size, more efficient
            -noticeably faster parsing
            -Webpack for Apps, Rollup for libraries

Will use create-react-app for this course
    -Webpack for Bundling
    -Babel for transpiling
    -ESLint for linting
    -Jest for testing