{"version":3,"sources":["components/IxButton/IxButton.js","components/IxButton/index.js","components/Label/Label.js","components/Label/index.js","styles/ProgressBar-Styles.js","utils/colors.js","components/ProgressBar/ProgressBar.js","components/ProgressBar/index.js","components/TextInput/TextInput.js","components/TextInput/index.js","components/ClickToEnterTextField/ClickToEnterTextField.js","components/ClickToEnterTextField/index.js","components/EyeIcon/EyeIcon.js","components/EyeIcon/index.js","components/IxButtonMulti/IxButtonMulti.js","components/IxButtonMulti/index.js","components/ExpandingBar/ExpandingBar.js","components/ExpandingBar/index.js","components/PasswordInput/PasswordInput.js","components/PasswordInput/index.js","../config/componentData.js","docs/examples/ClickToEnterTextField/ExampleTextField.js","docs/examples/ExpandingBar/IxBarExample.js","docs/examples/EyeIcon/ExampleEye.js","docs/examples/IxButton/ExampleButton.js","docs/examples/IxButtonMulti/ExampleButtonMultiCircle.js","docs/examples/IxButtonMulti/ExampleIxButtonMulti.js","docs/examples/Label/ExampleOptional.js","docs/examples/Label/ExampleRequired.js","docs/examples/PasswordInput/ExampleAllFeatures.js","docs/examples/ProgressBar/Example100Percent.js","docs/examples/ProgressBar/Example10Percent.js","docs/examples/ProgressBar/Example50Percent.js","docs/examples/TextInput/ExampleError.js","docs/examples/TextInput/ExampleOptional.js","components/Tooltip/Tooltip.js","docs/examples/Tooltip/TooltipExample.js","components/TextInputStyledComponents/TextInputStyledComponents.js","docs/examples/TextInputStyledComponents/ExampleError.js","components/TextInputCSSModules/TextInputCSSModules.js","docs/examples/TextInputCSSModules/ExampleError.js","components/ForTesting/ForTesting.js","docs/examples/ExpandingBar/ExampleBar.js","components/TextInputBEM/TextInputBEM.js","docs/examples/TextInputBEM/ExampleError.js","components/RegistrationForm/RegistrationForm.js","docs/examples/RegistrationForm/ExampleRegistrationForm.js","components/HelloWorld/HelloWorld.js","docs/examples/HelloWorld/ExampleHelloWorld.js","docs/examples sync /^/.*$","docs/Navigation.js","docs/CodeExample.js","docs/Example.js","docs/Props.js","docs/ComponentPage.js","docs/Docs.js","serviceWorker.js","index.js"],"names":["IxButton","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","hover","setState","_this2","_this$props","color","backgroundColor","iconHoverColor","size","shadow","handleClick","shape","icon","react_default","a","createElement","style","width","height","borderRadius","border","concat","boxShadow","margin","cursor","onMouseOut","mouseOut","onMouseOver","mouseOver","onClick","display","justifyContent","className","float","React","Component","defaultProps","console","log","__webpack_require__","d","__webpack_exports__","components_IxButton_IxButton","Label","_ref","htmlFor","label","required","Label_Label","ProgressBar","getColor","percent","getWidthAsPercentOfTotalWidth","parseInt","objectSpread","components_ProgressBar_ProgressBar","TextInput","htmlId","name","_ref$type","type","_ref$required","onChange","placeholder","value","error","children","objectWithoutProperties","marginBottom","assign","id","TextInput_TextInput","ClickToEnterTextField","isEntered","isHover","onSubmit","leftMargin","topMargin","rightMargin","bottomMargin","padding","bind","marginBlockStart","marginBlockEnd","onClickField","marginBlock","components_ClickToEnterTextField_ClickToEnterTextField","EyeIcon","xmlns","viewBox","transform","fill","cx","cy","r","EyeIcon_EyeIcon","IxButtonMulti","open","zIndex","position","components_IxButtonMulti_IxButtonMulti","ExpandingBar","toggleExpanded","expanded","startHeight","endHeight","AnimateHeight_default","duration","multiplier","components_ExpandingBar_ExpandingBar","PasswordInput","toggleShowPassword","event","prevState","showPassword","preventDefault","maxLength","showVisibilityToggle","quality","href","marginLeft","length","components_PasswordInput_PasswordInput","module","exports","description","computed","defaultValue","code","examples","message","confirmationMessage","minPasswordLength","ExampleTextField","react__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_0___default","n","ps_react_ClickToEnterTextField__WEBPACK_IMPORTED_MODULE_1__","target","ExampleBar","ps_react_ExpandingBar__WEBPACK_IMPORTED_MODULE_1__","ps_react_ClickToEnterTextField__WEBPACK_IMPORTED_MODULE_2__","flexDirection","alignItems","marginTop","EyeIconExample","ps_react_EyeIcon__WEBPACK_IMPORTED_MODULE_1__","ExampleButton","ps_react_IxButton__WEBPACK_IMPORTED_MODULE_1__","ExampleCirclesMulti","ps_react_IxButtonMulti__WEBPACK_IMPORTED_MODULE_2__","ExampleOptional","ps_react_Label__WEBPACK_IMPORTED_MODULE_1__","ExampleRequired","ExampleAllFeatures","C_Users_rphme_Desktop_Misc_Development_JSReact_reusable_react_components_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_0__","C_Users_rphme_Desktop_Misc_Development_JSReact_reusable_react_components_node_modules_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_2__","C_Users_rphme_Desktop_Misc_Development_JSReact_reusable_react_components_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_3__","password","react__WEBPACK_IMPORTED_MODULE_5___default","ps_react_PasswordInput__WEBPACK_IMPORTED_MODULE_6__","minLength","getQuality","Example10Percent","ps_react_ProgressBar__WEBPACK_IMPORTED_MODULE_1__","ExampleError","ps_react_TextInput__WEBPACK_IMPORTED_MODULE_6__","bottom","left","top","right","getLocation","dir","Tooltip","tip","direction","fontWeight","fontSize","TooltipExample","Fragment","components_Tooltip_Tooltip","Error","styled","div","_templateObject","Input","input","_templateObject2","Fieldset","_templateObject3","TextInputStyledComponents","styles","fieldset","inputError","TextInputCSSModules","TextInputBEM","RegistrationForm","user","ListeningStateChangedEvent","validate","submitted","email","errors","getOwnPropertyNames","_this$state","_this$state$user","passwordQuality","ExampleRegistrationForm","components_RegistrationForm_RegistrationForm","HelloWorld","ExampleHelloWorld","components_HelloWorld_HelloWorld","map","./ClickToEnterTextField/ExampleTextField","./ClickToEnterTextField/ExampleTextField.js","./ExpandingBar/ExampleBar","./ExpandingBar/ExampleBar.js","./ExpandingBar/IxBarExample","./ExpandingBar/IxBarExample.js","./EyeIcon/ExampleEye","./EyeIcon/ExampleEye.js","./HelloWorld/ExampleHelloWorld","./HelloWorld/ExampleHelloWorld.js","./IxButton/ExampleButton","./IxButton/ExampleButton.js","./IxButtonMulti/ExampleButtonMultiCircle","./IxButtonMulti/ExampleButtonMultiCircle.js","./IxButtonMulti/ExampleIxButtonMulti","./IxButtonMulti/ExampleIxButtonMulti.js","./Label/ExampleOptional","./Label/ExampleOptional.js","./Label/ExampleRequired","./Label/ExampleRequired.js","./PasswordInput/ExampleAllFeatures","./PasswordInput/ExampleAllFeatures.js","./ProgressBar/Example100Percent","./ProgressBar/Example100Percent.js","./ProgressBar/Example10Percent","./ProgressBar/Example10Percent.js","./ProgressBar/Example50Percent","./ProgressBar/Example50Percent.js","./RegistrationForm/ExampleRegistrationForm","./RegistrationForm/ExampleRegistrationForm.js","./TextInput/ExampleError","./TextInput/ExampleError.js","./TextInput/ExampleOptional","./TextInput/ExampleOptional.js","./TextInputBEM/ExampleError","./TextInputBEM/ExampleError.js","./TextInputCSSModules/ExampleError","./TextInputCSSModules/ExampleError.js","./TextInputStyledComponents/ExampleError","./TextInputStyledComponents/ExampleError.js","./Tooltip/TooltipExample","./Tooltip/TooltipExample.js","webpackContext","req","webpackContextResolve","e","keys","resolve","Navigation","components","key","CodeExample","hljs","registerLanguage","javascript","highlightBlock","element","ref","Example","toggleCode","showCode","_this$props$example","example","ExampleComponent","require","componentName","default","docs_CodeExample","Props","ComponentPage","component","docs_Example","docs_Props","Docs","route","window","location","hash","substr","addEventListener","componentData","filter","docs_Navigation","docs_ComponentPage","Boolean","hostname","match","ReactDOM","render","Docs_Docs","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.afb3b82a.chunk.js","sourcesContent":["import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { faHome } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { FontAwesomeIcon } from \"react-fontawesome\";\r\n\r\nconst sayHello = () => {\r\n  console.log(\"Hello World!\");\r\n};\r\n\r\nclass IxButton extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { hover: false };\r\n  }\r\n\r\n  mouseOver() {\r\n    this.setState({ hover: true });\r\n  }\r\n\r\n  mouseOut() {\r\n    this.setState({ hover: false });\r\n  }\r\n\r\n  render() {\r\n    const {\r\n      color,\r\n      backgroundColor,\r\n      iconHoverColor,\r\n      size,\r\n      shadow,\r\n      handleClick,\r\n      shape,\r\n      icon\r\n    } = this.props;\r\n    return (\r\n      <div\r\n        style={{\r\n          backgroundColor: this.state.hover ? color : backgroundColor,\r\n          width: size,\r\n          height: size,\r\n          borderRadius: shape === \"circle\" ? \"50%\" : \"10%\",\r\n          border: `3px solid ${color}`,\r\n          boxShadow:\r\n            shadow && this.state.hover && \"2px 2px 4px 0px rgba(0, 0, 0, 0.47)\",\r\n          margin: '5px 5px 5px 5px',\r\n          cursor: this.state.hover && \"pointer\"\r\n        }}\r\n        onMouseOut={() => this.mouseOut()}\r\n        onMouseOver={() => this.mouseOver()}\r\n        onClick={handleClick}\r\n      >\r\n        <div\r\n          style={{\r\n            display: \"flex\",\r\n            justifyContent: \"center\",\r\n            height: \"100%\",\r\n            width: \"100%\"\r\n          }}\r\n        >\r\n          <i\r\n            className={icon}\r\n            style={{\r\n              color: this.state.hover ? iconHoverColor : color,\r\n              margin: \"auto auto\",\r\n              float: \"none\"\r\n            }}\r\n          />\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nIxButton.propTypes = {\r\n  /** Button Color */\r\n  color: PropTypes.string,\r\n\r\n  /** Button Background Color */\r\n  backgroundColor: PropTypes.string,\r\n\r\n  /** Icon Hover Color */\r\n  iconHoverColor: PropTypes.string,\r\n\r\n  /** Width and Height */\r\n  size: PropTypes.number,\r\n\r\n  /** Is there a Shadow? */\r\n  shadow: PropTypes.bool,\r\n\r\n  /** What to do when Clicking */\r\n  handleClick: PropTypes.func.isRequired,\r\n\r\n  /** Shape of the Button */\r\n  shape: PropTypes.string,\r\n\r\n  /** Icon to Display */\r\n  icon: PropTypes.string\r\n};\r\n\r\nIxButton.defaultProps = {\r\n  /** Blue is my Favorite Color! */\r\n  color: \"#0d47a1\",\r\n\r\n  /** Transparent by default */\r\n  backgroundColor: \"transparent\",\r\n\r\n  /** Icon White on Hover by Default */\r\n  iconHoverColor: \"white\",\r\n\r\n  /** 25px Circle */\r\n  size: 45,\r\n\r\n  /** Show Shadow by Default */\r\n  shadow: true,\r\n\r\n  /** By Default prints Hello World to Console */\r\n  handleClick: sayHello,\r\n\r\n  /** icon */\r\n  icon: \"fa fa-paw\"\r\n};\r\n\r\nexport default IxButton;\r\n","export { default } from \"./IxButton\";\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\n/** Label with Required Field, Display, htmlFor, and block styling */\r\n\r\nfunction Label({ htmlFor, label, required }) {\r\n  return (\r\n    <label style={{ display: \"block\" }} htmlFor={htmlFor}>\r\n      {label} {required && <span style={{ color: \"red\" }}> *</span>}\r\n    </label>\r\n  );\r\n}\r\n\r\nLabel.propTypes = {\r\n  /** HTML ID for associated input */\r\n  htmlFor: PropTypes.string.isRequired,\r\n\r\n  /** Label Text */\r\n  label: PropTypes.string.isRequired,\r\n\r\n  /** Display asterisk after label if true */\r\n  required: PropTypes.bool\r\n};\r\n\r\nLabel.defaultProps = {};\r\n\r\nexport default Label;\r\n","export { default } from \"./Label\";\r\n","import * as colors from \"../utils/colors\";\r\nimport * as fonts from \"../utils/fonts\";\r\n\r\nexport const border = {\r\n  border: `solid 1px ${colors.lightGrey}`\r\n};\r\n","export const white = \"#ffffff\";\r\nexport const lightGrey = \"#efefef\";\r\nexport const grey = \"rgba(102,204,255,0.2)\";\r\nexport const red = \"#ff5555\";\r\nexport const violetRed = \"rgb(20, 20, 20, 0.1)\";\r\nexport const gold = \"rgb(243, 182, 97)\";\r\nexport const flatBlack = \"#262626\";\r\nexport const silver = \"#e3e5e4\";\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { border } from \"../../styles/ProgressBar-Styles\";\r\n\r\nclass ProgressBar extends React.Component {\r\n  getColor = percent => {\r\n    if (this.props.percent === 100) return \"green\";\r\n    return this.props.percent >= 50 ? \"lightgreen\" : \"red\";\r\n  };\r\n\r\n  getWidthAsPercentOfTotalWidth = () => {\r\n    return parseInt(this.props.width * (this.props.percent / 100), 10);\r\n  };\r\n\r\n  render() {\r\n    const { percent, width, height } = this.props;\r\n    return (\r\n      <div style={{ ...border, width: width }}>\r\n        <div\r\n          style={{\r\n            width: this.getWidthAsPercentOfTotalWidth(),\r\n            height,\r\n            backgroundColor: this.getColor(percent)\r\n          }}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nProgressBar.propTypes = {\r\n  /** Percent of progress completed */\r\n  percent: PropTypes.number.isRequired,\r\n\r\n  /** Bar Width */\r\n  width: PropTypes.number.isRequired,\r\n\r\n  /** Bar Height */\r\n  height: PropTypes.number\r\n};\r\n\r\n// Declare Default Props\r\nProgressBar.defaultProps = {\r\n  height: 5\r\n};\r\n\r\nexport default ProgressBar;\r\n","export { default } from \"./ProgressBar.js\";\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport Label from \"../Label\";\r\n\r\n/** Text Input with integrated label to enforce consistency in layout, error display, label placement */\r\nfunction TextInput({\r\n  htmlId,\r\n  name,\r\n  label,\r\n  type = \"text\",\r\n  required = false,\r\n  onChange,\r\n  placeholder,\r\n  value,\r\n  error,\r\n  children,\r\n  ...props\r\n}) {\r\n  return (\r\n    <div style={{ marginBottom: 16 }}>\r\n      <Label htmlFor={htmlId} label={label} required={required} />\r\n      <input\r\n        id={htmlId}\r\n        type={type}\r\n        name={name}\r\n        placeholder={placeholder}\r\n        value={value}\r\n        onChange={onChange}\r\n        style={error && { border: \"solid 1px red\" }}\r\n        {...props}\r\n      />\r\n      {children}\r\n      {error && (\r\n        <div className=\"error\" style={{ color: \"red\" }}>\r\n          {error}\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nTextInput.propTypes = {\r\n  /** Unique HTML ID. USed for tying label to HTML input. Handy Hook for automated testing. */\r\n  htmlId: PropTypes.string.isRequired,\r\n\r\n  /** Input Name. Recommend setting this to match object's property so a single change handler can be used */\r\n  name: PropTypes.string.isRequired,\r\n\r\n  /** Input Label */\r\n  label: PropTypes.string.isRequired,\r\n\r\n  /** Input Type */\r\n  type: PropTypes.oneOf([\"text\", \"number\", \"password\"]),\r\n\r\n  /** Mark label with asterisk if required */\r\n  required: PropTypes.bool,\r\n\r\n  /** Function to call onChange */\r\n  onChange: PropTypes.func.isRequired,\r\n\r\n  /** Placeholder to display when empty */\r\n  placeholder: PropTypes.string,\r\n\r\n  /** Value */\r\n  value: PropTypes.any,\r\n\r\n  /** String to display when error occues */\r\n  error: PropTypes.string,\r\n\r\n  /** Child component to display next to the input */\r\n  children: PropTypes.node\r\n};\r\n\r\nexport default TextInput;\r\n","export { default } from \"./TextInput\";\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\n/** Text Input with integrated label to enforce consistency in layout, error display, label placement */\r\nclass ClickToEnterTextField extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { isEntered: false, isHover: false, value: props.value };\r\n  }\r\n\r\n  onClick() {\r\n    this.setState({ isEntered: true, isHover: false });\r\n  }\r\n\r\n  mouseOver() {\r\n    this.setState({ isHover: true });\r\n  }\r\n\r\n  mouseOut() {\r\n    this.setState({ isHover: false });\r\n  }\r\n\r\n  onClickField() {\r\n    this.setState({ isEntered: true });\r\n  }\r\n\r\n  render() {\r\n    const {\r\n      height,\r\n      name,\r\n      onSubmit,\r\n      onChange,\r\n      leftMargin,\r\n      topMargin,\r\n      rightMargin,\r\n      bottomMargin,\r\n      display,\r\n      color,\r\n      ...props\r\n    } = this.props;\r\n    return (\r\n      <div\r\n        style={{\r\n          display: display,\r\n          margin: \"0px 0px 0px 0px\",\r\n          padding: \"0px\"\r\n        }}\r\n      >\r\n        {this.state.isEntered ? (\r\n          <form onSubmit={onSubmit.bind(this)}>\r\n            <input\r\n              type=\"text\"\r\n              name={name}\r\n              placeholder={name}\r\n              value={this.state.value}\r\n              style={{\r\n                display: display,\r\n                marginBlockStart: \"1px\",\r\n                marginBlockEnd: \"1px\"\r\n              }}\r\n              onChange={onChange.bind(this)}\r\n            />\r\n          </form>\r\n        ) : (\r\n          <p\r\n            onMouseOver={() => this.mouseOver()}\r\n            onMouseOut={() => this.mouseOut()}\r\n            onClick={() => this.onClickField()}\r\n            style={{\r\n              display: display,\r\n              border: this.state.isHover ? \"2px solid white\" : \"\",\r\n              marginBlock: this.state.isHover ? \"1px\" : \"3px\",\r\n              margin: this.state.isHover\r\n                ? \"2px 2px 2px 2px\"\r\n                : \"4px 4px 4px 4px\",\r\n              color: color\r\n            }}\r\n          >\r\n            {this.state.value}\r\n          </p>\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nClickToEnterTextField.propTypes = {\r\n  /** Input Name. Recommend setting this to match object's property so a single change handler can be used */\r\n  name: PropTypes.string.isRequired,\r\n\r\n  /** Input Type */\r\n  type: PropTypes.oneOf([\"text\", \"number\", \"password\"]),\r\n\r\n  /** Mark label with asterisk if required */\r\n  required: PropTypes.bool,\r\n\r\n  /** Function to call onChange */\r\n  onChange: PropTypes.func.isRequired,\r\n\r\n  /** Function to call onSubmit */\r\n  onSubmit: PropTypes.func.isRequired,\r\n\r\n  /** Placeholder to display when empty */\r\n  placeholder: PropTypes.string,\r\n\r\n  /** Value */\r\n  value: PropTypes.any,\r\n\r\n  /** String to display when error occues */\r\n  error: PropTypes.string,\r\n\r\n  /** Child component to display next to the input */\r\n  children: PropTypes.node,\r\n\r\n  /** Display Format */\r\n  display: PropTypes.string,\r\n\r\n  /** Left Margin */\r\n  leftMargin: PropTypes.string,\r\n\r\n  /** Top Margin */\r\n  topMargin: PropTypes.string,\r\n\r\n  /** Bottom Margin */\r\n  bottomMargin: PropTypes.string,\r\n\r\n  /** Right Margin */\r\n  rightMargin: PropTypes.string,\r\n\r\n  /** Text Color */\r\n  color: PropTypes.string\r\n};\r\n\r\nClickToEnterTextField.defaultProps = {\r\n  value: \"PART NAME\",\r\n  leftMargin: \"5px\",\r\n  rightMargin: \"10px\",\r\n  topMargin: \"5px\",\r\n  bottomMargin: \"5px\",\r\n  display: \"inline-block\"\r\n};\r\n\r\nexport default ClickToEnterTextField;\r\n","export { default } from \"./ClickToEnterTextField\";\r\n","import React from \"react\";\r\n\r\n/** SVG Eye Icon */\r\nfunction EyeIcon() {\r\n  // Attribution: Fabian Alexis at https://commons.wikimedia.org/wiki/File:Antu_view-preview.svg\r\n  return (\r\n    <svg\r\n      width=\"25\"\r\n      height=\"25\"\r\n      xmlns=\"http://www.w3.org/2000/svg\"\r\n      viewBox=\"0 0 22 22\"\r\n    >\r\n      <g transform=\"matrix(.02146 0 0 .02146 1 1)\" fill=\"gray\">\r\n        <path d=\"m466.07 161.53c-205.6 0-382.8 121.2-464.2 296.1-2.5 5.3-2.5 11.5 0 16.9 81.4 174.9 258.6 296.1 464.2 296.1 205.6 0 382.8-121.2 464.2-296.1 2.5-5.3 2.5-11.5 0-16.9-81.4-174.9-258.6-296.1-464.2-296.1m0 514.7c-116.1 0-210.1-94.1-210.1-210.1 0-116.1 94.1-210.1 210.1-210.1 116.1 0 210.1 94.1 210.1 210.1 0 116-94.1 210.1-210.1 210.1\" />\r\n        <circle cx=\"466.08\" cy=\"466.02\" r=\"134.5\" />\r\n      </g>\r\n    </svg>\r\n  );\r\n}\r\n\r\nexport default EyeIcon;\r\n","export { default } from \"./EyeIcon\";\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport IxButton from \"../IxButton\";\r\n\r\nclass IxButtonMulti extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { open: false };\r\n  }\r\n\r\n  onClick() {\r\n    this.setState({ open: !this.state.open });\r\n  }\r\n\r\n  // The button defined here will handle the opening/closing of the dropdown.\r\n  // The buttons within the dropdown will be defined in the example.\r\n  render() {\r\n    const { children, shape, backgroundColor } = this.props;\r\n    return (\r\n      <div style={{ zIndex: this.state.open ? 100 : 10, position: \"relative\" }}>\r\n        <IxButton\r\n          shape={shape}\r\n          backgroundColor={backgroundColor}\r\n          handleClick={this.onClick.bind(this)}\r\n        />\r\n        <div style={{ position: \"absolute\" }}>\r\n          {this.state.open && children}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nIxButtonMulti.propTypes = {\r\n  /** The Buttons that Exist in the Dropdown Menu */\r\n  children: PropTypes.any,\r\n\r\n  /** The Shape of the Main Button */\r\n  shape: PropTypes.string\r\n};\r\n\r\nIxButtonMulti.defaultProps = {\r\n  shape: \"square\"\r\n};\r\n\r\nexport default IxButtonMulti;\r\n","export { default } from \"./IxButtonMulti\";\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport AnimateHeight from \"react-animate-height\";\r\nimport { faStarHalfAlt } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nclass ExpandingBar extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { expanded: false };\r\n  }\r\n\r\n  toggleExpanded = () => {\r\n    this.setState({ expanded: !this.state.expanded });\r\n  };\r\n\r\n  render() {\r\n    const { children, startHeight, endHeight, backgroundColor } = this.props;\r\n    return (\r\n      <div>\r\n        <AnimateHeight\r\n          duration={250}\r\n          height={this.state.expanded ? endHeight : startHeight}\r\n        >\r\n          <div\r\n            style={{\r\n              backgroundColor: backgroundColor,\r\n              height: this.state.expanded ? endHeight : startHeight\r\n            }}\r\n            onClick={this.toggleExpanded}\r\n          >\r\n            {children}\r\n          </div>\r\n        </AnimateHeight>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nExpandingBar.propTypes = {\r\n  /** Background Color */\r\n  backgroundColor: PropTypes.string,\r\n\r\n  /** Bar Height */\r\n  height: PropTypes.number,\r\n\r\n  /** Factor to Expand By */\r\n  multiplier: PropTypes.number\r\n};\r\n\r\nExpandingBar.defaultProps = {\r\n  /** IX Extract Color */\r\n  backgroundColor: \"#445160\",\r\n\r\n  /** Height */\r\n  height: 50,\r\n\r\n  /** Expansion Factor */\r\n  multiplier: 1.5\r\n};\r\n\r\nexport default ExpandingBar;\r\n","export { default } from \"./ExpandingBar\";\r\n","import React from \"react\";\r\nimport Label from \"../Label\";\r\nimport TextInput from \"../TextInput\";\r\nimport PropTypes from \"prop-types\";\r\nimport EyeIcon from \"../EyeIcon\";\r\nimport ProgressBar from \"../ProgressBar\";\r\n\r\n/** Password Input with Integrated Label, quality tips, and show password toggle */\r\nclass PasswordInput extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      showPassword: false\r\n    };\r\n  }\r\n\r\n  toggleShowPassword = event => {\r\n    this.setState(prevState => {\r\n      return { showPassword: !prevState.showPassword };\r\n    });\r\n    if (event) event.preventDefault();\r\n  };\r\n\r\n  render() {\r\n    const {\r\n      htmlId,\r\n      value,\r\n      label,\r\n      error,\r\n      onChange,\r\n      placeholder,\r\n      maxLength,\r\n      showVisibilityToggle,\r\n      quality,\r\n      ...props\r\n    } = this.props;\r\n    const { showPassword } = this.state;\r\n\r\n    return (\r\n      <TextInput\r\n        htmlId={htmlId}\r\n        label={label}\r\n        placeholder={placeholder}\r\n        type={showPassword ? \"text\" : \"password\"}\r\n        onChange={onChange}\r\n        value={value}\r\n        maxLength={maxLength}\r\n        error={error}\r\n        required\r\n        {...props}\r\n      >\r\n        {showVisibilityToggle && (\r\n          <a\r\n            href=\"#\"\r\n            onClick={this.toggleShowPassword}\r\n            style={{ marginLeft: 5 }}\r\n          >\r\n            <EyeIcon />\r\n          </a>\r\n        )}\r\n        {value.length > 0 && quality && (\r\n          <ProgressBar percent={quality} width={130} />\r\n        )}\r\n      </TextInput>\r\n    );\r\n  }\r\n}\r\n\r\nPasswordInput.propTypes = {\r\n  /** Unique HTML ID. Used for tying label to HTML input. Handy hook for automated testing. */\r\n  htmlId: PropTypes.string.isRequired,\r\n\r\n  /** Input name. Recommend setting this to match object's property so a single change handler can be used by convention.*/\r\n  name: PropTypes.string.isRequired,\r\n\r\n  /** Password value */\r\n  value: PropTypes.any,\r\n\r\n  /** Input label */\r\n  label: PropTypes.string,\r\n\r\n  /** Function called when password input value changes */\r\n  onChange: PropTypes.func.isRequired,\r\n\r\n  /** Max password length accepted */\r\n  maxLength: PropTypes.number,\r\n\r\n  /** Placeholder displayed when no password is entered */\r\n  placeholder: PropTypes.string,\r\n\r\n  /** Set to true to show the toggle for displaying the currently entered password */\r\n  showVisibilityToggle: PropTypes.bool,\r\n\r\n  /** Display password quality visually via ProgressBar, accepts a number between 0 and 100 */\r\n  quality: PropTypes.number,\r\n\r\n  /** Validation error to display */\r\n  error: PropTypes.string\r\n};\r\n\r\nPasswordInput.defaultProps = {\r\n  maxLength: 50,\r\n  showVisibilityToggle: false,\r\n  label: \"Password\"\r\n};\r\n\r\nexport default PasswordInput;\r\n","export { default } from \"./PasswordInput\";\r\n","module.exports = [{\n  \"name\": \"ClickToEnterTextField\",\n  \"description\": \"Text Input with integrated label to enforce consistency in layout, error display, label placement\",\n  \"props\": {\n    \"name\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": true,\n      \"description\": \"Input Name. Recommend setting this to match object's property so a single change handler can be used\"\n    },\n    \"type\": {\n      \"type\": {\n        \"name\": \"enum\",\n        \"value\": [{\n          \"value\": \"\\\"text\\\"\",\n          \"computed\": false\n        }, {\n          \"value\": \"\\\"number\\\"\",\n          \"computed\": false\n        }, {\n          \"value\": \"\\\"password\\\"\",\n          \"computed\": false\n        }]\n      },\n      \"required\": false,\n      \"description\": \"Input Type\"\n    },\n    \"required\": {\n      \"type\": {\n        \"name\": \"bool\"\n      },\n      \"required\": false,\n      \"description\": \"Mark label with asterisk if required\"\n    },\n    \"onChange\": {\n      \"type\": {\n        \"name\": \"func\"\n      },\n      \"required\": true,\n      \"description\": \"Function to call onChange\"\n    },\n    \"onSubmit\": {\n      \"type\": {\n        \"name\": \"func\"\n      },\n      \"required\": true,\n      \"description\": \"Function to call onSubmit\"\n    },\n    \"placeholder\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": false,\n      \"description\": \"Placeholder to display when empty\"\n    },\n    \"value\": {\n      \"type\": {\n        \"name\": \"any\"\n      },\n      \"required\": false,\n      \"description\": \"Value\",\n      \"defaultValue\": {\n        \"value\": \"\\\"PART NAME\\\"\",\n        \"computed\": false\n      }\n    },\n    \"error\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": false,\n      \"description\": \"String to display when error occues\"\n    },\n    \"children\": {\n      \"type\": {\n        \"name\": \"node\"\n      },\n      \"required\": false,\n      \"description\": \"Child component to display next to the input\"\n    },\n    \"display\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": false,\n      \"description\": \"Display Format\",\n      \"defaultValue\": {\n        \"value\": \"\\\"inline-block\\\"\",\n        \"computed\": false\n      }\n    },\n    \"leftMargin\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": false,\n      \"description\": \"Left Margin\",\n      \"defaultValue\": {\n        \"value\": \"\\\"5px\\\"\",\n        \"computed\": false\n      }\n    },\n    \"topMargin\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": false,\n      \"description\": \"Top Margin\",\n      \"defaultValue\": {\n        \"value\": \"\\\"5px\\\"\",\n        \"computed\": false\n      }\n    },\n    \"bottomMargin\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": false,\n      \"description\": \"Bottom Margin\",\n      \"defaultValue\": {\n        \"value\": \"\\\"5px\\\"\",\n        \"computed\": false\n      }\n    },\n    \"rightMargin\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": false,\n      \"description\": \"Right Margin\",\n      \"defaultValue\": {\n        \"value\": \"\\\"10px\\\"\",\n        \"computed\": false\n      }\n    },\n    \"color\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": false,\n      \"description\": \"Text Color\"\n    }\n  },\n  \"code\": \"import React from \\\"react\\\";\\r\\nimport PropTypes from \\\"prop-types\\\";\\r\\n\\r\\n/** Text Input with integrated label to enforce consistency in layout, error display, label placement */\\r\\nclass ClickToEnterTextField extends React.Component {\\r\\n  constructor(props) {\\r\\n    super(props);\\r\\n    this.state = { isEntered: false, isHover: false, value: props.value };\\r\\n  }\\r\\n\\r\\n  onClick() {\\r\\n    this.setState({ isEntered: true, isHover: false });\\r\\n  }\\r\\n\\r\\n  mouseOver() {\\r\\n    this.setState({ isHover: true });\\r\\n  }\\r\\n\\r\\n  mouseOut() {\\r\\n    this.setState({ isHover: false });\\r\\n  }\\r\\n\\r\\n  onClickField() {\\r\\n    this.setState({ isEntered: true });\\r\\n  }\\r\\n\\r\\n  render() {\\r\\n    const {\\r\\n      height,\\r\\n      name,\\r\\n      onSubmit,\\r\\n      onChange,\\r\\n      leftMargin,\\r\\n      topMargin,\\r\\n      rightMargin,\\r\\n      bottomMargin,\\r\\n      display,\\r\\n      color,\\r\\n      ...props\\r\\n    } = this.props;\\r\\n    return (\\r\\n      <div\\r\\n        style={{\\r\\n          display: display,\\r\\n          margin: \\\"0px 0px 0px 0px\\\",\\r\\n          padding: \\\"0px\\\"\\r\\n        }}\\r\\n      >\\r\\n        {this.state.isEntered ? (\\r\\n          <form onSubmit={onSubmit.bind(this)}>\\r\\n            <input\\r\\n              type=\\\"text\\\"\\r\\n              name={name}\\r\\n              placeholder={name}\\r\\n              value={this.state.value}\\r\\n              style={{\\r\\n                display: display,\\r\\n                marginBlockStart: \\\"2px\\\",\\r\\n                marginBlockEnd: \\\"2px\\\"\\r\\n              }}\\r\\n              onChange={onChange.bind(this)}\\r\\n            />\\r\\n          </form>\\r\\n        ) : (\\r\\n          <p\\r\\n            onMouseOver={() => this.mouseOver()}\\r\\n            onMouseOut={() => this.mouseOut()}\\r\\n            onClick={() => this.onClickField()}\\r\\n            style={{\\r\\n              display: display,\\r\\n              border: this.state.isHover ? \\\"2px solid white\\\" : \\\"\\\",\\r\\n              marginBlock: this.state.isHover ? \\\"1px\\\" : \\\"3px\\\",\\r\\n              margin: this.state.isHover\\r\\n                ? \\\"2px 2px 2px 2px\\\"\\r\\n                : \\\"4px 4px 4px 4px\\\",\\r\\n              color: color\\r\\n            }}\\r\\n          >\\r\\n            {this.state.value}\\r\\n          </p>\\r\\n        )}\\r\\n      </div>\\r\\n    );\\r\\n  }\\r\\n}\\r\\n\\r\\nClickToEnterTextField.propTypes = {\\r\\n  /** Input Name. Recommend setting this to match object's property so a single change handler can be used */\\r\\n  name: PropTypes.string.isRequired,\\r\\n\\r\\n  /** Input Type */\\r\\n  type: PropTypes.oneOf([\\\"text\\\", \\\"number\\\", \\\"password\\\"]),\\r\\n\\r\\n  /** Mark label with asterisk if required */\\r\\n  required: PropTypes.bool,\\r\\n\\r\\n  /** Function to call onChange */\\r\\n  onChange: PropTypes.func.isRequired,\\r\\n\\r\\n  /** Function to call onSubmit */\\r\\n  onSubmit: PropTypes.func.isRequired,\\r\\n\\r\\n  /** Placeholder to display when empty */\\r\\n  placeholder: PropTypes.string,\\r\\n\\r\\n  /** Value */\\r\\n  value: PropTypes.any,\\r\\n\\r\\n  /** String to display when error occues */\\r\\n  error: PropTypes.string,\\r\\n\\r\\n  /** Child component to display next to the input */\\r\\n  children: PropTypes.node,\\r\\n\\r\\n  /** Display Format */\\r\\n  display: PropTypes.string,\\r\\n\\r\\n  /** Left Margin */\\r\\n  leftMargin: PropTypes.string,\\r\\n\\r\\n  /** Top Margin */\\r\\n  topMargin: PropTypes.string,\\r\\n\\r\\n  /** Bottom Margin */\\r\\n  bottomMargin: PropTypes.string,\\r\\n\\r\\n  /** Right Margin */\\r\\n  rightMargin: PropTypes.string,\\r\\n\\r\\n  /** Text Color */\\r\\n  color: PropTypes.string\\r\\n};\\r\\n\\r\\nClickToEnterTextField.defaultProps = {\\r\\n  value: \\\"PART NAME\\\",\\r\\n  leftMargin: \\\"5px\\\",\\r\\n  rightMargin: \\\"10px\\\",\\r\\n  topMargin: \\\"5px\\\",\\r\\n  bottomMargin: \\\"5px\\\",\\r\\n  display: \\\"inline-block\\\"\\r\\n};\\r\\n\\r\\nexport default ClickToEnterTextField;\\r\\n\",\n  \"examples\": [{\n    \"name\": \"ExampleTextField\",\n    \"description\": \"Optional TextBox\",\n    \"code\": \"import React from \\\"react\\\";\\r\\nimport ClickToEnterTextField from \\\"ps-react/ClickToEnterTextField\\\";\\r\\n\\r\\n/** Optional TextBox */\\r\\nexport default function ExampleTextField() {\\r\\n  function onSubmit(event) {\\r\\n    this.setState({isEntered: false});\\r\\n    this.setState({isHover: false});\\r\\n    /** make any additonal calls or logic when submitting here, e.g. updating the DB */\\r\\n    event.preventDefault();\\r\\n  }\\r\\n\\r\\n  function onChange(event) {\\r\\n    this.setState({ value: event.target.value });\\r\\n    /** make any additional calls or logic when submitting here */\\r\\n  }\\r\\n\\r\\n  return (\\r\\n    <ClickToEnterTextField name=\\\"partname\\\" onChange={onChange} onSubmit={onSubmit} />\\r\\n  );\\r\\n}\\r\\n\"\n  }]\n}, {\n  \"name\": \"ExpandingBar\",\n  \"description\": \"\",\n  \"props\": {\n    \"backgroundColor\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": false,\n      \"description\": \"Background Color\",\n      \"defaultValue\": {\n        \"value\": \"\\\"#445160\\\"\",\n        \"computed\": false\n      }\n    },\n    \"height\": {\n      \"type\": {\n        \"name\": \"number\"\n      },\n      \"required\": false,\n      \"description\": \"Bar Height\",\n      \"defaultValue\": {\n        \"value\": \"50\",\n        \"computed\": false\n      }\n    },\n    \"multiplier\": {\n      \"type\": {\n        \"name\": \"number\"\n      },\n      \"required\": false,\n      \"description\": \"Factor to Expand By\",\n      \"defaultValue\": {\n        \"value\": \"1.5\",\n        \"computed\": false\n      }\n    }\n  },\n  \"code\": \"import React from \\\"react\\\";\\r\\nimport PropTypes from \\\"prop-types\\\";\\r\\nimport AnimateHeight from \\\"react-animate-height\\\";\\r\\n\\r\\nclass ExpandingBar extends React.Component {\\r\\n  constructor(props) {\\r\\n    super(props);\\r\\n    this.state = { currentHeight: props.height, expanded: false };\\r\\n  }\\r\\n\\r\\n  toggleHeight = () => {\\r\\n    this.setState({\\r\\n      currentHeight:\\r\\n        this.state.currentHeight === this.props.height\\r\\n          ? \\\"auto\\\"\\r\\n          : this.props.height,\\r\\n      expanded: !this.state.expanded\\r\\n    });\\r\\n  };\\r\\n\\r\\n  render() {\\r\\n    const { currentHeight } = this.state;\\r\\n    const { children, height, backgroundColor } = this.props;\\r\\n    return (\\r\\n      <div>\\r\\n        <AnimateHeight duration={250} height={currentHeight}>\\r\\n          <div\\r\\n            style={{\\r\\n              backgroundColor: backgroundColor,\\r\\n              height: \\\"auto\\\"\\r\\n            }}\\r\\n            onClick={this.toggleHeight}\\r\\n          >\\r\\n            {children}\\r\\n          </div>\\r\\n        </AnimateHeight>\\r\\n      </div>\\r\\n    );\\r\\n  }\\r\\n}\\r\\n\\r\\nExpandingBar.propTypes = {\\r\\n  /** Background Color */\\r\\n  backgroundColor: PropTypes.string,\\r\\n\\r\\n  /** Bar Height */\\r\\n  height: PropTypes.number,\\r\\n\\r\\n  /** Factor to Expand By */\\r\\n  multiplier: PropTypes.number\\r\\n};\\r\\n\\r\\nExpandingBar.defaultProps = {\\r\\n  /** IX Extract Color */\\r\\n  backgroundColor: \\\"#445160\\\",\\r\\n\\r\\n  /** Height */\\r\\n  height: 50,\\r\\n\\r\\n  /** Expansion Factor */\\r\\n  multiplier: 1.5\\r\\n};\\r\\n\\r\\nexport default ExpandingBar;\\r\\n\",\n  \"examples\": [{\n    \"name\": \"ExampleBar\",\n    \"description\": \"\",\n    \"code\": \"import React from \\\"react\\\";\\r\\nimport ExpandingBar from \\\"ps-react/ExpandingBar\\\";\\r\\nimport ForTesting from \\\"ps-react/ForTesting\\\";\\r\\n\\r\\nexport default function ExampleBar() {\\r\\n  return (\\r\\n    <>\\r\\n      <ExpandingBar duration={500} startHeight={100} endHeight={150}>\\r\\n        <div style={{ height: \\\"auto\\\" }}>\\r\\n          <i\\r\\n            className={\\\"fa fa-cubes fa-3x\\\"}\\r\\n            style={{\\r\\n              margin: \\\"auto auto\\\",\\r\\n              float: \\\"none\\\",\\r\\n              color: \\\"#0d47a1\\\",\\r\\n              display: \\\"inline-block\\\",\\r\\n              height: \\\"100%\\\"\\r\\n            }}\\r\\n          />\\r\\n          <div\\r\\n            style={{\\r\\n              display: \\\"inline-block\\\",\\r\\n              marginLeft: \\\"10px\\\",\\r\\n              marginTop: \\\"0px\\\"\\r\\n            }}\\r\\n          >\\r\\n            <div>\\r\\n              <h1\\r\\n                style={{\\r\\n                  display: \\\"inline-block\\\",\\r\\n                  marginBottom: \\\"0px\\\",\\r\\n                  color: \\\"white\\\"\\r\\n                }}\\r\\n              >\\r\\n                PART NAME\\r\\n              </h1>\\r\\n            </div>\\r\\n            <div>\\r\\n              <h2\\r\\n                style={{\\r\\n                  display: \\\"inline-block\\\",\\r\\n                  marginTop: \\\"0px\\\",\\r\\n                  color: \\\"white\\\"\\r\\n                }}\\r\\n              >\\r\\n                PART NUMBER\\r\\n              </h2>\\r\\n              <h2\\r\\n                style={{\\r\\n                  display: \\\"inline-block\\\",\\r\\n                  marginLeft: \\\"20px\\\",\\r\\n                  marginTop: \\\"0px\\\",\\r\\n                  color: \\\"white\\\"\\r\\n                }}\\r\\n              >\\r\\n                PART REVISION\\r\\n              </h2>\\r\\n            </div>\\r\\n          </div>\\r\\n          <div />\\r\\n        </div>\\r\\n      </ExpandingBar>\\r\\n    </>\\r\\n  );\\r\\n}\\r\\n\"\n  }, {\n    \"name\": \"IxBarExample\",\n    \"description\": \"\",\n    \"code\": \"import React from \\\"react\\\";\\r\\nimport ExpandingBar from \\\"ps-react/ExpandingBar\\\";\\r\\nimport ClickToEnterTextField from \\\"ps-react/ClickToEnterTextField\\\";\\r\\n\\r\\nexport default function ExampleBar() {\\r\\n  function onSubmit(event) {\\r\\n    this.setState({ isEntered: false });\\r\\n    this.setState({ isHover: false });\\r\\n    /** make any additonal calls or logic when submitting here, e.g. updating the DB */\\r\\n    event.preventDefault();\\r\\n  }\\r\\n\\r\\n  function onChange(event) {\\r\\n    this.setState({ value: event.target.value });\\r\\n    /** make any additional calls or logic when submitting here */\\r\\n  }\\r\\n\\r\\n  return (\\r\\n    <ExpandingBar duration={500} height=\\\"auto\\\">\\r\\n      <div style={{ height: \\\"auto\\\", display: \\\"flex\\\", flexDirection: \\\"row\\\" }}>\\r\\n        <div style={{ display: \\\"flex\\\", alignItems: \\\"center\\\" }}>\\r\\n          <i className={\\\"fa fa-cubes fa-3x\\\"} style={{ color: \\\"#0d47a1\\\" }} />\\r\\n        </div>\\r\\n        <div\\r\\n          style={{\\r\\n            display: \\\"inline-block\\\",\\r\\n            marginLeft: \\\"10px\\\",\\r\\n            marginTop: \\\"0px\\\"\\r\\n          }}\\r\\n        >\\r\\n          <ClickToEnterTextField\\r\\n            leftMargin=\\\"10px\\\"\\r\\n            topMargin=\\\"10px\\\"\\r\\n            color=\\\"white\\\"\\r\\n            name=\\\"partname\\\"\\r\\n            onChange={onChange}\\r\\n            onSubmit={onSubmit}\\r\\n            value=\\\"BLACK STEEL MULTI TOOL\\\"\\r\\n          />\\r\\n          <div>\\r\\n            <ClickToEnterTextField\\r\\n              bottomMargin=\\\"10px\\\"\\r\\n              topMargin=\\\"5px\\\"\\r\\n              leftMargin=\\\"10px\\\"\\r\\n              color=\\\"white\\\"\\r\\n              name=\\\"partnum\\\"\\r\\n              onChange={onChange}\\r\\n              onSubmit={onSubmit}\\r\\n              value=\\\"PRT-2322\\\"\\r\\n            />\\r\\n            <ClickToEnterTextField\\r\\n              name=\\\"partrev\\\"\\r\\n              onChange={onChange}\\r\\n              onSubmit={onSubmit}\\r\\n              bottomMargin=\\\"10px\\\"\\r\\n              topMargin=\\\"5px\\\"\\r\\n              leftMargin=\\\"50px\\\"\\r\\n              value=\\\"B3\\\"\\r\\n              color=\\\"white\\\"\\r\\n            />\\r\\n          </div>\\r\\n        </div>\\r\\n      </div>\\r\\n    </ExpandingBar>\\r\\n  );\\r\\n}\\r\\n\"\n  }]\n}, {\n  \"name\": \"EyeIcon\",\n  \"description\": \"SVG Eye Icon\",\n  \"code\": \"import React from \\\"react\\\";\\r\\n\\r\\n/** SVG Eye Icon */\\r\\nfunction EyeIcon() {\\r\\n  // Attribution: Fabian Alexis at https://commons.wikimedia.org/wiki/File:Antu_view-preview.svg\\r\\n  return (\\r\\n    <svg\\r\\n      width=\\\"25\\\"\\r\\n      height=\\\"25\\\"\\r\\n      xmlns=\\\"http://www.w3.org/2000/svg\\\"\\r\\n      viewBox=\\\"0 0 22 22\\\"\\r\\n    >\\r\\n      <g transform=\\\"matrix(.02146 0 0 .02146 1 1)\\\" fill=\\\"gray\\\">\\r\\n        <path d=\\\"m466.07 161.53c-205.6 0-382.8 121.2-464.2 296.1-2.5 5.3-2.5 11.5 0 16.9 81.4 174.9 258.6 296.1 464.2 296.1 205.6 0 382.8-121.2 464.2-296.1 2.5-5.3 2.5-11.5 0-16.9-81.4-174.9-258.6-296.1-464.2-296.1m0 514.7c-116.1 0-210.1-94.1-210.1-210.1 0-116.1 94.1-210.1 210.1-210.1 116.1 0 210.1 94.1 210.1 210.1 0 116-94.1 210.1-210.1 210.1\\\" />\\r\\n        <circle cx=\\\"466.08\\\" cy=\\\"466.02\\\" r=\\\"134.5\\\" />\\r\\n      </g>\\r\\n    </svg>\\r\\n  );\\r\\n}\\r\\n\\r\\nexport default EyeIcon;\\r\\n\",\n  \"examples\": [{\n    \"name\": \"ExampleEye\",\n    \"description\": \"\",\n    \"code\": \"import React from \\\"react\\\";\\r\\nimport EyeIcon from \\\"ps-react/EyeIcon\\\";\\r\\n\\r\\nexport default function EyeIconExample() {\\r\\n  return <EyeIcon />;\\r\\n}\\r\\n\"\n  }]\n}, {\n  \"name\": \"ForTesting\",\n  \"description\": \"\",\n  \"code\": \"import React from \\\"react\\\";\\r\\n\\r\\nclass ForTesting extends React.Component {\\r\\n  constructor(props) {\\r\\n    super(props);\\r\\n    this.state = { tog: false };\\r\\n  }\\r\\n\\r\\n  onClick() {\\r\\n    this.setState({ tog: !this.state.tog });\\r\\n  }\\r\\n\\r\\n  render() {\\r\\n    return (\\r\\n      <div>\\r\\n        <button onClick={this.onClick.bind(this)}>TOGGLE</button>\\r\\n        {this.state.tog ? <h1>FOUND ME!</h1> : <></>}\\r\\n      </div>\\r\\n    );\\r\\n  }\\r\\n}\\r\\n\\r\\nexport default ForTesting;\\r\\n\",\n  \"examples\": []\n}, {\n  \"name\": \"HelloWorld\",\n  \"description\": \"This is the Hello World Component.\",\n  \"props\": {\n    \"message\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": false,\n      \"description\": \"Message to display\",\n      \"defaultValue\": {\n        \"value\": \"\\\"World\\\"\",\n        \"computed\": false\n      }\n    }\n  },\n  \"code\": \"import React from \\\"react\\\";\\r\\nimport PropTypes from \\\"prop-types\\\";\\r\\n\\r\\n/** This is the Hello World Component. */\\r\\nconst HelloWorld = ({ message }) => {\\r\\n  return <div>Hello {message} </div>;\\r\\n};\\r\\n\\r\\nHelloWorld.propTypes = {\\r\\n  /** Message to display */\\r\\n  message: PropTypes.string\\r\\n};\\r\\n\\r\\nHelloWorld.defaultProps = {\\r\\n  message: \\\"World\\\"\\r\\n};\\r\\n\\r\\nexport default HelloWorld;\\r\\n\",\n  \"examples\": [{\n    \"name\": \"ExampleHelloWorld\",\n    \"description\": \"Custom Message\",\n    \"code\": \"import React from \\\"react\\\";\\r\\nimport HelloWorld from \\\"ps-react/HelloWorld\\\";\\r\\n\\r\\n/** Custom Message */\\r\\nexport default function ExampleHelloWorld() {\\r\\n  return <HelloWorld message=\\\"PluralSight Viewers!\\\" />;\\r\\n}\\r\\n\"\n  }]\n}, {\n  \"name\": \"IxButton\",\n  \"description\": \"\",\n  \"props\": {\n    \"color\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": false,\n      \"description\": \"Button Color\",\n      \"defaultValue\": {\n        \"value\": \"\\\"#0d47a1\\\"\",\n        \"computed\": false\n      }\n    },\n    \"backgroundColor\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": false,\n      \"description\": \"Button Background Color\",\n      \"defaultValue\": {\n        \"value\": \"\\\"transparent\\\"\",\n        \"computed\": false\n      }\n    },\n    \"iconHoverColor\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": false,\n      \"description\": \"Icon Hover Color\",\n      \"defaultValue\": {\n        \"value\": \"\\\"white\\\"\",\n        \"computed\": false\n      }\n    },\n    \"size\": {\n      \"type\": {\n        \"name\": \"number\"\n      },\n      \"required\": false,\n      \"description\": \"Width and Height\",\n      \"defaultValue\": {\n        \"value\": \"45\",\n        \"computed\": false\n      }\n    },\n    \"shadow\": {\n      \"type\": {\n        \"name\": \"bool\"\n      },\n      \"required\": false,\n      \"description\": \"Is there a Shadow?\",\n      \"defaultValue\": {\n        \"value\": \"true\",\n        \"computed\": false\n      }\n    },\n    \"handleClick\": {\n      \"type\": {\n        \"name\": \"func\"\n      },\n      \"required\": false,\n      \"description\": \"What to do when Clicking\",\n      \"defaultValue\": {\n        \"value\": \"() => {\\r\\n  console.log(\\\"Hello World!\\\");\\r\\n}\",\n        \"computed\": false\n      }\n    },\n    \"shape\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": false,\n      \"description\": \"Shape of the Button\"\n    },\n    \"icon\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": false,\n      \"description\": \"Icon to Display\",\n      \"defaultValue\": {\n        \"value\": \"\\\"fa fa-paw\\\"\",\n        \"computed\": false\n      }\n    }\n  },\n  \"code\": \"import React from \\\"react\\\";\\r\\nimport PropTypes from \\\"prop-types\\\";\\r\\nimport { faHome } from \\\"@fortawesome/free-solid-svg-icons\\\";\\r\\nimport { FontAwesomeIcon } from \\\"react-fontawesome\\\";\\r\\n\\r\\nconst sayHello = () => {\\r\\n  console.log(\\\"Hello World!\\\");\\r\\n};\\r\\n\\r\\nclass IxButton extends React.Component {\\r\\n  constructor(props) {\\r\\n    super(props);\\r\\n    this.state = { hover: false };\\r\\n  }\\r\\n\\r\\n  mouseOver() {\\r\\n    this.setState({ hover: true });\\r\\n  }\\r\\n\\r\\n  mouseOut() {\\r\\n    this.setState({ hover: false });\\r\\n  }\\r\\n\\r\\n  render() {\\r\\n    const {\\r\\n      color,\\r\\n      backgroundColor,\\r\\n      iconHoverColor,\\r\\n      size,\\r\\n      shadow,\\r\\n      handleClick,\\r\\n      shape,\\r\\n      icon\\r\\n    } = this.props;\\r\\n    return (\\r\\n      <div\\r\\n        style={{\\r\\n          backgroundColor: this.state.hover ? color : backgroundColor,\\r\\n          width: size,\\r\\n          height: size,\\r\\n          borderRadius: shape === \\\"circle\\\" ? \\\"50%\\\" : \\\"10%\\\",\\r\\n          border: `3px solid ${color}`,\\r\\n          boxShadow:\\r\\n            shadow && this.state.hover && \\\"2px 2px 4px 0px rgba(0, 0, 0, 0.47)\\\",\\r\\n          marginLeft: 10,\\r\\n          marginTop: 5,\\r\\n          cursor: this.state.hover && \\\"pointer\\\"\\r\\n        }}\\r\\n        onMouseOut={() => this.mouseOut()}\\r\\n        onMouseOver={() => this.mouseOver()}\\r\\n        onClick={handleClick}\\r\\n      >\\r\\n        <div\\r\\n          style={{\\r\\n            display: \\\"flex\\\",\\r\\n            justifyContent: \\\"center\\\",\\r\\n            height: \\\"100%\\\",\\r\\n            width: \\\"100%\\\"\\r\\n          }}\\r\\n        >\\r\\n          <i\\r\\n            className={icon}\\r\\n            style={{\\r\\n              color: this.state.hover ? iconHoverColor : color,\\r\\n              margin: \\\"auto auto\\\",\\r\\n              float: \\\"none\\\"\\r\\n            }}\\r\\n          />\\r\\n        </div>\\r\\n      </div>\\r\\n    );\\r\\n  }\\r\\n}\\r\\n\\r\\nIxButton.propTypes = {\\r\\n  /** Button Color */\\r\\n  color: PropTypes.string,\\r\\n\\r\\n  /** Button Background Color */\\r\\n  backgroundColor: PropTypes.string,\\r\\n\\r\\n  /** Icon Hover Color */\\r\\n  iconHoverColor: PropTypes.string,\\r\\n\\r\\n  /** Width and Height */\\r\\n  size: PropTypes.number,\\r\\n\\r\\n  /** Is there a Shadow? */\\r\\n  shadow: PropTypes.bool,\\r\\n\\r\\n  /** What to do when Clicking */\\r\\n  handleClick: PropTypes.func.isRequired,\\r\\n\\r\\n  /** Shape of the Button */\\r\\n  shape: PropTypes.string,\\r\\n\\r\\n  /** Icon to Display */\\r\\n  icon: PropTypes.string\\r\\n};\\r\\n\\r\\nIxButton.defaultProps = {\\r\\n  /** Blue is my Favorite Color! */\\r\\n  color: \\\"#0d47a1\\\",\\r\\n\\r\\n  /** Transparent by default */\\r\\n  backgroundColor: \\\"transparent\\\",\\r\\n\\r\\n  /** Icon White on Hover by Default */\\r\\n  iconHoverColor: \\\"white\\\",\\r\\n\\r\\n  /** 25px Circle */\\r\\n  size: 45,\\r\\n\\r\\n  /** Show Shadow by Default */\\r\\n  shadow: true,\\r\\n\\r\\n  /** By Default prints Hello World to Console */\\r\\n  handleClick: sayHello,\\r\\n\\r\\n  /** icon */\\r\\n  icon: \\\"fa fa-paw\\\"\\r\\n};\\r\\n\\r\\nexport default IxButton;\\r\\n\",\n  \"examples\": [{\n    \"name\": \"ExampleButton\",\n    \"description\": \"\",\n    \"code\": \"import React from \\\"react\\\";\\r\\nimport IxButton from \\\"ps-react/IxButton\\\";\\r\\n\\r\\nexport default function ExampleButton() {\\r\\n  const helloExample = () => {\\r\\n    console.log(\\\"Hello Example World!\\\");\\r\\n  };\\r\\n  return <IxButton handleClick={helloExample} />;\\r\\n}\\r\\n\"\n  }]\n}, {\n  \"name\": \"IxButtonMulti\",\n  \"description\": \"\",\n  \"props\": {\n    \"children\": {\n      \"type\": {\n        \"name\": \"any\"\n      },\n      \"required\": false,\n      \"description\": \"The Buttons that Exist in the Dropdown Menu\"\n    },\n    \"shape\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": false,\n      \"description\": \"The Shape of the Main Button\",\n      \"defaultValue\": {\n        \"value\": \"\\\"square\\\"\",\n        \"computed\": false\n      }\n    }\n  },\n  \"code\": \"import React from \\\"react\\\";\\r\\nimport PropTypes from \\\"prop-types\\\";\\r\\nimport IxButton from \\\"../IxButton\\\";\\r\\n\\r\\nclass IxButtonMulti extends React.Component {\\r\\n  constructor(props) {\\r\\n    super(props);\\r\\n    this.state = { open: false };\\r\\n  }\\r\\n\\r\\n  onClick() {\\r\\n    this.setState({ open: !this.state.open });\\r\\n  }\\r\\n\\r\\n  // The button defined here will handle the opening/closing of the dropdown.\\r\\n  // The buttons within the dropdown will be defined in the example.\\r\\n  render() {\\r\\n    const { children, shape, backgroundColor } = this.props;\\r\\n    return (\\r\\n      <div style={{ zIndex: this.state.open ? 100 : 10, position: \\\"relative\\\" }}>\\r\\n        <IxButton\\r\\n          shape={shape}\\r\\n          backgroundColor={backgroundColor}\\r\\n          handleClick={this.onClick.bind(this)}\\r\\n        />\\r\\n        <div style={{ position: \\\"absolute\\\" }}>\\r\\n          {this.state.open && children}\\r\\n        </div>\\r\\n      </div>\\r\\n    );\\r\\n  }\\r\\n}\\r\\n\\r\\nIxButtonMulti.propTypes = {\\r\\n  /** The Buttons that Exist in the Dropdown Menu */\\r\\n  children: PropTypes.any,\\r\\n\\r\\n  /** The Shape of the Main Button */\\r\\n  shape: PropTypes.string\\r\\n};\\r\\n\\r\\nIxButtonMulti.defaultProps = {\\r\\n  shape: \\\"square\\\"\\r\\n};\\r\\n\\r\\nexport default IxButtonMulti;\\r\\n\",\n  \"examples\": [{\n    \"name\": \"ExampleButtonMultiCircle\",\n    \"description\": \"\",\n    \"code\": \"import React from \\\"react\\\";\\r\\nimport IxButton from \\\"ps-react/IxButton\\\";\\r\\nimport IxButtonMulti from \\\"ps-react/IxButtonMulti\\\";\\r\\n\\r\\nexport default function ExampleCirclesMulti() {\\r\\n  return (\\r\\n    <IxButtonMulti shape=\\\"circle\\\" backgroundColor=\\\"white\\\">\\r\\n      <IxButton shape=\\\"circle\\\" backgroundColor=\\\"white\\\" />\\r\\n      <IxButton shape=\\\"circle\\\" backgroundColor=\\\"white\\\" />\\r\\n      <IxButton shape=\\\"circle\\\" backgroundColor=\\\"white\\\" />\\r\\n    </IxButtonMulti>\\r\\n  );\\r\\n}\\r\\n\"\n  }, {\n    \"name\": \"ExampleIxButtonMulti\",\n    \"description\": \"\",\n    \"code\": \"import React from \\\"react\\\";\\r\\nimport IxButton from \\\"ps-react/IxButton\\\";\\r\\nimport IxButtonMulti from \\\"ps-react/IxButtonMulti\\\";\\r\\n\\r\\nexport default function ExampleCirclesMulti() {\\r\\n  return (\\r\\n    <IxButtonMulti>\\r\\n      <IxButton />\\r\\n      <IxButton />\\r\\n      <IxButton />\\r\\n    </IxButtonMulti>\\r\\n  );\\r\\n}\\r\\n\"\n  }]\n}, {\n  \"name\": \"Label\",\n  \"description\": \"Label with Required Field, Display, htmlFor, and block styling\",\n  \"props\": {\n    \"htmlFor\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": true,\n      \"description\": \"HTML ID for associated input\"\n    },\n    \"label\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": true,\n      \"description\": \"Label Text\"\n    },\n    \"required\": {\n      \"type\": {\n        \"name\": \"bool\"\n      },\n      \"required\": false,\n      \"description\": \"Display asterisk after label if true\"\n    }\n  },\n  \"code\": \"import React from \\\"react\\\";\\r\\nimport PropTypes from \\\"prop-types\\\";\\r\\n\\r\\n/** Label with Required Field, Display, htmlFor, and block styling */\\r\\n\\r\\nfunction Label({ htmlFor, label, required }) {\\r\\n  return (\\r\\n    <label style={{ display: \\\"block\\\" }} htmlFor={htmlFor}>\\r\\n      {label} {required && <span style={{ color: \\\"red\\\" }}> *</span>}\\r\\n    </label>\\r\\n  );\\r\\n}\\r\\n\\r\\nLabel.propTypes = {\\r\\n  /** HTML ID for associated input */\\r\\n  htmlFor: PropTypes.string.isRequired,\\r\\n\\r\\n  /** Label Text */\\r\\n  label: PropTypes.string.isRequired,\\r\\n\\r\\n  /** Display asterisk after label if true */\\r\\n  required: PropTypes.bool\\r\\n};\\r\\n\\r\\nLabel.defaultProps = {};\\r\\n\\r\\nexport default Label;\\r\\n\",\n  \"examples\": [{\n    \"name\": \"ExampleOptional\",\n    \"description\": \"Optional Label\",\n    \"code\": \"import React from \\\"react\\\";\\r\\nimport Label from \\\"ps-react/Label\\\";\\r\\n\\r\\n/** Optional Label */\\r\\nexport default function ExampleOptional() {\\r\\n  return <Label htmlFor=\\\"test\\\" label=\\\"test\\\" />;\\r\\n}\\r\\n\"\n  }, {\n    \"name\": \"ExampleRequired\",\n    \"description\": \"Required Label\",\n    \"code\": \"import React from \\\"react\\\";\\r\\nimport Label from \\\"ps-react/Label\\\";\\r\\n\\r\\n/** Required Label */\\r\\nexport default function ExampleRequired() {\\r\\n  return <Label htmlFor=\\\"test\\\" label=\\\"required\\\" required />;\\r\\n}\\r\\n\"\n  }]\n}, {\n  \"name\": \"PasswordInput\",\n  \"description\": \"Password Input with Integrated Label, quality tips, and show password toggle\",\n  \"props\": {\n    \"htmlId\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": true,\n      \"description\": \"Unique HTML ID. Used for tying label to HTML input. Handy hook for automated testing.\"\n    },\n    \"name\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": true,\n      \"description\": \"Input name. Recommend setting this to match object's property so a single change handler can be used by convention.\"\n    },\n    \"value\": {\n      \"type\": {\n        \"name\": \"any\"\n      },\n      \"required\": false,\n      \"description\": \"Password value\"\n    },\n    \"label\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": false,\n      \"description\": \"Input label\",\n      \"defaultValue\": {\n        \"value\": \"\\\"Password\\\"\",\n        \"computed\": false\n      }\n    },\n    \"onChange\": {\n      \"type\": {\n        \"name\": \"func\"\n      },\n      \"required\": true,\n      \"description\": \"Function called when password input value changes\"\n    },\n    \"maxLength\": {\n      \"type\": {\n        \"name\": \"number\"\n      },\n      \"required\": false,\n      \"description\": \"Max password length accepted\",\n      \"defaultValue\": {\n        \"value\": \"50\",\n        \"computed\": false\n      }\n    },\n    \"placeholder\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": false,\n      \"description\": \"Placeholder displayed when no password is entered\"\n    },\n    \"showVisibilityToggle\": {\n      \"type\": {\n        \"name\": \"bool\"\n      },\n      \"required\": false,\n      \"description\": \"Set to true to show the toggle for displaying the currently entered password\",\n      \"defaultValue\": {\n        \"value\": \"false\",\n        \"computed\": false\n      }\n    },\n    \"quality\": {\n      \"type\": {\n        \"name\": \"number\"\n      },\n      \"required\": false,\n      \"description\": \"Display password quality visually via ProgressBar, accepts a number between 0 and 100\"\n    },\n    \"error\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": false,\n      \"description\": \"Validation error to display\"\n    }\n  },\n  \"code\": \"import React from \\\"react\\\";\\r\\nimport Label from \\\"../Label\\\";\\r\\nimport TextInput from \\\"../TextInput\\\";\\r\\nimport PropTypes from \\\"prop-types\\\";\\r\\nimport EyeIcon from \\\"../EyeIcon\\\";\\r\\nimport ProgressBar from \\\"../ProgressBar\\\";\\r\\n\\r\\n/** Password Input with Integrated Label, quality tips, and show password toggle */\\r\\nclass PasswordInput extends React.Component {\\r\\n  constructor(props) {\\r\\n    super(props);\\r\\n    this.state = {\\r\\n      showPassword: false\\r\\n    };\\r\\n  }\\r\\n\\r\\n  toggleShowPassword = event => {\\r\\n    this.setState(prevState => {\\r\\n      return { showPassword: !prevState.showPassword };\\r\\n    });\\r\\n    if (event) event.preventDefault();\\r\\n  };\\r\\n\\r\\n  render() {\\r\\n    const {\\r\\n      htmlId,\\r\\n      value,\\r\\n      label,\\r\\n      error,\\r\\n      onChange,\\r\\n      placeholder,\\r\\n      maxLength,\\r\\n      showVisibilityToggle,\\r\\n      quality,\\r\\n      ...props\\r\\n    } = this.props;\\r\\n    const { showPassword } = this.state;\\r\\n\\r\\n    return (\\r\\n      <TextInput\\r\\n        htmlId={htmlId}\\r\\n        label={label}\\r\\n        placeholder={placeholder}\\r\\n        type={showPassword ? \\\"text\\\" : \\\"password\\\"}\\r\\n        onChange={onChange}\\r\\n        value={value}\\r\\n        maxLength={maxLength}\\r\\n        error={error}\\r\\n        required\\r\\n        {...props}\\r\\n      >\\r\\n        {showVisibilityToggle && (\\r\\n          <a\\r\\n            href=\\\"#\\\"\\r\\n            onClick={this.toggleShowPassword}\\r\\n            style={{ marginLeft: 5 }}\\r\\n          >\\r\\n            <EyeIcon />\\r\\n          </a>\\r\\n        )}\\r\\n        {value.length > 0 && quality && (\\r\\n          <ProgressBar percent={quality} width={130} />\\r\\n        )}\\r\\n      </TextInput>\\r\\n    );\\r\\n  }\\r\\n}\\r\\n\\r\\nPasswordInput.propTypes = {\\r\\n  /** Unique HTML ID. Used for tying label to HTML input. Handy hook for automated testing. */\\r\\n  htmlId: PropTypes.string.isRequired,\\r\\n\\r\\n  /** Input name. Recommend setting this to match object's property so a single change handler can be used by convention.*/\\r\\n  name: PropTypes.string.isRequired,\\r\\n\\r\\n  /** Password value */\\r\\n  value: PropTypes.any,\\r\\n\\r\\n  /** Input label */\\r\\n  label: PropTypes.string,\\r\\n\\r\\n  /** Function called when password input value changes */\\r\\n  onChange: PropTypes.func.isRequired,\\r\\n\\r\\n  /** Max password length accepted */\\r\\n  maxLength: PropTypes.number,\\r\\n\\r\\n  /** Placeholder displayed when no password is entered */\\r\\n  placeholder: PropTypes.string,\\r\\n\\r\\n  /** Set to true to show the toggle for displaying the currently entered password */\\r\\n  showVisibilityToggle: PropTypes.bool,\\r\\n\\r\\n  /** Display password quality visually via ProgressBar, accepts a number between 0 and 100 */\\r\\n  quality: PropTypes.number,\\r\\n\\r\\n  /** Validation error to display */\\r\\n  error: PropTypes.string\\r\\n};\\r\\n\\r\\nPasswordInput.defaultProps = {\\r\\n  maxLength: 50,\\r\\n  showVisibilityToggle: false,\\r\\n  label: \\\"Password\\\"\\r\\n};\\r\\n\\r\\nexport default PasswordInput;\\r\\n\",\n  \"examples\": [{\n    \"name\": \"ExampleAllFeatures\",\n    \"description\": \"All features enabled\",\n    \"code\": \"import React from \\\"react\\\";\\r\\nimport PasswordInput from \\\"ps-react/PasswordInput\\\";\\r\\n\\r\\n/** All features enabled */\\r\\nclass ExampleAllFeatures extends React.Component {\\r\\n  constructor(props) {\\r\\n    super(props);\\r\\n\\r\\n    this.state = {\\r\\n      password: \\\"\\\"\\r\\n    };\\r\\n  }\\r\\n\\r\\n  getQuality() {\\r\\n    const length = this.state.password.length;\\r\\n    return length > 10 ? 100 : length * 10;\\r\\n  }\\r\\n\\r\\n  render() {\\r\\n    return (\\r\\n      <div>\\r\\n        <PasswordInput\\r\\n          htmlId=\\\"password-input-example-all-features\\\"\\r\\n          name=\\\"password\\\"\\r\\n          onChange={event => this.setState({ password: event.target.value })}\\r\\n          value={this.state.password}\\r\\n          minLength={8}\\r\\n          placeholder=\\\"Enter password\\\"\\r\\n          showVisibilityToggle\\r\\n          quality={this.getQuality()}\\r\\n          {...this.props}\\r\\n        />\\r\\n      </div>\\r\\n    );\\r\\n  }\\r\\n}\\r\\n\\r\\nexport default ExampleAllFeatures;\\r\\n\"\n  }]\n}, {\n  \"name\": \"ProgressBar\",\n  \"description\": \"\",\n  \"props\": {\n    \"percent\": {\n      \"type\": {\n        \"name\": \"number\"\n      },\n      \"required\": true,\n      \"description\": \"Percent of progress completed\"\n    },\n    \"width\": {\n      \"type\": {\n        \"name\": \"number\"\n      },\n      \"required\": true,\n      \"description\": \"Bar Width\"\n    },\n    \"height\": {\n      \"type\": {\n        \"name\": \"number\"\n      },\n      \"required\": false,\n      \"description\": \"Bar Height\",\n      \"defaultValue\": {\n        \"value\": \"5\",\n        \"computed\": false\n      }\n    }\n  },\n  \"code\": \"import React from \\\"react\\\";\\r\\nimport PropTypes from \\\"prop-types\\\";\\r\\nimport { border } from \\\"../../styles/ProgressBar-Styles\\\";\\r\\n\\r\\nclass ProgressBar extends React.Component {\\r\\n  getColor = percent => {\\r\\n    if (this.props.percent === 100) return \\\"green\\\";\\r\\n    return this.props.percent >= 50 ? \\\"lightgreen\\\" : \\\"red\\\";\\r\\n  };\\r\\n\\r\\n  getWidthAsPercentOfTotalWidth = () => {\\r\\n    return parseInt(this.props.width * (this.props.percent / 100), 10);\\r\\n  };\\r\\n\\r\\n  render() {\\r\\n    const { percent, width, height } = this.props;\\r\\n    return (\\r\\n      <div style={{ ...border, width: width }}>\\r\\n        <div\\r\\n          style={{\\r\\n            width: this.getWidthAsPercentOfTotalWidth(),\\r\\n            height,\\r\\n            backgroundColor: this.getColor(percent)\\r\\n          }}\\r\\n        />\\r\\n      </div>\\r\\n    );\\r\\n  }\\r\\n}\\r\\n\\r\\nProgressBar.propTypes = {\\r\\n  /** Percent of progress completed */\\r\\n  percent: PropTypes.number.isRequired,\\r\\n\\r\\n  /** Bar Width */\\r\\n  width: PropTypes.number.isRequired,\\r\\n\\r\\n  /** Bar Height */\\r\\n  height: PropTypes.number\\r\\n};\\r\\n\\r\\n// Declare Default Props\\r\\nProgressBar.defaultProps = {\\r\\n  height: 5\\r\\n};\\r\\n\\r\\nexport default ProgressBar;\\r\\n\",\n  \"examples\": [{\n    \"name\": \"Example100Percent\",\n    \"description\": \"100% Progress\",\n    \"code\": \"import React from \\\"react\\\";\\r\\nimport ProgressBar from \\\"ps-react/ProgressBar\\\";\\r\\n\\r\\n/** 100% Progress */\\r\\nexport default function Example10Percent() {\\r\\n  return <ProgressBar percent={100} width={150} />;\\r\\n}\\r\\n\"\n  }, {\n    \"name\": \"Example10Percent\",\n    \"description\": \"10% Progress\",\n    \"code\": \"import React from \\\"react\\\";\\r\\nimport ProgressBar from \\\"ps-react/ProgressBar\\\";\\r\\n\\r\\n/** 10% Progress */\\r\\nexport default function Example10Percent() {\\r\\n  return <ProgressBar percent={10} width={150} />;\\r\\n}\\r\\n\"\n  }, {\n    \"name\": \"Example50Percent\",\n    \"description\": \"50% Progress\",\n    \"code\": \"import React from \\\"react\\\";\\r\\nimport ProgressBar from \\\"ps-react/ProgressBar\\\";\\r\\n\\r\\n/** 50% Progress */\\r\\nexport default function Example10Percent() {\\r\\n  return <ProgressBar percent={50} width={150} />;\\r\\n}\\r\\n\"\n  }]\n}, {\n  \"name\": \"RegistrationForm\",\n  \"description\": \"Registration form with Built-In Validation\",\n  \"props\": {\n    \"confirmationMessage\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": false,\n      \"description\": \"Message displayed on success\",\n      \"defaultValue\": {\n        \"value\": \"\\\"Thanks for registering!\\\"\",\n        \"computed\": false\n      }\n    },\n    \"onSubmit\": {\n      \"type\": {\n        \"name\": \"func\"\n      },\n      \"required\": true,\n      \"description\": \"Called when form is submitted\"\n    },\n    \"minPasswordLength\": {\n      \"type\": {\n        \"name\": \"number\"\n      },\n      \"required\": false,\n      \"description\": \"Minimum Password Length\",\n      \"defaultValue\": {\n        \"value\": \"8\",\n        \"computed\": false\n      }\n    }\n  },\n  \"code\": \"import React from \\\"react\\\";\\r\\nimport PropTypes from \\\"prop-types\\\";\\r\\nimport TextInput from \\\"../TextInput\\\";\\r\\nimport PasswordInput from \\\"../PasswordInput\\\";\\r\\n\\r\\n/** Registration form with Built-In Validation */\\r\\nclass RegistrationForm extends React.Component {\\r\\n  constructor(props) {\\r\\n    super(props);\\r\\n\\r\\n    this.state = {\\r\\n      user: {\\r\\n        email: \\\"\\\",\\r\\n        password: \\\"\\\"\\r\\n      },\\r\\n      errors: {},\\r\\n      submitted: false\\r\\n    };\\r\\n  }\\r\\n\\r\\n  onChange = event => {\\r\\n    const user = this.state.user;\\r\\n    user[event.target.name] = event.target.value;\\r\\n    this.ListeningStateChangedEvent({ user });\\r\\n  };\\r\\n\\r\\n  /** Returns a number from 0 to 100 that represents password quality\\r\\n   *  For simplicity, just returning % of min length entered.\\r\\n   *  Enhance with checks for number, special char, unique chars, etc.\\r\\n   */\\r\\n  passwordQuality(password) {\\r\\n    if (!password) return null;\\r\\n    if (password.length >= this.props.minPasswordLength) return 100;\\r\\n    const percentOfMinLength = parseInt(\\r\\n      (password.length / this.props.minPasswordLength) * 100,\\r\\n      10\\r\\n    );\\r\\n    return percentOfMinLength;\\r\\n  }\\r\\n\\r\\n  validate({ email, password }) {\\r\\n    const errors = {};\\r\\n    const { minPasswordLength } = this.props;\\r\\n\\r\\n    if (!email) errors.email = \\\"Email required.\\\";\\r\\n    if (password.length < minPasswordLength)\\r\\n      errors.password = `Password must be at least ${minPasswordLength} characters.`;\\r\\n\\r\\n    this.setState({ errors });\\r\\n    const formIsValid = Object.getOwnPropertyNames(errors).length === 0;\\r\\n    return formIsValid;\\r\\n  }\\r\\n\\r\\n  onSubmit = () => {\\r\\n    const { user } = this.state;\\r\\n    const formIsValid = this.validate(user);\\r\\n    if (formIsValid) {\\r\\n      this.props.onSubmit(user);\\r\\n      this.setState({ submitted: true });\\r\\n    }\\r\\n  };\\r\\n\\r\\n  render() {\\r\\n    const { errors, submitted } = this.state;\\r\\n    const { email, password } = this.state.user;\\r\\n\\r\\n    return submitted ? (\\r\\n      <h2>{this.props.confirmationMessage}</h2>\\r\\n    ) : (\\r\\n      <div>\\r\\n        <TextInput\\r\\n          htmlId=\\\"registration-form-email\\\"\\r\\n          name=\\\"email\\\"\\r\\n          onChange={this.onChange}\\r\\n          label=\\\"Email\\\"\\r\\n          value={email}\\r\\n          error={errors.email}\\r\\n          required\\r\\n        />\\r\\n\\r\\n        <PasswordInput\\r\\n          htmlId=\\\"registration-form-password\\\"\\r\\n          name=\\\"password\\\"\\r\\n          value={password}\\r\\n          onChange={this.onChange}\\r\\n          quality={this.passwordQuality(password)}\\r\\n          showVisibilityToggle\\r\\n          maxLength={50}\\r\\n          error={errors.password}\\r\\n        />\\r\\n\\r\\n        <input type=\\\"submit\\\" value=\\\"Register\\\" onClick={this.onSubmit} />\\r\\n      </div>\\r\\n    );\\r\\n  }\\r\\n}\\r\\n\\r\\nRegistrationForm.propTypes = {\\r\\n  /** Message displayed on success */\\r\\n  confirmationMessage: PropTypes.string,\\r\\n\\r\\n  /** Called when form is submitted */\\r\\n  onSubmit: PropTypes.func.isRequired,\\r\\n\\r\\n  /** Minimum Password Length */\\r\\n  minPasswordLength: PropTypes.number\\r\\n};\\r\\n\\r\\nRegistrationForm.defaultProps = {\\r\\n  confirmationMessage: \\\"Thanks for registering!\\\",\\r\\n  minPasswordLength: 8\\r\\n};\\r\\n\\r\\nexport default RegistrationForm;\\r\\n\",\n  \"examples\": [{\n    \"name\": \"ExampleRegistrationForm\",\n    \"description\": \"\",\n    \"code\": \"import React from \\\"react\\\";\\r\\nimport RegistrationForm from \\\"ps-react/RegistrationForm\\\";\\r\\n\\r\\nexport default class ExampleRegistrationForm extends React.Component {\\r\\n  onSubmit = user => {\\r\\n    console.log(user);\\r\\n  };\\r\\n\\r\\n  render() {\\r\\n    return <RegistrationForm onSubmit={this.onSubmit} />;\\r\\n  }\\r\\n}\\r\\n\"\n  }]\n}, {\n  \"name\": \"TextInput\",\n  \"description\": \"Text Input with integrated label to enforce consistency in layout, error display, label placement\",\n  \"props\": {\n    \"htmlId\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": true,\n      \"description\": \"Unique HTML ID. USed for tying label to HTML input. Handy Hook for automated testing.\"\n    },\n    \"name\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": true,\n      \"description\": \"Input Name. Recommend setting this to match object's property so a single change handler can be used\"\n    },\n    \"label\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": true,\n      \"description\": \"Input Label\"\n    },\n    \"type\": {\n      \"type\": {\n        \"name\": \"enum\",\n        \"value\": [{\n          \"value\": \"\\\"text\\\"\",\n          \"computed\": false\n        }, {\n          \"value\": \"\\\"number\\\"\",\n          \"computed\": false\n        }, {\n          \"value\": \"\\\"password\\\"\",\n          \"computed\": false\n        }]\n      },\n      \"required\": false,\n      \"description\": \"Input Type\",\n      \"defaultValue\": {\n        \"value\": \"\\\"text\\\"\",\n        \"computed\": false\n      }\n    },\n    \"required\": {\n      \"type\": {\n        \"name\": \"bool\"\n      },\n      \"required\": false,\n      \"description\": \"Mark label with asterisk if required\",\n      \"defaultValue\": {\n        \"value\": \"false\",\n        \"computed\": false\n      }\n    },\n    \"onChange\": {\n      \"type\": {\n        \"name\": \"func\"\n      },\n      \"required\": true,\n      \"description\": \"Function to call onChange\"\n    },\n    \"placeholder\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": false,\n      \"description\": \"Placeholder to display when empty\"\n    },\n    \"value\": {\n      \"type\": {\n        \"name\": \"any\"\n      },\n      \"required\": false,\n      \"description\": \"Value\"\n    },\n    \"error\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": false,\n      \"description\": \"String to display when error occues\"\n    },\n    \"children\": {\n      \"type\": {\n        \"name\": \"node\"\n      },\n      \"required\": false,\n      \"description\": \"Child component to display next to the input\"\n    }\n  },\n  \"code\": \"import React from \\\"react\\\";\\r\\nimport PropTypes from \\\"prop-types\\\";\\r\\nimport Label from \\\"../Label\\\";\\r\\n\\r\\n/** Text Input with integrated label to enforce consistency in layout, error display, label placement */\\r\\nfunction TextInput({\\r\\n  htmlId,\\r\\n  name,\\r\\n  label,\\r\\n  type = \\\"text\\\",\\r\\n  required = false,\\r\\n  onChange,\\r\\n  placeholder,\\r\\n  value,\\r\\n  error,\\r\\n  children,\\r\\n  ...props\\r\\n}) {\\r\\n  return (\\r\\n    <div style={{ marginBottom: 16 }}>\\r\\n      <Label htmlFor={htmlId} label={label} required={required} />\\r\\n      <input\\r\\n        id={htmlId}\\r\\n        type={type}\\r\\n        name={name}\\r\\n        placeholder={placeholder}\\r\\n        value={value}\\r\\n        onChange={onChange}\\r\\n        style={error && { border: \\\"solid 1px red\\\" }}\\r\\n        {...props}\\r\\n      />\\r\\n      {children}\\r\\n      {error && (\\r\\n        <div className=\\\"error\\\" style={{ color: \\\"red\\\" }}>\\r\\n          {error}\\r\\n        </div>\\r\\n      )}\\r\\n    </div>\\r\\n  );\\r\\n}\\r\\n\\r\\nTextInput.propTypes = {\\r\\n  /** Unique HTML ID. USed for tying label to HTML input. Handy Hook for automated testing. */\\r\\n  htmlId: PropTypes.string.isRequired,\\r\\n\\r\\n  /** Input Name. Recommend setting this to match object's property so a single change handler can be used */\\r\\n  name: PropTypes.string.isRequired,\\r\\n\\r\\n  /** Input Label */\\r\\n  label: PropTypes.string.isRequired,\\r\\n\\r\\n  /** Input Type */\\r\\n  type: PropTypes.oneOf([\\\"text\\\", \\\"number\\\", \\\"password\\\"]),\\r\\n\\r\\n  /** Mark label with asterisk if required */\\r\\n  required: PropTypes.bool,\\r\\n\\r\\n  /** Function to call onChange */\\r\\n  onChange: PropTypes.func.isRequired,\\r\\n\\r\\n  /** Placeholder to display when empty */\\r\\n  placeholder: PropTypes.string,\\r\\n\\r\\n  /** Value */\\r\\n  value: PropTypes.any,\\r\\n\\r\\n  /** String to display when error occues */\\r\\n  error: PropTypes.string,\\r\\n\\r\\n  /** Child component to display next to the input */\\r\\n  children: PropTypes.node\\r\\n};\\r\\n\\r\\nexport default TextInput;\\r\\n\",\n  \"examples\": [{\n    \"name\": \"ExampleError\",\n    \"description\": \"Required TextBox with Error\",\n    \"code\": \"import React from \\\"react\\\";\\r\\nimport TextInput from \\\"ps-react/TextInput\\\";\\r\\n\\r\\n/** Required TextBox with Error */\\r\\nexport default class ExampleError extends React.Component {\\r\\n  render() {\\r\\n    return (\\r\\n      <TextInput\\r\\n        htmlId=\\\"example-required-error\\\"\\r\\n        value=\\\"wrong\\\"\\r\\n        type=\\\"password\\\"\\r\\n        label=\\\"Password\\\"\\r\\n        name=\\\"passwordInput\\\"\\r\\n        onChange={() => {}}\\r\\n        onSubmit={() => {}}\\r\\n        required\\r\\n        error=\\\"Incorrect Password\\\"\\r\\n      />\\r\\n    );\\r\\n  }\\r\\n}\\r\\n\"\n  }, {\n    \"name\": \"ExampleOptional\",\n    \"description\": \"Optional TextBox\",\n    \"code\": \"import React from \\\"react\\\";\\r\\nimport TextInput from \\\"ps-react/TextInput\\\";\\r\\n\\r\\n/** Optional TextBox */\\r\\nexport default class ExampleOptional extends React.Component {\\r\\n  render() {\\r\\n    return (\\r\\n      <TextInput\\r\\n        htmlId=\\\"example-optional\\\"\\r\\n        label=\\\"First Name\\\"\\r\\n        name=\\\"firstname\\\"\\r\\n        onChange={() => {}}\\r\\n        onSubmit={() => {}}\\r\\n      />\\r\\n    );\\r\\n  }\\r\\n}\\r\\n\"\n  }]\n}, {\n  \"name\": \"TextInputBEM\",\n  \"description\": \"Text Input with integrated label to enforce consistency in layout, error display, label placement\",\n  \"props\": {\n    \"htmlId\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": true,\n      \"description\": \"Unique HTML ID. USed for tying label to HTML input. Handy Hook for automated testing.\"\n    },\n    \"name\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": true,\n      \"description\": \"Input Name. Recommend setting this to match object's property so a single change handler can be used\"\n    },\n    \"label\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": true,\n      \"description\": \"Input Label\"\n    },\n    \"type\": {\n      \"type\": {\n        \"name\": \"enum\",\n        \"value\": [{\n          \"value\": \"\\\"text\\\"\",\n          \"computed\": false\n        }, {\n          \"value\": \"\\\"number\\\"\",\n          \"computed\": false\n        }, {\n          \"value\": \"\\\"password\\\"\",\n          \"computed\": false\n        }]\n      },\n      \"required\": false,\n      \"description\": \"Input Type\",\n      \"defaultValue\": {\n        \"value\": \"\\\"text\\\"\",\n        \"computed\": false\n      }\n    },\n    \"required\": {\n      \"type\": {\n        \"name\": \"bool\"\n      },\n      \"required\": false,\n      \"description\": \"Mark label with asterisk if required\",\n      \"defaultValue\": {\n        \"value\": \"false\",\n        \"computed\": false\n      }\n    },\n    \"onChange\": {\n      \"type\": {\n        \"name\": \"func\"\n      },\n      \"required\": true,\n      \"description\": \"Function to call onChange\"\n    },\n    \"placeholder\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": false,\n      \"description\": \"Placeholder to display when empty\"\n    },\n    \"value\": {\n      \"type\": {\n        \"name\": \"any\"\n      },\n      \"required\": false,\n      \"description\": \"Value\"\n    },\n    \"error\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": false,\n      \"description\": \"String to display when error occues\"\n    },\n    \"children\": {\n      \"type\": {\n        \"name\": \"node\"\n      },\n      \"required\": false,\n      \"description\": \"Child component to display next to the input\"\n    }\n  },\n  \"code\": \"import React from \\\"react\\\";\\r\\nimport PropTypes from \\\"prop-types\\\";\\r\\nimport Label from \\\"../Label\\\";\\r\\n\\r\\n/** Text Input with integrated label to enforce consistency in layout, error display, label placement */\\r\\nfunction TextInput({\\r\\n  htmlId,\\r\\n  name,\\r\\n  label,\\r\\n  type = \\\"text\\\",\\r\\n  required = false,\\r\\n  onChange,\\r\\n  placeholder,\\r\\n  value,\\r\\n  error,\\r\\n  children,\\r\\n  ...props\\r\\n}) {\\r\\n  return (\\r\\n    <div className=\\\"textinput\\\">\\r\\n      <Label htmlFor={htmlId} label={label} required={required} />\\r\\n      <input\\r\\n        id={htmlId}\\r\\n        type={type}\\r\\n        name={name}\\r\\n        placeholder={placeholder}\\r\\n        value={value}\\r\\n        onChange={onChange}\\r\\n        className={error && \\\"textinput__input--state-error\\\"}\\r\\n        {...props}\\r\\n      />\\r\\n      {children}\\r\\n      {error && <div className=\\\"textinput__error\\\">{error}</div>}\\r\\n    </div>\\r\\n  );\\r\\n}\\r\\n\\r\\nTextInput.propTypes = {\\r\\n  /** Unique HTML ID. USed for tying label to HTML input. Handy Hook for automated testing. */\\r\\n  htmlId: PropTypes.string.isRequired,\\r\\n\\r\\n  /** Input Name. Recommend setting this to match object's property so a single change handler can be used */\\r\\n  name: PropTypes.string.isRequired,\\r\\n\\r\\n  /** Input Label */\\r\\n  label: PropTypes.string.isRequired,\\r\\n\\r\\n  /** Input Type */\\r\\n  type: PropTypes.oneOf([\\\"text\\\", \\\"number\\\", \\\"password\\\"]),\\r\\n\\r\\n  /** Mark label with asterisk if required */\\r\\n  required: PropTypes.bool,\\r\\n\\r\\n  /** Function to call onChange */\\r\\n  onChange: PropTypes.func.isRequired,\\r\\n\\r\\n  /** Placeholder to display when empty */\\r\\n  placeholder: PropTypes.string,\\r\\n\\r\\n  /** Value */\\r\\n  value: PropTypes.any,\\r\\n\\r\\n  /** String to display when error occues */\\r\\n  error: PropTypes.string,\\r\\n\\r\\n  /** Child component to display next to the input */\\r\\n  children: PropTypes.node\\r\\n};\\r\\n\\r\\nexport default TextInput;\\r\\n\",\n  \"examples\": [{\n    \"name\": \"ExampleError\",\n    \"description\": \"Required TextBox with Error\",\n    \"code\": \"import React from \\\"react\\\";\\r\\nimport TextInputBEM from \\\"ps-react/TextInputBEM\\\";\\r\\n\\r\\n/** Required TextBox with Error */\\r\\nexport default class ExampleError extends React.Component {\\r\\n  render() {\\r\\n    return (\\r\\n      <TextInputBEM\\r\\n        htmlId=\\\"example-required-error\\\"\\r\\n        value=\\\"wrong\\\"\\r\\n        type=\\\"password\\\"\\r\\n        label=\\\"Password\\\"\\r\\n        name=\\\"passwordInput\\\"\\r\\n        onChange={() => {}}\\r\\n        required\\r\\n        error=\\\"Incorrect Password\\\"\\r\\n      />\\r\\n    );\\r\\n  }\\r\\n}\\r\\n\"\n  }]\n}, {\n  \"name\": \"TextInputCSSModules\",\n  \"description\": \"Text Input with integrated label to enforce consistency in layout, error display, label placement\",\n  \"props\": {\n    \"htmlId\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": true,\n      \"description\": \"Unique HTML ID. USed for tying label to HTML input. Handy Hook for automated testing.\"\n    },\n    \"name\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": true,\n      \"description\": \"Input Name. Recommend setting this to match object's property so a single change handler can be used\"\n    },\n    \"label\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": true,\n      \"description\": \"Input Label\"\n    },\n    \"type\": {\n      \"type\": {\n        \"name\": \"enum\",\n        \"value\": [{\n          \"value\": \"\\\"text\\\"\",\n          \"computed\": false\n        }, {\n          \"value\": \"\\\"number\\\"\",\n          \"computed\": false\n        }, {\n          \"value\": \"\\\"password\\\"\",\n          \"computed\": false\n        }]\n      },\n      \"required\": false,\n      \"description\": \"Input Type\",\n      \"defaultValue\": {\n        \"value\": \"\\\"text\\\"\",\n        \"computed\": false\n      }\n    },\n    \"required\": {\n      \"type\": {\n        \"name\": \"bool\"\n      },\n      \"required\": false,\n      \"description\": \"Mark label with asterisk if required\",\n      \"defaultValue\": {\n        \"value\": \"false\",\n        \"computed\": false\n      }\n    },\n    \"onChange\": {\n      \"type\": {\n        \"name\": \"func\"\n      },\n      \"required\": true,\n      \"description\": \"Function to call onChange\"\n    },\n    \"placeholder\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": false,\n      \"description\": \"Placeholder to display when empty\"\n    },\n    \"value\": {\n      \"type\": {\n        \"name\": \"any\"\n      },\n      \"required\": false,\n      \"description\": \"Value\"\n    },\n    \"error\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": false,\n      \"description\": \"String to display when error occues\"\n    },\n    \"children\": {\n      \"type\": {\n        \"name\": \"node\"\n      },\n      \"required\": false,\n      \"description\": \"Child component to display next to the input\"\n    }\n  },\n  \"code\": \"import React from \\\"react\\\";\\r\\nimport PropTypes from \\\"prop-types\\\";\\r\\nimport Label from \\\"../Label\\\";\\r\\nimport styles from \\\"./textInput.css\\\";\\r\\n\\r\\n/** Text Input with integrated label to enforce consistency in layout, error display, label placement */\\r\\nfunction TextInput({\\r\\n  htmlId,\\r\\n  name,\\r\\n  label,\\r\\n  type = \\\"text\\\",\\r\\n  required = false,\\r\\n  onChange,\\r\\n  placeholder,\\r\\n  value,\\r\\n  error,\\r\\n  children,\\r\\n  ...props\\r\\n}) {\\r\\n  return (\\r\\n    <div className={styles.fieldset}>\\r\\n      <Label htmlFor={htmlId} label={label} required={required} />\\r\\n      <input\\r\\n        id={htmlId}\\r\\n        type={type}\\r\\n        name={name}\\r\\n        placeholder={placeholder}\\r\\n        value={value}\\r\\n        onChange={onChange}\\r\\n        className={error && styles.inputError}\\r\\n        {...props}\\r\\n      />\\r\\n      {children}\\r\\n      {error && <div className={styles.error}>{error}</div>}\\r\\n    </div>\\r\\n  );\\r\\n}\\r\\n\\r\\nTextInput.propTypes = {\\r\\n  /** Unique HTML ID. USed for tying label to HTML input. Handy Hook for automated testing. */\\r\\n  htmlId: PropTypes.string.isRequired,\\r\\n\\r\\n  /** Input Name. Recommend setting this to match object's property so a single change handler can be used */\\r\\n  name: PropTypes.string.isRequired,\\r\\n\\r\\n  /** Input Label */\\r\\n  label: PropTypes.string.isRequired,\\r\\n\\r\\n  /** Input Type */\\r\\n  type: PropTypes.oneOf([\\\"text\\\", \\\"number\\\", \\\"password\\\"]),\\r\\n\\r\\n  /** Mark label with asterisk if required */\\r\\n  required: PropTypes.bool,\\r\\n\\r\\n  /** Function to call onChange */\\r\\n  onChange: PropTypes.func.isRequired,\\r\\n\\r\\n  /** Placeholder to display when empty */\\r\\n  placeholder: PropTypes.string,\\r\\n\\r\\n  /** Value */\\r\\n  value: PropTypes.any,\\r\\n\\r\\n  /** String to display when error occues */\\r\\n  error: PropTypes.string,\\r\\n\\r\\n  /** Child component to display next to the input */\\r\\n  children: PropTypes.node\\r\\n};\\r\\n\\r\\nexport default TextInput;\\r\\n\",\n  \"examples\": [{\n    \"name\": \"ExampleError\",\n    \"description\": \"Required TextBox with Error\",\n    \"code\": \"import React from \\\"react\\\";\\r\\nimport TextInputCSSModules from \\\"ps-react/TextInputCSSModules\\\";\\r\\n\\r\\n/** Required TextBox with Error */\\r\\nexport default class ExampleError extends React.Component {\\r\\n  render() {\\r\\n    return (\\r\\n      <TextInputCSSModules\\r\\n        htmlId=\\\"example-required-error\\\"\\r\\n        value=\\\"wrong\\\"\\r\\n        type=\\\"password\\\"\\r\\n        label=\\\"Password\\\"\\r\\n        name=\\\"passwordInput\\\"\\r\\n        onChange={() => {}}\\r\\n        required\\r\\n        error=\\\"Incorrect Password\\\"\\r\\n      />\\r\\n    );\\r\\n  }\\r\\n}\\r\\n\"\n  }]\n}, {\n  \"name\": \"TextInputStyledComponents\",\n  \"description\": \"Text Input with integrated label to enforce consistency in layout, error display, label placement\",\n  \"props\": {\n    \"htmlId\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": true,\n      \"description\": \"Unique HTML ID. USed for tying label to HTML input. Handy Hook for automated testing.\"\n    },\n    \"name\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": true,\n      \"description\": \"Input Name. Recommend setting this to match object's property so a single change handler can be used\"\n    },\n    \"label\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": true,\n      \"description\": \"Input Label\"\n    },\n    \"type\": {\n      \"type\": {\n        \"name\": \"enum\",\n        \"value\": [{\n          \"value\": \"\\\"text\\\"\",\n          \"computed\": false\n        }, {\n          \"value\": \"\\\"number\\\"\",\n          \"computed\": false\n        }, {\n          \"value\": \"\\\"password\\\"\",\n          \"computed\": false\n        }]\n      },\n      \"required\": false,\n      \"description\": \"Input Type\",\n      \"defaultValue\": {\n        \"value\": \"\\\"text\\\"\",\n        \"computed\": false\n      }\n    },\n    \"required\": {\n      \"type\": {\n        \"name\": \"bool\"\n      },\n      \"required\": false,\n      \"description\": \"Mark label with asterisk if required\",\n      \"defaultValue\": {\n        \"value\": \"false\",\n        \"computed\": false\n      }\n    },\n    \"onChange\": {\n      \"type\": {\n        \"name\": \"func\"\n      },\n      \"required\": true,\n      \"description\": \"Function to call onChange\"\n    },\n    \"placeholder\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": false,\n      \"description\": \"Placeholder to display when empty\"\n    },\n    \"value\": {\n      \"type\": {\n        \"name\": \"any\"\n      },\n      \"required\": false,\n      \"description\": \"Value\"\n    },\n    \"error\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": false,\n      \"description\": \"String to display when error occues\"\n    },\n    \"children\": {\n      \"type\": {\n        \"name\": \"node\"\n      },\n      \"required\": false,\n      \"description\": \"Child component to display next to the input\"\n    }\n  },\n  \"code\": \"import React from \\\"react\\\";\\r\\nimport PropTypes from \\\"prop-types\\\";\\r\\nimport Label from \\\"../Label\\\";\\r\\nimport styled from \\\"styled-components\\\";\\r\\n\\r\\n/** Text Input with integrated label to enforce consistency in layout, error display, label placement */\\r\\nfunction TextInput({\\r\\n  htmlId,\\r\\n  name,\\r\\n  label,\\r\\n  type = \\\"text\\\",\\r\\n  required = false,\\r\\n  onChange,\\r\\n  placeholder,\\r\\n  value,\\r\\n  error,\\r\\n  children,\\r\\n  ...props\\r\\n}) {\\r\\n  const Error = styled.div`\\r\\n    color: red;\\r\\n  `;\\r\\n\\r\\n  const Input = styled.input`\\r\\n    border: ${error && \\\"solid 1px red\\\"};\\r\\n  `;\\r\\n\\r\\n  const Fieldset = styled.div`\\r\\n    margin-bottom: 16px;\\r\\n  `;\\r\\n\\r\\n  return (\\r\\n    <Fieldset>\\r\\n      <Label htmlFor={htmlId} label={label} required={required} />\\r\\n      <Input\\r\\n        id={htmlId}\\r\\n        type={type}\\r\\n        name={name}\\r\\n        placeholder={placeholder}\\r\\n        value={value}\\r\\n        onChange={onChange}\\r\\n        {...props}\\r\\n      />\\r\\n      {children}\\r\\n      {error && <Error>{error}</Error>}\\r\\n    </Fieldset>\\r\\n  );\\r\\n}\\r\\n\\r\\nTextInput.propTypes = {\\r\\n  /** Unique HTML ID. USed for tying label to HTML input. Handy Hook for automated testing. */\\r\\n  htmlId: PropTypes.string.isRequired,\\r\\n\\r\\n  /** Input Name. Recommend setting this to match object's property so a single change handler can be used */\\r\\n  name: PropTypes.string.isRequired,\\r\\n\\r\\n  /** Input Label */\\r\\n  label: PropTypes.string.isRequired,\\r\\n\\r\\n  /** Input Type */\\r\\n  type: PropTypes.oneOf([\\\"text\\\", \\\"number\\\", \\\"password\\\"]),\\r\\n\\r\\n  /** Mark label with asterisk if required */\\r\\n  required: PropTypes.bool,\\r\\n\\r\\n  /** Function to call onChange */\\r\\n  onChange: PropTypes.func.isRequired,\\r\\n\\r\\n  /** Placeholder to display when empty */\\r\\n  placeholder: PropTypes.string,\\r\\n\\r\\n  /** Value */\\r\\n  value: PropTypes.any,\\r\\n\\r\\n  /** String to display when error occues */\\r\\n  error: PropTypes.string,\\r\\n\\r\\n  /** Child component to display next to the input */\\r\\n  children: PropTypes.node\\r\\n};\\r\\n\\r\\nexport default TextInput;\\r\\n\",\n  \"examples\": [{\n    \"name\": \"ExampleError\",\n    \"description\": \"Required TextBox with Error\",\n    \"code\": \"import React from \\\"react\\\";\\r\\nimport TextInputStyledComponents from \\\"ps-react/TextInputStyledComponents\\\";\\r\\n\\r\\n/** Required TextBox with Error */\\r\\nexport default class ExampleError extends React.Component {\\r\\n  render() {\\r\\n    return (\\r\\n      <TextInputStyledComponents\\r\\n        htmlId=\\\"example-required-error\\\"\\r\\n        value=\\\"wrong\\\"\\r\\n        type=\\\"password\\\"\\r\\n        label=\\\"Password\\\"\\r\\n        name=\\\"passwordInput\\\"\\r\\n        onChange={() => {}}\\r\\n        required\\r\\n        error=\\\"Incorrect Password\\\"\\r\\n      />\\r\\n    );\\r\\n  }\\r\\n}\\r\\n\"\n  }]\n}];","import React from \"react\";\r\nimport ClickToEnterTextField from \"ps-react/ClickToEnterTextField\";\r\n\r\n/** Optional TextBox */\r\nexport default function ExampleTextField() {\r\n  function onSubmit(event) {\r\n    this.setState({isEntered: false});\r\n    this.setState({isHover: false});\r\n    /** make any additonal calls or logic when submitting here, e.g. updating the DB */\r\n    event.preventDefault();\r\n  }\r\n\r\n  function onChange(event) {\r\n    this.setState({ value: event.target.value });\r\n    /** make any additional calls or logic when submitting here */\r\n  }\r\n\r\n  return (\r\n    <ClickToEnterTextField name=\"partname\" onChange={onChange} onSubmit={onSubmit} />\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport ExpandingBar from \"ps-react/ExpandingBar\";\r\nimport ClickToEnterTextField from \"ps-react/ClickToEnterTextField\";\r\n\r\nexport default function ExampleBar() {\r\n  function onSubmit(event) {\r\n    this.setState({ isEntered: false });\r\n    this.setState({ isHover: false });\r\n    /** make any additonal calls or logic when submitting here, e.g. updating the DB */\r\n    event.preventDefault();\r\n  }\r\n\r\n  function onChange(event) {\r\n    this.setState({ value: event.target.value });\r\n    /** make any additional calls or logic when submitting here */\r\n  }\r\n\r\n  return (\r\n    <ExpandingBar duration={500} startHeight=\"auto\" endHeight=\"auto\">\r\n      <div style={{ height: \"auto\", display: \"flex\", flexDirection: \"row\" }}>\r\n        <div style={{ display: \"flex\", alignItems: \"center\" }}>\r\n          <i className={\"fa fa-cubes fa-3x\"} style={{ color: \"#0d47a1\" }} />\r\n        </div>\r\n        <div\r\n          style={{\r\n            display: \"inline-block\",\r\n            marginLeft: \"10px\",\r\n            marginTop: \"0px\"\r\n          }}\r\n        >\r\n          <ClickToEnterTextField\r\n            leftMargin=\"10px\"\r\n            topMargin=\"10px\"\r\n            color=\"white\"\r\n            name=\"partname\"\r\n            onChange={onChange}\r\n            onSubmit={onSubmit}\r\n            value=\"BLACK STEEL MULTI TOOL\"\r\n          />\r\n          <div>\r\n            <ClickToEnterTextField\r\n              bottomMargin=\"10px\"\r\n              topMargin=\"5px\"\r\n              leftMargin=\"10px\"\r\n              color=\"white\"\r\n              name=\"partnum\"\r\n              onChange={onChange}\r\n              onSubmit={onSubmit}\r\n              value=\"PRT-2322\"\r\n            />\r\n            <ClickToEnterTextField\r\n              name=\"partrev\"\r\n              onChange={onChange}\r\n              onSubmit={onSubmit}\r\n              bottomMargin=\"10px\"\r\n              topMargin=\"5px\"\r\n              leftMargin=\"50px\"\r\n              value=\"B3\"\r\n              color=\"white\"\r\n            />\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </ExpandingBar>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport EyeIcon from \"ps-react/EyeIcon\";\r\n\r\nexport default function EyeIconExample() {\r\n  return <EyeIcon />;\r\n}\r\n","import React from \"react\";\r\nimport IxButton from \"ps-react/IxButton\";\r\n\r\nexport default function ExampleButton() {\r\n  const helloExample = () => {\r\n    console.log(\"Hello Example World!\");\r\n  };\r\n  return <IxButton handleClick={helloExample} />;\r\n}\r\n","import React from \"react\";\r\nimport IxButton from \"ps-react/IxButton\";\r\nimport IxButtonMulti from \"ps-react/IxButtonMulti\";\r\n\r\nexport default function ExampleCirclesMulti() {\r\n  return (\r\n    <IxButtonMulti shape=\"circle\" backgroundColor=\"white\">\r\n      <IxButton shape=\"circle\" backgroundColor=\"white\" />\r\n      <IxButton shape=\"circle\" backgroundColor=\"white\" />\r\n      <IxButton shape=\"circle\" backgroundColor=\"white\" />\r\n    </IxButtonMulti>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport IxButton from \"ps-react/IxButton\";\r\nimport IxButtonMulti from \"ps-react/IxButtonMulti\";\r\n\r\nexport default function ExampleCirclesMulti() {\r\n  return (\r\n    <IxButtonMulti>\r\n      <IxButton />\r\n      <IxButton />\r\n      <IxButton />\r\n    </IxButtonMulti>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport Label from \"ps-react/Label\";\r\n\r\n/** Optional Label */\r\nexport default function ExampleOptional() {\r\n  return <Label htmlFor=\"test\" label=\"test\" />;\r\n}\r\n","import React from \"react\";\r\nimport Label from \"ps-react/Label\";\r\n\r\n/** Required Label */\r\nexport default function ExampleRequired() {\r\n  return <Label htmlFor=\"test\" label=\"required\" required />;\r\n}\r\n","import React from \"react\";\r\nimport PasswordInput from \"ps-react/PasswordInput\";\r\n\r\n/** All features enabled */\r\nclass ExampleAllFeatures extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      password: \"\"\r\n    };\r\n  }\r\n\r\n  getQuality() {\r\n    const length = this.state.password.length;\r\n    return length > 10 ? 100 : length * 10;\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <PasswordInput\r\n          htmlId=\"password-input-example-all-features\"\r\n          name=\"password\"\r\n          onChange={event => this.setState({ password: event.target.value })}\r\n          value={this.state.password}\r\n          minLength={8}\r\n          placeholder=\"Enter password\"\r\n          showVisibilityToggle\r\n          quality={this.getQuality()}\r\n          {...this.props}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ExampleAllFeatures;\r\n","import React from \"react\";\r\nimport ProgressBar from \"ps-react/ProgressBar\";\r\n\r\n/** 100% Progress */\r\nexport default function Example10Percent() {\r\n  return <ProgressBar percent={100} width={150} />;\r\n}\r\n","import React from \"react\";\r\nimport ProgressBar from \"ps-react/ProgressBar\";\r\n\r\n/** 10% Progress */\r\nexport default function Example10Percent() {\r\n  return <ProgressBar percent={10} width={150} />;\r\n}\r\n","import React from \"react\";\r\nimport ProgressBar from \"ps-react/ProgressBar\";\r\n\r\n/** 50% Progress */\r\nexport default function Example10Percent() {\r\n  return <ProgressBar percent={50} width={150} />;\r\n}\r\n","import React from \"react\";\r\nimport TextInput from \"ps-react/TextInput\";\r\n\r\n/** Required TextBox with Error */\r\nexport default class ExampleError extends React.Component {\r\n  render() {\r\n    return (\r\n      <TextInput\r\n        htmlId=\"example-required-error\"\r\n        value=\"wrong\"\r\n        type=\"password\"\r\n        label=\"Password\"\r\n        name=\"passwordInput\"\r\n        onChange={() => {}}\r\n        onSubmit={() => {}}\r\n        required\r\n        error=\"Incorrect Password\"\r\n      />\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport TextInput from \"ps-react/TextInput\";\r\n\r\n/** Optional TextBox */\r\nexport default class ExampleOptional extends React.Component {\r\n  render() {\r\n    return (\r\n      <TextInput\r\n        htmlId=\"example-optional\"\r\n        label=\"First Name\"\r\n        name=\"firstname\"\r\n        onChange={() => {}}\r\n        onSubmit={() => {}}\r\n      />\r\n    );\r\n  }\r\n}\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst bottom = {\r\n    left: '50%',\r\n    transform: 'translate(-50%,0%)'\r\n}\r\n\r\nconst top = {\r\n    left: '50%',\r\n    transform: 'translate(-50%,0%)'\r\n}\r\n\r\nconst left = {\r\n    top: '0%',\r\n    transform: 'translate(-100%, 0%)'\r\n}\r\n\r\nconst right = {\r\n    top: '50%',\r\n    transform: 'translate(50%, -50%)'\r\n}\r\n\r\nfunction getLocation(dir) {\r\n    switch(dir) {\r\n        case \"left\":\r\n            return left;\r\n        case \"right\":\r\n            return right;\r\n        case \"top\":\r\n            return top;\r\n        case \"bottom\":\r\n            return bottom;\r\n        default:\r\n            return right;\r\n    }\r\n}\r\nclass Tooltip extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n\r\n    render () {\r\n        const { color, tip, direction } = this.props;\r\n        return (\r\n            <div id=\"tooltip\" style ={{\r\n                display: 'inline-block',\r\n                backgroundColor: color,\r\n                padding: '5px 5px 5px 5px',\r\n                color: 'white',\r\n                fontWeight: 'bold',\r\n                fontSize: 10,\r\n                borderRadius: '5px',\r\n                position: 'relative',\r\n                zIndex: 100,\r\n                ...getLocation(direction)\r\n            }}>\r\n                {tip}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nTooltip.propTypes = {\r\n    /** Tooltip Color */\r\n    color: PropTypes.string,\r\n\r\n    /** Tooltip Message */\r\n    tip: PropTypes.string,\r\n\r\n    /** Direction of Arrow */\r\n    direction: PropTypes.string\r\n}\r\n\r\nTooltip.defaultProps = {\r\n    /** Default IX Tooltip Color */\r\n    color: \"#445160\",\r\n\r\n    /** Placeholder Tip */\r\n    tip: \"TOOLTIP\",\r\n\r\n    /** Direction of Arrow */\r\n    direction: 'right'\r\n}\r\n\r\nexport default Tooltip;","import React from 'react';\r\nimport Tooltip from 'ps-react/Tooltip';\r\nimport IxButton from 'ps-react/IxButton';\r\n\r\nexport default class TooltipExample extends React.Component {\r\n    render() {\r\n        return (\r\n            <>\r\n                <div style={{display: 'inline-block'}}>\r\n                    <IxButton />\r\n                    <Tooltip direction=\"left\" />\r\n                </div>\r\n                <div style={{display: 'inline-block'}}>\r\n                    <IxButton></IxButton>\r\n                    <Tooltip direction=\"right\"/>\r\n                </div>\r\n                <div style={{display: 'inline-block'}}>\r\n                    <Tooltip direction=\"up\"/>\r\n                    <IxButton></IxButton>\r\n                </div>\r\n                <div style={{display: 'inline-block'}}>\r\n                    <IxButton></IxButton>\r\n                    <Tooltip direction=\"down\"/>\r\n                </div>\r\n            </>\r\n        );\r\n    }\r\n}","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport Label from \"../Label\";\r\nimport styled from \"styled-components\";\r\n\r\n/** Text Input with integrated label to enforce consistency in layout, error display, label placement */\r\nfunction TextInput({\r\n  htmlId,\r\n  name,\r\n  label,\r\n  type = \"text\",\r\n  required = false,\r\n  onChange,\r\n  placeholder,\r\n  value,\r\n  error,\r\n  children,\r\n  ...props\r\n}) {\r\n  const Error = styled.div`\r\n    color: red;\r\n  `;\r\n\r\n  const Input = styled.input`\r\n    border: ${error && \"solid 1px red\"};\r\n  `;\r\n\r\n  const Fieldset = styled.div`\r\n    margin-bottom: 16px;\r\n  `;\r\n\r\n  return (\r\n    <Fieldset>\r\n      <Label htmlFor={htmlId} label={label} required={required} />\r\n      <Input\r\n        id={htmlId}\r\n        type={type}\r\n        name={name}\r\n        placeholder={placeholder}\r\n        value={value}\r\n        onChange={onChange}\r\n        {...props}\r\n      />\r\n      {children}\r\n      {error && <Error>{error}</Error>}\r\n    </Fieldset>\r\n  );\r\n}\r\n\r\nTextInput.propTypes = {\r\n  /** Unique HTML ID. USed for tying label to HTML input. Handy Hook for automated testing. */\r\n  htmlId: PropTypes.string.isRequired,\r\n\r\n  /** Input Name. Recommend setting this to match object's property so a single change handler can be used */\r\n  name: PropTypes.string.isRequired,\r\n\r\n  /** Input Label */\r\n  label: PropTypes.string.isRequired,\r\n\r\n  /** Input Type */\r\n  type: PropTypes.oneOf([\"text\", \"number\", \"password\"]),\r\n\r\n  /** Mark label with asterisk if required */\r\n  required: PropTypes.bool,\r\n\r\n  /** Function to call onChange */\r\n  onChange: PropTypes.func.isRequired,\r\n\r\n  /** Placeholder to display when empty */\r\n  placeholder: PropTypes.string,\r\n\r\n  /** Value */\r\n  value: PropTypes.any,\r\n\r\n  /** String to display when error occues */\r\n  error: PropTypes.string,\r\n\r\n  /** Child component to display next to the input */\r\n  children: PropTypes.node\r\n};\r\n\r\nexport default TextInput;\r\n","import React from \"react\";\r\nimport TextInputStyledComponents from \"ps-react/TextInputStyledComponents\";\r\n\r\n/** Required TextBox with Error */\r\nexport default class ExampleError extends React.Component {\r\n  render() {\r\n    return (\r\n      <TextInputStyledComponents\r\n        htmlId=\"example-required-error\"\r\n        value=\"wrong\"\r\n        type=\"password\"\r\n        label=\"Password\"\r\n        name=\"passwordInput\"\r\n        onChange={() => {}}\r\n        required\r\n        error=\"Incorrect Password\"\r\n      />\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport Label from \"../Label\";\r\nimport styles from \"./textInput.css\";\r\n\r\n/** Text Input with integrated label to enforce consistency in layout, error display, label placement */\r\nfunction TextInput({\r\n  htmlId,\r\n  name,\r\n  label,\r\n  type = \"text\",\r\n  required = false,\r\n  onChange,\r\n  placeholder,\r\n  value,\r\n  error,\r\n  children,\r\n  ...props\r\n}) {\r\n  return (\r\n    <div className={styles.fieldset}>\r\n      <Label htmlFor={htmlId} label={label} required={required} />\r\n      <input\r\n        id={htmlId}\r\n        type={type}\r\n        name={name}\r\n        placeholder={placeholder}\r\n        value={value}\r\n        onChange={onChange}\r\n        className={error && styles.inputError}\r\n        {...props}\r\n      />\r\n      {children}\r\n      {error && <div className={styles.error}>{error}</div>}\r\n    </div>\r\n  );\r\n}\r\n\r\nTextInput.propTypes = {\r\n  /** Unique HTML ID. USed for tying label to HTML input. Handy Hook for automated testing. */\r\n  htmlId: PropTypes.string.isRequired,\r\n\r\n  /** Input Name. Recommend setting this to match object's property so a single change handler can be used */\r\n  name: PropTypes.string.isRequired,\r\n\r\n  /** Input Label */\r\n  label: PropTypes.string.isRequired,\r\n\r\n  /** Input Type */\r\n  type: PropTypes.oneOf([\"text\", \"number\", \"password\"]),\r\n\r\n  /** Mark label with asterisk if required */\r\n  required: PropTypes.bool,\r\n\r\n  /** Function to call onChange */\r\n  onChange: PropTypes.func.isRequired,\r\n\r\n  /** Placeholder to display when empty */\r\n  placeholder: PropTypes.string,\r\n\r\n  /** Value */\r\n  value: PropTypes.any,\r\n\r\n  /** String to display when error occues */\r\n  error: PropTypes.string,\r\n\r\n  /** Child component to display next to the input */\r\n  children: PropTypes.node\r\n};\r\n\r\nexport default TextInput;\r\n","import React from \"react\";\r\nimport TextInputCSSModules from \"ps-react/TextInputCSSModules\";\r\n\r\n/** Required TextBox with Error */\r\nexport default class ExampleError extends React.Component {\r\n  render() {\r\n    return (\r\n      <TextInputCSSModules\r\n        htmlId=\"example-required-error\"\r\n        value=\"wrong\"\r\n        type=\"password\"\r\n        label=\"Password\"\r\n        name=\"passwordInput\"\r\n        onChange={() => {}}\r\n        required\r\n        error=\"Incorrect Password\"\r\n      />\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\r\n\r\nclass ForTesting extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { tog: false };\r\n  }\r\n\r\n  onClick() {\r\n    this.setState({ tog: !this.state.tog });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <button onClick={this.onClick.bind(this)}>TOGGLE</button>\r\n        {this.state.tog ? <h1>FOUND ME!</h1> : <></>}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ForTesting;\r\n","import React from \"react\";\r\nimport ExpandingBar from \"ps-react/ExpandingBar\";\r\nimport ForTesting from \"ps-react/ForTesting\";\r\n\r\nexport default function ExampleBar() {\r\n  return (\r\n    <>\r\n      <ExpandingBar duration={500} startHeight={90} endHeight={150}>\r\n        <div style={{ height: \"auto\" }}>\r\n          <i\r\n            className={\"fa fa-cubes fa-3x\"}\r\n            style={{\r\n              margin: \"auto auto\",\r\n              float: \"none\",\r\n              color: \"#0d47a1\",\r\n              display: \"inline-block\",\r\n              height: \"100%\"\r\n            }}\r\n          />\r\n          <div\r\n            style={{\r\n              display: \"inline-block\",\r\n              marginLeft: \"10px\",\r\n              marginTop: \"0px\"\r\n            }}\r\n          >\r\n            <div>\r\n              <h1\r\n                style={{\r\n                  display: \"inline-block\",\r\n                  marginBottom: \"0px\",\r\n                  color: \"white\"\r\n                }}\r\n              >\r\n                PART NAME\r\n              </h1>\r\n            </div>\r\n            <div>\r\n              <h2\r\n                style={{\r\n                  display: \"inline-block\",\r\n                  marginTop: \"0px\",\r\n                  color: \"white\"\r\n                }}\r\n              >\r\n                PART NUMBER\r\n              </h2>\r\n              <h2\r\n                style={{\r\n                  display: \"inline-block\",\r\n                  marginLeft: \"20px\",\r\n                  marginTop: \"0px\",\r\n                  color: \"white\"\r\n                }}\r\n              >\r\n                PART REVISION\r\n              </h2>\r\n            </div>\r\n          </div>\r\n          <div />\r\n        </div>\r\n      </ExpandingBar>\r\n    </>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport Label from \"../Label\";\r\n\r\n/** Text Input with integrated label to enforce consistency in layout, error display, label placement */\r\nfunction TextInput({\r\n  htmlId,\r\n  name,\r\n  label,\r\n  type = \"text\",\r\n  required = false,\r\n  onChange,\r\n  placeholder,\r\n  value,\r\n  error,\r\n  children,\r\n  ...props\r\n}) {\r\n  return (\r\n    <div className=\"textinput\">\r\n      <Label htmlFor={htmlId} label={label} required={required} />\r\n      <input\r\n        id={htmlId}\r\n        type={type}\r\n        name={name}\r\n        placeholder={placeholder}\r\n        value={value}\r\n        onChange={onChange}\r\n        className={error && \"textinput__input--state-error\"}\r\n        {...props}\r\n      />\r\n      {children}\r\n      {error && <div className=\"textinput__error\">{error}</div>}\r\n    </div>\r\n  );\r\n}\r\n\r\nTextInput.propTypes = {\r\n  /** Unique HTML ID. USed for tying label to HTML input. Handy Hook for automated testing. */\r\n  htmlId: PropTypes.string.isRequired,\r\n\r\n  /** Input Name. Recommend setting this to match object's property so a single change handler can be used */\r\n  name: PropTypes.string.isRequired,\r\n\r\n  /** Input Label */\r\n  label: PropTypes.string.isRequired,\r\n\r\n  /** Input Type */\r\n  type: PropTypes.oneOf([\"text\", \"number\", \"password\"]),\r\n\r\n  /** Mark label with asterisk if required */\r\n  required: PropTypes.bool,\r\n\r\n  /** Function to call onChange */\r\n  onChange: PropTypes.func.isRequired,\r\n\r\n  /** Placeholder to display when empty */\r\n  placeholder: PropTypes.string,\r\n\r\n  /** Value */\r\n  value: PropTypes.any,\r\n\r\n  /** String to display when error occues */\r\n  error: PropTypes.string,\r\n\r\n  /** Child component to display next to the input */\r\n  children: PropTypes.node\r\n};\r\n\r\nexport default TextInput;\r\n","import React from \"react\";\r\nimport TextInputBEM from \"ps-react/TextInputBEM\";\r\n\r\n/** Required TextBox with Error */\r\nexport default class ExampleError extends React.Component {\r\n  render() {\r\n    return (\r\n      <TextInputBEM\r\n        htmlId=\"example-required-error\"\r\n        value=\"wrong\"\r\n        type=\"password\"\r\n        label=\"Password\"\r\n        name=\"passwordInput\"\r\n        onChange={() => {}}\r\n        required\r\n        error=\"Incorrect Password\"\r\n      />\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport TextInput from \"../TextInput\";\r\nimport PasswordInput from \"../PasswordInput\";\r\n\r\n/** Registration form with Built-In Validation */\r\nclass RegistrationForm extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      user: {\r\n        email: \"\",\r\n        password: \"\"\r\n      },\r\n      errors: {},\r\n      submitted: false\r\n    };\r\n  }\r\n\r\n  onChange = event => {\r\n    const user = this.state.user;\r\n    user[event.target.name] = event.target.value;\r\n    this.ListeningStateChangedEvent({ user });\r\n  };\r\n\r\n  /** Returns a number from 0 to 100 that represents password quality\r\n   *  For simplicity, just returning % of min length entered.\r\n   *  Enhance with checks for number, special char, unique chars, etc.\r\n   */\r\n  passwordQuality(password) {\r\n    if (!password) return null;\r\n    if (password.length >= this.props.minPasswordLength) return 100;\r\n    const percentOfMinLength = parseInt(\r\n      (password.length / this.props.minPasswordLength) * 100,\r\n      10\r\n    );\r\n    return percentOfMinLength;\r\n  }\r\n\r\n  validate({ email, password }) {\r\n    const errors = {};\r\n    const { minPasswordLength } = this.props;\r\n\r\n    if (!email) errors.email = \"Email required.\";\r\n    if (password.length < minPasswordLength)\r\n      errors.password = `Password must be at least ${minPasswordLength} characters.`;\r\n\r\n    this.setState({ errors });\r\n    const formIsValid = Object.getOwnPropertyNames(errors).length === 0;\r\n    return formIsValid;\r\n  }\r\n\r\n  onSubmit = () => {\r\n    const { user } = this.state;\r\n    const formIsValid = this.validate(user);\r\n    if (formIsValid) {\r\n      this.props.onSubmit(user);\r\n      this.setState({ submitted: true });\r\n    }\r\n  };\r\n\r\n  render() {\r\n    const { errors, submitted } = this.state;\r\n    const { email, password } = this.state.user;\r\n\r\n    return submitted ? (\r\n      <h2>{this.props.confirmationMessage}</h2>\r\n    ) : (\r\n      <div>\r\n        <TextInput\r\n          htmlId=\"registration-form-email\"\r\n          name=\"email\"\r\n          onChange={this.onChange}\r\n          label=\"Email\"\r\n          value={email}\r\n          error={errors.email}\r\n          required\r\n        />\r\n\r\n        <PasswordInput\r\n          htmlId=\"registration-form-password\"\r\n          name=\"password\"\r\n          value={password}\r\n          onChange={this.onChange}\r\n          quality={this.passwordQuality(password)}\r\n          showVisibilityToggle\r\n          maxLength={50}\r\n          error={errors.password}\r\n        />\r\n\r\n        <input type=\"submit\" value=\"Register\" onClick={this.onSubmit} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nRegistrationForm.propTypes = {\r\n  /** Message displayed on success */\r\n  confirmationMessage: PropTypes.string,\r\n\r\n  /** Called when form is submitted */\r\n  onSubmit: PropTypes.func.isRequired,\r\n\r\n  /** Minimum Password Length */\r\n  minPasswordLength: PropTypes.number\r\n};\r\n\r\nRegistrationForm.defaultProps = {\r\n  confirmationMessage: \"Thanks for registering!\",\r\n  minPasswordLength: 8\r\n};\r\n\r\nexport default RegistrationForm;\r\n","import React from \"react\";\r\nimport RegistrationForm from \"ps-react/RegistrationForm\";\r\n\r\nexport default class ExampleRegistrationForm extends React.Component {\r\n  onSubmit = user => {\r\n    console.log(user);\r\n  };\r\n\r\n  render() {\r\n    return <RegistrationForm onSubmit={this.onSubmit} />;\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\n/** This is the Hello World Component. */\r\nconst HelloWorld = ({ message }) => {\r\n  return <div>Hello {message} </div>;\r\n};\r\n\r\nHelloWorld.propTypes = {\r\n  /** Message to display */\r\n  message: PropTypes.string\r\n};\r\n\r\nHelloWorld.defaultProps = {\r\n  message: \"World\"\r\n};\r\n\r\nexport default HelloWorld;\r\n","import React from \"react\";\r\nimport HelloWorld from \"ps-react/HelloWorld\";\r\n\r\n/** Custom Message */\r\nexport default function ExampleHelloWorld() {\r\n  return <HelloWorld message=\"PluralSight Viewers!\" />;\r\n}\r\n","var map = {\n\t\"./ClickToEnterTextField/ExampleTextField\": 28,\n\t\"./ClickToEnterTextField/ExampleTextField.js\": 28,\n\t\"./ExpandingBar/ExampleBar\": 46,\n\t\"./ExpandingBar/ExampleBar.js\": 46,\n\t\"./ExpandingBar/IxBarExample\": 30,\n\t\"./ExpandingBar/IxBarExample.js\": 30,\n\t\"./EyeIcon/ExampleEye\": 31,\n\t\"./EyeIcon/ExampleEye.js\": 31,\n\t\"./HelloWorld/ExampleHelloWorld\": 49,\n\t\"./HelloWorld/ExampleHelloWorld.js\": 49,\n\t\"./IxButton/ExampleButton\": 32,\n\t\"./IxButton/ExampleButton.js\": 32,\n\t\"./IxButtonMulti/ExampleButtonMultiCircle\": 33,\n\t\"./IxButtonMulti/ExampleButtonMultiCircle.js\": 33,\n\t\"./IxButtonMulti/ExampleIxButtonMulti\": 34,\n\t\"./IxButtonMulti/ExampleIxButtonMulti.js\": 34,\n\t\"./Label/ExampleOptional\": 35,\n\t\"./Label/ExampleOptional.js\": 35,\n\t\"./Label/ExampleRequired\": 36,\n\t\"./Label/ExampleRequired.js\": 36,\n\t\"./PasswordInput/ExampleAllFeatures\": 37,\n\t\"./PasswordInput/ExampleAllFeatures.js\": 37,\n\t\"./ProgressBar/Example100Percent\": 38,\n\t\"./ProgressBar/Example100Percent.js\": 38,\n\t\"./ProgressBar/Example10Percent\": 39,\n\t\"./ProgressBar/Example10Percent.js\": 39,\n\t\"./ProgressBar/Example50Percent\": 40,\n\t\"./ProgressBar/Example50Percent.js\": 40,\n\t\"./RegistrationForm/ExampleRegistrationForm\": 48,\n\t\"./RegistrationForm/ExampleRegistrationForm.js\": 48,\n\t\"./TextInput/ExampleError\": 41,\n\t\"./TextInput/ExampleError.js\": 41,\n\t\"./TextInput/ExampleOptional\": 42,\n\t\"./TextInput/ExampleOptional.js\": 42,\n\t\"./TextInputBEM/ExampleError\": 47,\n\t\"./TextInputBEM/ExampleError.js\": 47,\n\t\"./TextInputCSSModules/ExampleError\": 45,\n\t\"./TextInputCSSModules/ExampleError.js\": 45,\n\t\"./TextInputStyledComponents/ExampleError\": 44,\n\t\"./TextInputStyledComponents/ExampleError.js\": 44,\n\t\"./Tooltip/TooltipExample\": 43,\n\t\"./Tooltip/TooltipExample.js\": 43\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tvar id = map[req];\n\tif(!(id + 1)) { // check for number or string\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn id;\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 62;","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst Navigation = ({ components }) => {\r\n  return (\r\n    <ul className=\"navigation\">\r\n      {components.map(name => {\r\n        return (\r\n          <li key={name}>\r\n            <a href={`#${name}`}>{name}</a>\r\n          </li>\r\n        );\r\n      })}\r\n    </ul>\r\n  );\r\n};\r\n\r\nNavigation.propTypes = {\r\n  components: PropTypes.array.isRequired\r\n};\r\n\r\nexport default Navigation;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport hljs from \"highlight.js/lib/highlight\";\r\nimport javascript from \"highlight.js/lib/languages/javascript\";\r\n\r\n// Could easily use import Highlight from 'react-highlight';\r\n// But, that adds 170k zipped to our bundle, b/c all langs are included\r\n// check out prism for a better solution\r\n\r\nclass CodeExample extends React.Component {\r\n  componentDidMount() {\r\n    hljs.registerLanguage(\"javascript\", javascript);\r\n    hljs.highlightBlock(this.element);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <pre\r\n        ref={ref => {\r\n          this.element = ref;\r\n        }}\r\n      >\r\n        <code>{this.props.children}</code>\r\n      </pre>\r\n    );\r\n  }\r\n}\r\n\r\nCodeExample.propTypes = {\r\n  children: PropTypes.string.isRequired\r\n};\r\n\r\nexport default CodeExample;\r\n","// displays examples of components in action\r\n\r\nimport React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport CodeExample from \"./CodeExample\";\r\n\r\nclass Example extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { showCode: false };\r\n  }\r\n\r\n  // Don't need to do an explicit bind\r\n  // Doesn't change the value of 'this'\r\n  toggleCode = event => {\r\n    event.preventDefault();\r\n    this.setState(prevState => {\r\n      return { showCode: !prevState.showCode };\r\n    });\r\n  };\r\n\r\n  render() {\r\n    const { showCode } = this.state;\r\n    const { code, description, name } = this.props.example;\r\n\r\n    // Must use CommonJS require to dynamically require because\r\n    // ES Modules must be statically analyzable\r\n    // Dynamically requiring the Example component\r\n    // Don't need to add imports for every Component type we create\r\n    const ExampleComponent = require(`./examples/${\r\n      this.props.componentName\r\n    }/${name}`).default;\r\n    return (\r\n      <div className=\"example\">\r\n        {description && <h4>{description}</h4>}\r\n\r\n        <ExampleComponent />\r\n\r\n        <p>\r\n          <a href=\"#\" onClick={this.toggleCode}>\r\n            {showCode ? \"Hide\" : \"Show\"} Code\r\n          </a>\r\n        </p>\r\n\r\n        {showCode && <CodeExample>{code}</CodeExample>}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nExample.propTypes = {\r\n  example: PropTypes.object.isRequired,\r\n  componentName: PropTypes.string.isRequired\r\n};\r\n\r\nexport default Example;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst Props = ({ props }) => {\r\n  return (\r\n    <table className=\"props\">\r\n      <thead>\r\n        <tr>\r\n          <th>Name</th>\r\n          <th>Description</th>\r\n          <th>Type</th>\r\n          <th>Default</th>\r\n          <th>Required</th>\r\n        </tr>\r\n      </thead>\r\n      <tbody>\r\n        {Object.keys(props).map(key => {\r\n          return (\r\n            <tr key={key}>\r\n              <td>{key}</td>\r\n              <td>{props[key].description}</td>\r\n              <td>{props[key].type.name}</td>\r\n              <td>\r\n                {props[key].defaultValue && props[key].defaultValue.value}\r\n              </td>\r\n              <td>{props[key].required && \"X\"}</td>\r\n            </tr>\r\n          );\r\n        })}\r\n      </tbody>\r\n    </table>\r\n  );\r\n};\r\n\r\nProps.propTypes = {\r\n  props: PropTypes.object.isRequired\r\n};\r\n\r\nexport default Props;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport Example from \"./Example\";\r\nimport Props from \"./Props\";\r\n\r\nconst ComponentPage = ({ component }) => {\r\n  const { name, description, props, examples } = component;\r\n\r\n  return (\r\n    <div className=\"componentpage\">\r\n      <h2>{name}</h2>\r\n      <p>{description}</p>\r\n      <h3>Example{examples.length > 1 && \"s\"}</h3>\r\n      {examples.length > 0\r\n        ? examples.map(example => (\r\n            <Example\r\n              key={example.code}\r\n              example={example}\r\n              componentName={name}\r\n            />\r\n          ))\r\n        : \"No Examples Exist.\"}\r\n      <h3>Props</h3>\r\n      {props ? <Props props={props} /> : \"This component accepts no props.\"}\r\n    </div>\r\n  );\r\n};\r\n\r\nComponentPage.propTypes = {\r\n  component: PropTypes.object.isRequired\r\n};\r\n\r\nexport default ComponentPage;\r\n","import React from \"react\";\r\nimport Navigation from \"./Navigation\";\r\nimport ComponentPage from \"./ComponentPage\";\r\nimport componentData from \"../../config/componentData\";\r\n\r\nexport default class Docs extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      route: window.location.hash.substr(1)\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    window.addEventListener(\"hashchange\", () => {\r\n      this.setState({ route: window.location.hash.substr(1) });\r\n    });\r\n  }\r\n\r\n  render() {\r\n    const { route } = this.state;\r\n    const component = route\r\n      ? componentData.filter(component => component.name === route)[0]\r\n      : componentData[0];\r\n\r\n    // routing is done manually rather than via a library\r\n    // Client side routing\r\n    return (\r\n      <div>\r\n        <Navigation\r\n          components={componentData.map(component => component.name)}\r\n        />\r\n        <ComponentPage component={component} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport Docs from \"./docs/Docs\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"../node_modules/highlight.js/styles/ocean.css\";\nimport \"../node_modules/font-awesome/css/font-awesome.min.css\";\n\nReactDOM.render(<Docs />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}