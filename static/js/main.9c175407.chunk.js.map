{"version":3,"sources":["components/IxButton/IxButton.js","components/IxButton/index.js","components/Label/Label.js","components/Label/index.js","components/TextInput/TextInput.js","components/TextInput/index.js","components/ProgressBar/ProgressBar.js","components/ProgressBar/index.js","components/Ellipses/Ellipses.js","components/Ellipses/index.js","components/IxButtonMainFlat/IxButtonMainFlat.js","components/IxButtonMainFlat/index.js","components/ClickToEnterTextField/ClickToEnterTextField.js","components/ClickToEnterTextField/index.js","components/IxButtonMulti/IxButtonMulti.js","components/IxButtonMulti/index.js","components/EyeIcon/EyeIcon.js","components/EyeIcon/index.js","components/ExpandingBar/ExpandingBar.js","components/ExpandingBar/index.js","components/PasswordInput/PasswordInput.js","components/PasswordInput/index.js","../config/componentData.js","docs/examples/ClickToEnterTextField/ExampleTextField.js","docs/examples/Ellipses/EllipsesExample.js","docs/examples/ExpandingBar/IxBarExample.js","docs/examples/EyeIcon/ExampleEye.js","docs/examples/IxButton/ExampleButton.js","docs/examples/IxButtonMainFlat/IxButtonMainFlatExample.js","docs/examples/IxButtonMulti/ExampleButtonMultiCircle.js","docs/examples/IxButtonMulti/ExampleIxButtonMulti.js","docs/examples/Label/ExampleOptional.js","docs/examples/Label/ExampleRequired.js","docs/examples/PasswordInput/ExampleAllFeatures.js","docs/examples/ProgressBar/Example100Percent.js","docs/examples/ProgressBar/Example10Percent.js","docs/examples/ProgressBar/Example50Percent.js","docs/examples/TextInput/ExampleError.js","docs/examples/TextInput/ExampleOptional.js","components/Tooltip/Tooltip.js","docs/examples/Tooltip/TooltipExample.js","components/TextInputStyledComponents/TextInputStyledComponents.js","docs/examples/TextInputStyledComponents/ExampleError.js","components/TextInputCSSModules/TextInputCSSModules.js","docs/examples/TextInputCSSModules/ExampleError.js","components/HelloWorld/HelloWorld.js","docs/examples/HelloWorld/ExampleHelloWorld.js","components/TextInputBEM/TextInputBEM.js","docs/examples/TextInputBEM/ExampleError.js","components/RegistrationForm/RegistrationForm.js","docs/examples/RegistrationForm/ExampleRegistrationForm.js","docs/examples/ExpandingBar/ExampleBar.js","docs/examples sync /^/.*$","docs/Navigation.js","docs/CodeExample.js","docs/Example.js","docs/Props.js","docs/ComponentPage.js","docs/Docs.js","serviceWorker.js","index.js"],"names":["IxButton","props","_this","_classCallCheck","this","_possibleConstructorReturn","_getPrototypeOf","call","state","hover","React","Component","setState","_this2","_this$props","color","backgroundColor","iconHoverColor","size","shadow","handleClick","shape","icon","dropdown","react_default","a","createElement","id","style","width","height","borderRadius","border","concat","display","boxShadow","margin","cursor","onMouseOut","mouseOut","onMouseOver","mouseOver","onClick","justifyContent","className","float","Ellipses","position","direction","propTypes","PropTypes","string","number","bool","func","isRequired","defaultProps","console","log","__webpack_require__","d","__webpack_exports__","components_IxButton_IxButton","Label","_ref","htmlFor","label","required","Label_Label","TextInput","htmlId","name","_ref$type","type","_ref$required","onChange","placeholder","value","error","children","_objectWithoutProperties","marginBottom","_extends","oneOf","any","node","TextInput_TextInput","borderStyle","ProgressBar","percent","parseInt","_objectSpread","getWidthAsPercentOfTotalWidth","getColor","components_ProgressBar_ProgressBar","dotStyle","flexDirection","components_Ellipses_Ellipses","IxButtonMainFlat","lineHeight","fontSize","textColor","getTypeStyle","marginLeft","marginTop","getIconSize","WebkitTransform","fontWeight","components_IxButtonMainFlat_IxButtonMainFlat","ClickToEnterTextField","isEntered","isHover","onSubmit","leftMargin","topMargin","rightMargin","bottomMargin","padding","bind","marginBlockStart","marginBlockEnd","onClickField","marginBlock","components_ClickToEnterTextField_ClickToEnterTextField","IxButtonMulti","open","zIndex","components_IxButtonMulti_IxButtonMulti","EyeIcon","xmlns","viewBox","transform","fill","cx","cy","r","EyeIcon_EyeIcon","ExpandingBar","_defineProperty","_assertThisInitialized","expanded","extracting","hello","toggleExpanded","startHeight","endHeight","AnimateHeight_default","duration","onLoad","multiplier","components_ExpandingBar_ExpandingBar","PasswordInput","event","prevState","showPassword","preventDefault","maxLength","showVisibilityToggle","quality","href","toggleShowPassword","length","components_PasswordInput_PasswordInput","module","exports","description","computed","defaultValue","code","examples","message","confirmationMessage","minPasswordLength","tip","ExampleTextField","react__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_0___default","n","ps_react_ClickToEnterTextField__WEBPACK_IMPORTED_MODULE_1__","target","EllipsesExample","ps_react_Ellipses__WEBPACK_IMPORTED_MODULE_1__","Fragment","ExampleBar","ps_react_ExpandingBar__WEBPACK_IMPORTED_MODULE_1__","ps_react_ClickToEnterTextField__WEBPACK_IMPORTED_MODULE_2__","alignItems","EyeIconExample","ps_react_EyeIcon__WEBPACK_IMPORTED_MODULE_1__","ExampleButton","ps_react_IxButton__WEBPACK_IMPORTED_MODULE_1__","IxButtonMainFlatExample","ps_react_IxButtonMainFlat__WEBPACK_IMPORTED_MODULE_1__","ExampleCirclesMulti","ps_react_IxButtonMulti__WEBPACK_IMPORTED_MODULE_2__","ExampleOptional","ps_react_Label__WEBPACK_IMPORTED_MODULE_1__","ExampleRequired","ExampleAllFeatures","password","ps_react_PasswordInput__WEBPACK_IMPORTED_MODULE_1__","minLength","getQuality","Example10Percent","ps_react_ProgressBar__WEBPACK_IMPORTED_MODULE_1__","ExampleError","ps_react_TextInput__WEBPACK_IMPORTED_MODULE_1__","bottom","left","top","right","getLocation","dir","Tooltip","TooltipExample","components_Tooltip_Tooltip","Error","styled","div","_templateObject","Input","input","_templateObject2","Fieldset","_templateObject3","TextInputStyledComponents","styles","fieldset","inputError","TextInputCSSModules","HelloWorld","ExampleHelloWorld","components_HelloWorld_HelloWorld","TextInputBEM","RegistrationForm","user","ListeningStateChangedEvent","validate","submitted","email","errors","Object","getOwnPropertyNames","_this$state","_this$state$user","passwordQuality","ExampleRegistrationForm","components_RegistrationForm_RegistrationForm","paddingBottom","class","fontColor","marginRight","checked","map","./ClickToEnterTextField/ExampleTextField","./ClickToEnterTextField/ExampleTextField.js","./Ellipses/EllipsesExample","./Ellipses/EllipsesExample.js","./ExpandingBar/ExampleBar","./ExpandingBar/ExampleBar.js","./ExpandingBar/IxBarExample","./ExpandingBar/IxBarExample.js","./EyeIcon/ExampleEye","./EyeIcon/ExampleEye.js","./HelloWorld/ExampleHelloWorld","./HelloWorld/ExampleHelloWorld.js","./IxButton/ExampleButton","./IxButton/ExampleButton.js","./IxButtonMainFlat/IxButtonMainFlatExample","./IxButtonMainFlat/IxButtonMainFlatExample.js","./IxButtonMulti/ExampleButtonMultiCircle","./IxButtonMulti/ExampleButtonMultiCircle.js","./IxButtonMulti/ExampleIxButtonMulti","./IxButtonMulti/ExampleIxButtonMulti.js","./Label/ExampleOptional","./Label/ExampleOptional.js","./Label/ExampleRequired","./Label/ExampleRequired.js","./PasswordInput/ExampleAllFeatures","./PasswordInput/ExampleAllFeatures.js","./ProgressBar/Example100Percent","./ProgressBar/Example100Percent.js","./ProgressBar/Example10Percent","./ProgressBar/Example10Percent.js","./ProgressBar/Example50Percent","./ProgressBar/Example50Percent.js","./RegistrationForm/ExampleRegistrationForm","./RegistrationForm/ExampleRegistrationForm.js","./TextInput/ExampleError","./TextInput/ExampleError.js","./TextInput/ExampleOptional","./TextInput/ExampleOptional.js","./TextInputBEM/ExampleError","./TextInputBEM/ExampleError.js","./TextInputCSSModules/ExampleError","./TextInputCSSModules/ExampleError.js","./TextInputStyledComponents/ExampleError","./TextInputStyledComponents/ExampleError.js","./Tooltip/TooltipExample","./Tooltip/TooltipExample.js","webpackContext","req","webpackContextResolve","e","keys","resolve","Navigation","components","key","array","CodeExample","hljs","registerLanguage","javascript","highlightBlock","element","ref","Example","Example_classCallCheck","Example_getPrototypeOf","Example_assertThisInitialized","showCode","_this$props$example","example","ExampleComponent","require","componentName","default","toggleCode","docs_CodeExample","object","Props","ComponentPage","component","docs_Example","docs_Props","Docs","Docs_classCallCheck","Docs_possibleConstructorReturn","Docs_getPrototypeOf","route","window","location","hash","substr","addEventListener","componentData","filter","docs_Navigation","docs_ComponentPage","Boolean","hostname","match","ReactDOM","render","Docs_Docs","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.9c175407.chunk.js","sourcesContent":["import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { faHome } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { FontAwesomeIcon } from \"react-fontawesome\";\r\nimport Ellipses from \"../Ellipses\";\r\n\r\nconst sayHello = () => {\r\n  console.log(\"Hello World!\");\r\n};\r\n\r\nclass IxButton extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { hover: false };\r\n  }\r\n\r\n  mouseOver() {\r\n    this.setState({ hover: true });\r\n  }\r\n\r\n  mouseOut() {\r\n    this.setState({ hover: false });\r\n  }\r\n\r\n  render() {\r\n    const {\r\n      color,\r\n      backgroundColor,\r\n      iconHoverColor,\r\n      size,\r\n      shadow,\r\n      handleClick,\r\n      shape,\r\n      icon,\r\n      dropdown\r\n    } = this.props;\r\n    return (\r\n      <div id=\"button box\">\r\n        <div\r\n          style={{\r\n            backgroundColor: this.state.hover ? color : backgroundColor,\r\n            width: size,\r\n            height: size,\r\n            borderRadius: shape === \"circle\" ? \"50%\" : \"10%\",\r\n            border: `3px solid ${color}`,\r\n            display: \"inline-block\",\r\n            boxShadow:\r\n              shadow &&\r\n              this.state.hover &&\r\n              \"2px 2px 4px 0px rgba(0, 0, 0, 0.47)\",\r\n            margin: \"5px 5px 5px 5px\",\r\n            cursor: this.state.hover && \"pointer\"\r\n          }}\r\n          onMouseOut={() => this.mouseOut()}\r\n          onMouseOver={() => this.mouseOver()}\r\n          onClick={handleClick}\r\n        >\r\n          <div\r\n            style={{\r\n              display: \"flex\",\r\n              justifyContent: \"center\",\r\n              height: \"100%\",\r\n              width: \"100%\"\r\n            }}\r\n          >\r\n            <i\r\n              className={icon}\r\n              style={{\r\n                color: this.state.hover ? iconHoverColor : color,\r\n                margin: \"auto auto\",\r\n                float: \"none\"\r\n              }}\r\n            />\r\n          </div>\r\n        </div>\r\n        <div\r\n          style={{\r\n            display: \"inline-block\",\r\n            margin: `0px 0px ${shape === \"circle\" ? \"-4px\" : \"5px\"} -5px`\r\n          }}\r\n        >\r\n          {dropdown && (\r\n            <Ellipses style={{ position: \"absolute\" }} direction=\"column\" />\r\n          )}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nIxButton.propTypes = {\r\n  /** Button Color */\r\n  color: PropTypes.string,\r\n\r\n  /** Button Background Color */\r\n  backgroundColor: PropTypes.string,\r\n\r\n  /** Icon Hover Color */\r\n  iconHoverColor: PropTypes.string,\r\n\r\n  /** Width and Height */\r\n  size: PropTypes.number,\r\n\r\n  /** Is there a Shadow? */\r\n  shadow: PropTypes.bool,\r\n\r\n  /** What to do when Clicking */\r\n  handleClick: PropTypes.func.isRequired,\r\n\r\n  /** Shape of the Button */\r\n  shape: PropTypes.string,\r\n\r\n  /** Icon to Display */\r\n  icon: PropTypes.string\r\n};\r\n\r\nIxButton.defaultProps = {\r\n  /** Blue is my Favorite Color! */\r\n  color: \"#0d47a1\",\r\n\r\n  /** Transparent by default */\r\n  backgroundColor: \"transparent\",\r\n\r\n  /** Icon White on Hover by Default */\r\n  iconHoverColor: \"white\",\r\n\r\n  /** 25px Circle */\r\n  size: 45,\r\n\r\n  /** Show Shadow by Default */\r\n  shadow: true,\r\n\r\n  /** By Default prints Hello World to Console */\r\n  handleClick: sayHello,\r\n\r\n  /** icon */\r\n  icon: \"fa fa-paw\"\r\n};\r\n\r\nexport default IxButton;\r\n","export { default } from \"./IxButton\";\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\n/** Label with Required Field, Display, htmlFor, and block styling */\r\n\r\nfunction Label({ htmlFor, label, required }) {\r\n  return (\r\n    <label style={{ display: \"block\" }} htmlFor={htmlFor}>\r\n      {label} {required && <span style={{ color: \"red\" }}> *</span>}\r\n    </label>\r\n  );\r\n}\r\n\r\nLabel.propTypes = {\r\n  /** HTML ID for associated input */\r\n  htmlFor: PropTypes.string.isRequired,\r\n\r\n  /** Label Text */\r\n  label: PropTypes.string.isRequired,\r\n\r\n  /** Display asterisk after label if true */\r\n  required: PropTypes.bool\r\n};\r\n\r\nLabel.defaultProps = {};\r\n\r\nexport default Label;\r\n","export { default } from \"./Label\";\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport Label from \"../Label\";\r\n\r\n/** Text Input with integrated label to enforce consistency in layout, error display, label placement */\r\nfunction TextInput({\r\n  htmlId,\r\n  name,\r\n  label,\r\n  type = \"text\",\r\n  required = false,\r\n  onChange,\r\n  placeholder,\r\n  value,\r\n  error,\r\n  children,\r\n  ...props\r\n}) {\r\n  return (\r\n    <div style={{ marginBottom: 16 }}>\r\n      <Label htmlFor={htmlId} label={label} required={required} />\r\n      <input\r\n        id={htmlId}\r\n        type={type}\r\n        name={name}\r\n        placeholder={placeholder}\r\n        value={value}\r\n        onChange={onChange}\r\n        style={error && { border: \"solid 1px red\" }}\r\n        {...props}\r\n      />\r\n      {children}\r\n      {error && (\r\n        <div className=\"error\" style={{ color: \"red\" }}>\r\n          {error}\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nTextInput.propTypes = {\r\n  /** Unique HTML ID. USed for tying label to HTML input. Handy Hook for automated testing. */\r\n  htmlId: PropTypes.string.isRequired,\r\n\r\n  /** Input Name. Recommend setting this to match object's property so a single change handler can be used */\r\n  name: PropTypes.string.isRequired,\r\n\r\n  /** Input Label */\r\n  label: PropTypes.string.isRequired,\r\n\r\n  /** Input Type */\r\n  type: PropTypes.oneOf([\"text\", \"number\", \"password\"]),\r\n\r\n  /** Mark label with asterisk if required */\r\n  required: PropTypes.bool,\r\n\r\n  /** Function to call onChange */\r\n  onChange: PropTypes.func.isRequired,\r\n\r\n  /** Placeholder to display when empty */\r\n  placeholder: PropTypes.string,\r\n\r\n  /** Value */\r\n  value: PropTypes.any,\r\n\r\n  /** String to display when error occues */\r\n  error: PropTypes.string,\r\n\r\n  /** Child component to display next to the input */\r\n  children: PropTypes.node\r\n};\r\n\r\nexport default TextInput;\r\n","export { default } from \"./TextInput\";\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst borderStyle = {\r\n  border: `solid 1px #efefef`\r\n};\r\n\r\nclass ProgressBar extends React.Component {\r\n  getColor = percent => {\r\n    if (this.props.percent === 100) return \"green\";\r\n    return this.props.percent >= 50 ? \"lightgreen\" : \"red\";\r\n  };\r\n\r\n  getWidthAsPercentOfTotalWidth = () => {\r\n    return parseInt(this.props.width * (this.props.percent / 100), 10);\r\n  };\r\n\r\n  render() {\r\n    const { percent, width, height } = this.props;\r\n    return (\r\n      <div style={{ ...borderStyle, width: width }}>\r\n        <div\r\n          style={{\r\n            width: this.getWidthAsPercentOfTotalWidth(),\r\n            height,\r\n            backgroundColor: this.getColor(percent)\r\n          }}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nProgressBar.propTypes = {\r\n  /** Percent of progress completed */\r\n  percent: PropTypes.number.isRequired,\r\n\r\n  /** Bar Width */\r\n  width: PropTypes.number.isRequired,\r\n\r\n  /** Bar Height */\r\n  height: PropTypes.number\r\n};\r\n\r\n// Declare Default Props\r\nProgressBar.defaultProps = {\r\n  height: 5\r\n};\r\n\r\nexport default ProgressBar;\r\n","export { default } from \"./ProgressBar.js\";\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nclass Ellipses extends React.Component {\r\n  render() {\r\n    const { color, size, direction } = this.props;\r\n\r\n    const dotStyle = {\r\n      margin: \"2px 2px 2px 2px\",\r\n      height: size,\r\n      width: size,\r\n      backgroundColor: color,\r\n      borderRadius: \"50%\"\r\n    };\r\n\r\n    return (\r\n      <div style={{ display: \"flex\", flexDirection: direction, float: \"left\" }}>\r\n        <div style={dotStyle} />\r\n        <div style={dotStyle} />\r\n        <div style={dotStyle} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nEllipses.propTypes = {\r\n  /* Color of the Dots */\r\n  color: PropTypes.string,\r\n\r\n  /* Size of the Dots */\r\n  size: PropTypes.number,\r\n\r\n  /* Direction of the Dots, Row or Column */\r\n  direction: PropTypes.string\r\n};\r\n\r\nEllipses.defaultProps = {\r\n  /* Color of the Dots */\r\n  color: \"#0d47a1\",\r\n\r\n  /* Diameter of the Dots */\r\n  size: 3,\r\n\r\n  /* Row or Column */\r\n  direction: \"row\"\r\n};\r\n\r\nexport default Ellipses;\r\n","export { default } from './Ellipses';","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst handleClick = () => {\r\n  console.log(\"Hello World\");\r\n};\r\n\r\nclass IxButtonMainFlat extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { hover: false };\r\n  }\r\n\r\n  mouseOver() {\r\n    this.setState({ hover: true });\r\n  }\r\n\r\n  mouseOut() {\r\n    this.setState({ hover: false });\r\n  }\r\n\r\n  getTypeStyle(type) {\r\n    switch (type) {\r\n      case \"small\":\r\n        return {\r\n          lineHeight: \"25px\",\r\n          height: 25,\r\n          width: 100,\r\n          borderRadius: \"5px 5px 5px 5px\",\r\n          fontSize: 10\r\n        };\r\n      case \"medium\":\r\n        return {\r\n          height: 35,\r\n          width: 150,\r\n          lineHeight: \"35px\",\r\n          borderRadius: \"7px 7px 7px 7px\",\r\n          fontSize: 12\r\n        };\r\n      case \"big\":\r\n        return {\r\n          lineHeight: \"45px\",\r\n          height: 45,\r\n          width: 200,\r\n          borderRadius: \"10px 10px 10px 10px\",\r\n          fontSize: 14\r\n        };\r\n      default:\r\n        return {\r\n          lineHeight: \"35px\",\r\n          height: 35,\r\n          width: 150,\r\n          borderRadius: \"7px 7px 7px 7px\",\r\n          fontSize: 12\r\n        };\r\n    }\r\n  }\r\n\r\n  getIconSize(type) {\r\n    switch (type) {\r\n      case \"small\":\r\n        return 12;\r\n      case \"medium\":\r\n        return 16;\r\n      case \"big\":\r\n        return 20;\r\n      default:\r\n        return 16;\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const {\r\n      type,\r\n      backgroundColor,\r\n      textColor,\r\n      handleClick,\r\n      label,\r\n      icon\r\n    } = this.props;\r\n    return (\r\n      <div\r\n        style={{\r\n          ...this.getTypeStyle(type),\r\n          backgroundColor: backgroundColor,\r\n          boxShadow: this.state.hover && \"2px 2px 4px 0px rgba(0, 0, 0, 0.47)\",\r\n          cursor: this.state.hover && \"pointer\",\r\n          margin: \"5px 5px 5px 5px\"\r\n        }}\r\n        onMouseOut={() => this.mouseOut()}\r\n        onMouseOver={() => this.mouseOver()}\r\n        onClick={handleClick}\r\n      >\r\n        <i\r\n          className={icon}\r\n          style={{\r\n            color: textColor,\r\n            position: \"absolute\",\r\n            marginLeft: \"0.5em\",\r\n            marginTop: \"0.5em\",\r\n            fontSize: this.getIconSize(type)\r\n          }}\r\n        />\r\n        <div\r\n          style={{\r\n            display: \"inline-block\",\r\n            marginLeft: \"50%\",\r\n            WebkitTransform: \"translateX(-50%)\"\r\n          }}\r\n        >\r\n          <span\r\n            style={{\r\n              color: textColor,\r\n              fontWeight: \"bold\"\r\n            }}\r\n          >\r\n            {label}\r\n          </span>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nIxButtonMainFlat.propTypes = {\r\n  /* small, medium, or big */\r\n  type: PropTypes.string,\r\n\r\n  /* background color of the button */\r\n  backgroundColor: PropTypes.string,\r\n\r\n  /* text and icon color of the button */\r\n  textColor: PropTypes.string,\r\n\r\n  /* button text */\r\n  label: PropTypes.string,\r\n\r\n  /* icon to be used */\r\n  icon: PropTypes.string,\r\n\r\n  /* function when clicked */\r\n  handleClick: PropTypes.func\r\n};\r\n\r\nIxButtonMainFlat.defaultProps = {\r\n  /* normal size */\r\n  type: \"normal\",\r\n\r\n  /* blue color */\r\n  backgroundColor: \"#0d47a1\",\r\n\r\n  /* white text */\r\n  textColor: \"white\",\r\n\r\n  /* sample label */\r\n  label: \"EXAMPLE\",\r\n\r\n  /* paw icon placeholder */\r\n  icon: \"fa fa-paw\",\r\n\r\n  /* uses the same onClick function that prints Hello World to console */\r\n  handleClick: handleClick\r\n};\r\n\r\nexport default IxButtonMainFlat;\r\n","export { default } from './IxButtonMainFlat.js';","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\n/** Text Input with integrated label to enforce consistency in layout, error display, label placement */\r\nclass ClickToEnterTextField extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { isEntered: false, isHover: false, value: props.value };\r\n  }\r\n\r\n  onClick() {\r\n    this.setState({ isEntered: true, isHover: false });\r\n  }\r\n\r\n  mouseOver() {\r\n    this.setState({ isHover: true });\r\n  }\r\n\r\n  mouseOut() {\r\n    this.setState({ isHover: false });\r\n  }\r\n\r\n  onClickField() {\r\n    this.setState({ isEntered: true });\r\n  }\r\n\r\n  render() {\r\n    const {\r\n      height,\r\n      name,\r\n      onSubmit,\r\n      onChange,\r\n      leftMargin,\r\n      topMargin,\r\n      rightMargin,\r\n      bottomMargin,\r\n      display,\r\n      color,\r\n      ...props\r\n    } = this.props;\r\n    return (\r\n      <div\r\n        style={{\r\n          display: display,\r\n          margin: \"0px 0px 0px 0px\",\r\n          padding: \"0px\"\r\n        }}\r\n      >\r\n        {this.state.isEntered ? (\r\n          <form onSubmit={onSubmit.bind(this)}>\r\n            <input\r\n              type=\"text\"\r\n              name={name}\r\n              placeholder={name}\r\n              value={this.state.value}\r\n              style={{\r\n                display: display,\r\n                marginBlockStart: \"1px\",\r\n                marginBlockEnd: \"1px\"\r\n              }}\r\n              onChange={onChange.bind(this)}\r\n            />\r\n          </form>\r\n        ) : (\r\n          <p\r\n            onMouseOver={() => this.mouseOver()}\r\n            onMouseOut={() => this.mouseOut()}\r\n            onClick={() => this.onClickField()}\r\n            style={{\r\n              display: display,\r\n              border: this.state.isHover ? \"2px solid white\" : \"\",\r\n              marginBlock: this.state.isHover ? \"1px\" : \"3px\",\r\n              margin: this.state.isHover\r\n                ? \"2px 2px 2px 2px\"\r\n                : \"4px 4px 4px 4px\",\r\n              color: color\r\n            }}\r\n          >\r\n            {this.state.value}\r\n          </p>\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nClickToEnterTextField.propTypes = {\r\n  /** Input Name. Recommend setting this to match object's property so a single change handler can be used */\r\n  name: PropTypes.string.isRequired,\r\n\r\n  /** Input Type */\r\n  type: PropTypes.oneOf([\"text\", \"number\", \"password\"]),\r\n\r\n  /** Mark label with asterisk if required */\r\n  required: PropTypes.bool,\r\n\r\n  /** Function to call onChange */\r\n  onChange: PropTypes.func.isRequired,\r\n\r\n  /** Function to call onSubmit */\r\n  onSubmit: PropTypes.func.isRequired,\r\n\r\n  /** Placeholder to display when empty */\r\n  placeholder: PropTypes.string,\r\n\r\n  /** Value */\r\n  value: PropTypes.any,\r\n\r\n  /** String to display when error occues */\r\n  error: PropTypes.string,\r\n\r\n  /** Child component to display next to the input */\r\n  children: PropTypes.node,\r\n\r\n  /** Display Format */\r\n  display: PropTypes.string,\r\n\r\n  /** Left Margin */\r\n  leftMargin: PropTypes.string,\r\n\r\n  /** Top Margin */\r\n  topMargin: PropTypes.string,\r\n\r\n  /** Bottom Margin */\r\n  bottomMargin: PropTypes.string,\r\n\r\n  /** Right Margin */\r\n  rightMargin: PropTypes.string,\r\n\r\n  /** Text Color */\r\n  color: PropTypes.string\r\n};\r\n\r\nClickToEnterTextField.defaultProps = {\r\n  value: \"PART NAME\",\r\n  leftMargin: \"5px\",\r\n  rightMargin: \"10px\",\r\n  topMargin: \"5px\",\r\n  bottomMargin: \"5px\",\r\n  display: \"inline-block\"\r\n};\r\n\r\nexport default ClickToEnterTextField;\r\n","export { default } from \"./ClickToEnterTextField\";\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport IxButton from \"../IxButton\";\r\nimport Ellipses from \"../Ellipses\";\r\n\r\nclass IxButtonMulti extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { open: false };\r\n  }\r\n\r\n  onClick() {\r\n    this.setState({ open: !this.state.open });\r\n  }\r\n\r\n  // The button defined here will handle the opening/closing of the dropdown.\r\n  // The buttons within the dropdown will be defined in the example.\r\n  render() {\r\n    const { children, shape, backgroundColor, color } = this.props;\r\n    return (\r\n      <div style={{ zIndex: this.state.open ? 100 : 10, position: \"relative\" }}>\r\n        <IxButton\r\n          shape={shape}\r\n          backgroundColor={backgroundColor}\r\n          handleClick={this.onClick.bind(this)}\r\n          dropdown={true}\r\n        />\r\n        <div style={{ position: \"absolute\" }}>\r\n          {this.state.open && children}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nIxButtonMulti.propTypes = {\r\n  /** The Buttons that Exist in the Dropdown Menu */\r\n  children: PropTypes.any,\r\n\r\n  /** The Shape of the Main Button */\r\n  shape: PropTypes.string,\r\n\r\n  /** Button Color */\r\n  color: PropTypes.string\r\n};\r\n\r\nIxButtonMulti.defaultProps = {\r\n  shape: \"square\",\r\n  color: \"#0d47a1\"\r\n};\r\n\r\nexport default IxButtonMulti;\r\n","export { default } from \"./IxButtonMulti\";\r\n","import React from \"react\";\r\n\r\n/** SVG Eye Icon */\r\nfunction EyeIcon() {\r\n  // Attribution: Fabian Alexis at https://commons.wikimedia.org/wiki/File:Antu_view-preview.svg\r\n  return (\r\n    <svg\r\n      width=\"25\"\r\n      height=\"25\"\r\n      xmlns=\"http://www.w3.org/2000/svg\"\r\n      viewBox=\"0 0 22 22\"\r\n    >\r\n      <g transform=\"matrix(.02146 0 0 .02146 1 1)\" fill=\"gray\">\r\n        <path d=\"m466.07 161.53c-205.6 0-382.8 121.2-464.2 296.1-2.5 5.3-2.5 11.5 0 16.9 81.4 174.9 258.6 296.1 464.2 296.1 205.6 0 382.8-121.2 464.2-296.1 2.5-5.3 2.5-11.5 0-16.9-81.4-174.9-258.6-296.1-464.2-296.1m0 514.7c-116.1 0-210.1-94.1-210.1-210.1 0-116.1 94.1-210.1 210.1-210.1 116.1 0 210.1 94.1 210.1 210.1 0 116-94.1 210.1-210.1 210.1\" />\r\n        <circle cx=\"466.08\" cy=\"466.02\" r=\"134.5\" />\r\n      </g>\r\n    </svg>\r\n  );\r\n}\r\n\r\nexport default EyeIcon;\r\n","export { default } from \"./EyeIcon\";\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport AnimateHeight from \"react-animate-height\";\r\nimport { faStarHalfAlt } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nclass ExpandingBar extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { expanded: false, extracting: true };\r\n  }\r\n\r\n  toggleExpanded = () => {\r\n    this.setState({ expanded: !this.state.expanded });\r\n  };\r\n\r\n  hello = () => {\r\n    console.log(\"hello world\");\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.hello();\r\n    this.toggleExpanded();\r\n  }\r\n\r\n  render() {\r\n    const { children, startHeight, endHeight, backgroundColor } = this.props;\r\n    return (\r\n      <div>\r\n        <AnimateHeight\r\n          duration={1000}\r\n          height={this.state.expanded ? endHeight : startHeight}\r\n        >\r\n          <div\r\n            style={{\r\n              backgroundColor: backgroundColor,\r\n              height: this.state.expanded ? endHeight : startHeight\r\n            }}\r\n            onClick={this.toggleExpanded}\r\n            onLoad={this.hello}\r\n          >\r\n            {this.state.expanded && children}\r\n          </div>\r\n        </AnimateHeight>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nExpandingBar.propTypes = {\r\n  /** Background Color */\r\n  backgroundColor: PropTypes.string,\r\n\r\n  /** Bar Height */\r\n  height: PropTypes.number,\r\n\r\n  /** Factor to Expand By */\r\n  multiplier: PropTypes.number\r\n};\r\n\r\nExpandingBar.defaultProps = {\r\n  /** IX Extract Color */\r\n  backgroundColor: \"#445160\",\r\n\r\n  /** Height */\r\n  height: 50,\r\n\r\n  /** Expansion Factor */\r\n  multiplier: 1.5\r\n};\r\n\r\nexport default ExpandingBar;\r\n","export { default } from \"./ExpandingBar\";\r\n","import React from \"react\";\r\nimport Label from \"../Label\";\r\nimport TextInput from \"../TextInput\";\r\nimport PropTypes from \"prop-types\";\r\nimport EyeIcon from \"../EyeIcon\";\r\nimport ProgressBar from \"../ProgressBar\";\r\n\r\n/** Password Input with Integrated Label, quality tips, and show password toggle */\r\nclass PasswordInput extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      showPassword: false\r\n    };\r\n  }\r\n\r\n  toggleShowPassword = event => {\r\n    this.setState(prevState => {\r\n      return { showPassword: !prevState.showPassword };\r\n    });\r\n    if (event) event.preventDefault();\r\n  };\r\n\r\n  render() {\r\n    const {\r\n      htmlId,\r\n      value,\r\n      label,\r\n      error,\r\n      onChange,\r\n      placeholder,\r\n      maxLength,\r\n      showVisibilityToggle,\r\n      quality,\r\n      ...props\r\n    } = this.props;\r\n    const { showPassword } = this.state;\r\n\r\n    return (\r\n      <TextInput\r\n        htmlId={htmlId}\r\n        label={label}\r\n        placeholder={placeholder}\r\n        type={showPassword ? \"text\" : \"password\"}\r\n        onChange={onChange}\r\n        value={value}\r\n        maxLength={maxLength}\r\n        error={error}\r\n        required\r\n        {...props}\r\n      >\r\n        {showVisibilityToggle && (\r\n          <a\r\n            href=\"#\"\r\n            onClick={this.toggleShowPassword}\r\n            style={{ marginLeft: 5 }}\r\n          >\r\n            <EyeIcon />\r\n          </a>\r\n        )}\r\n        {value.length > 0 && quality && (\r\n          <ProgressBar percent={quality} width={130} />\r\n        )}\r\n      </TextInput>\r\n    );\r\n  }\r\n}\r\n\r\nPasswordInput.propTypes = {\r\n  /** Unique HTML ID. Used for tying label to HTML input. Handy hook for automated testing. */\r\n  htmlId: PropTypes.string.isRequired,\r\n\r\n  /** Input name. Recommend setting this to match object's property so a single change handler can be used by convention.*/\r\n  name: PropTypes.string.isRequired,\r\n\r\n  /** Password value */\r\n  value: PropTypes.any,\r\n\r\n  /** Input label */\r\n  label: PropTypes.string,\r\n\r\n  /** Function called when password input value changes */\r\n  onChange: PropTypes.func.isRequired,\r\n\r\n  /** Max password length accepted */\r\n  maxLength: PropTypes.number,\r\n\r\n  /** Placeholder displayed when no password is entered */\r\n  placeholder: PropTypes.string,\r\n\r\n  /** Set to true to show the toggle for displaying the currently entered password */\r\n  showVisibilityToggle: PropTypes.bool,\r\n\r\n  /** Display password quality visually via ProgressBar, accepts a number between 0 and 100 */\r\n  quality: PropTypes.number,\r\n\r\n  /** Validation error to display */\r\n  error: PropTypes.string\r\n};\r\n\r\nPasswordInput.defaultProps = {\r\n  maxLength: 50,\r\n  showVisibilityToggle: false,\r\n  label: \"Password\"\r\n};\r\n\r\nexport default PasswordInput;\r\n","export { default } from \"./PasswordInput\";\r\n","module.exports = [{\n  \"name\": \"ClickToEnterTextField\",\n  \"description\": \"Text Input with integrated label to enforce consistency in layout, error display, label placement\",\n  \"props\": {\n    \"name\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": true,\n      \"description\": \"Input Name. Recommend setting this to match object's property so a single change handler can be used\"\n    },\n    \"type\": {\n      \"type\": {\n        \"name\": \"enum\",\n        \"value\": [{\n          \"value\": \"\\\"text\\\"\",\n          \"computed\": false\n        }, {\n          \"value\": \"\\\"number\\\"\",\n          \"computed\": false\n        }, {\n          \"value\": \"\\\"password\\\"\",\n          \"computed\": false\n        }]\n      },\n      \"required\": false,\n      \"description\": \"Input Type\"\n    },\n    \"required\": {\n      \"type\": {\n        \"name\": \"bool\"\n      },\n      \"required\": false,\n      \"description\": \"Mark label with asterisk if required\"\n    },\n    \"onChange\": {\n      \"type\": {\n        \"name\": \"func\"\n      },\n      \"required\": true,\n      \"description\": \"Function to call onChange\"\n    },\n    \"onSubmit\": {\n      \"type\": {\n        \"name\": \"func\"\n      },\n      \"required\": true,\n      \"description\": \"Function to call onSubmit\"\n    },\n    \"placeholder\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": false,\n      \"description\": \"Placeholder to display when empty\"\n    },\n    \"value\": {\n      \"type\": {\n        \"name\": \"any\"\n      },\n      \"required\": false,\n      \"description\": \"Value\",\n      \"defaultValue\": {\n        \"value\": \"\\\"PART NAME\\\"\",\n        \"computed\": false\n      }\n    },\n    \"error\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": false,\n      \"description\": \"String to display when error occues\"\n    },\n    \"children\": {\n      \"type\": {\n        \"name\": \"node\"\n      },\n      \"required\": false,\n      \"description\": \"Child component to display next to the input\"\n    },\n    \"display\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": false,\n      \"description\": \"Display Format\",\n      \"defaultValue\": {\n        \"value\": \"\\\"inline-block\\\"\",\n        \"computed\": false\n      }\n    },\n    \"leftMargin\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": false,\n      \"description\": \"Left Margin\",\n      \"defaultValue\": {\n        \"value\": \"\\\"5px\\\"\",\n        \"computed\": false\n      }\n    },\n    \"topMargin\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": false,\n      \"description\": \"Top Margin\",\n      \"defaultValue\": {\n        \"value\": \"\\\"5px\\\"\",\n        \"computed\": false\n      }\n    },\n    \"bottomMargin\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": false,\n      \"description\": \"Bottom Margin\",\n      \"defaultValue\": {\n        \"value\": \"\\\"5px\\\"\",\n        \"computed\": false\n      }\n    },\n    \"rightMargin\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": false,\n      \"description\": \"Right Margin\",\n      \"defaultValue\": {\n        \"value\": \"\\\"10px\\\"\",\n        \"computed\": false\n      }\n    },\n    \"color\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": false,\n      \"description\": \"Text Color\"\n    }\n  },\n  \"code\": \"import React from \\\"react\\\";\\r\\nimport PropTypes from \\\"prop-types\\\";\\r\\n\\r\\n/** Text Input with integrated label to enforce consistency in layout, error display, label placement */\\r\\nclass ClickToEnterTextField extends React.Component {\\r\\n  constructor(props) {\\r\\n    super(props);\\r\\n    this.state = { isEntered: false, isHover: false, value: props.value };\\r\\n  }\\r\\n\\r\\n  onClick() {\\r\\n    this.setState({ isEntered: true, isHover: false });\\r\\n  }\\r\\n\\r\\n  mouseOver() {\\r\\n    this.setState({ isHover: true });\\r\\n  }\\r\\n\\r\\n  mouseOut() {\\r\\n    this.setState({ isHover: false });\\r\\n  }\\r\\n\\r\\n  onClickField() {\\r\\n    this.setState({ isEntered: true });\\r\\n  }\\r\\n\\r\\n  render() {\\r\\n    const {\\r\\n      height,\\r\\n      name,\\r\\n      onSubmit,\\r\\n      onChange,\\r\\n      leftMargin,\\r\\n      topMargin,\\r\\n      rightMargin,\\r\\n      bottomMargin,\\r\\n      display,\\r\\n      color,\\r\\n      ...props\\r\\n    } = this.props;\\r\\n    return (\\r\\n      <div\\r\\n        style={{\\r\\n          display: display,\\r\\n          margin: \\\"0px 0px 0px 0px\\\",\\r\\n          padding: \\\"0px\\\"\\r\\n        }}\\r\\n      >\\r\\n        {this.state.isEntered ? (\\r\\n          <form onSubmit={onSubmit.bind(this)}>\\r\\n            <input\\r\\n              type=\\\"text\\\"\\r\\n              name={name}\\r\\n              placeholder={name}\\r\\n              value={this.state.value}\\r\\n              style={{\\r\\n                display: display,\\r\\n                marginBlockStart: \\\"1px\\\",\\r\\n                marginBlockEnd: \\\"1px\\\"\\r\\n              }}\\r\\n              onChange={onChange.bind(this)}\\r\\n            />\\r\\n          </form>\\r\\n        ) : (\\r\\n          <p\\r\\n            onMouseOver={() => this.mouseOver()}\\r\\n            onMouseOut={() => this.mouseOut()}\\r\\n            onClick={() => this.onClickField()}\\r\\n            style={{\\r\\n              display: display,\\r\\n              border: this.state.isHover ? \\\"2px solid white\\\" : \\\"\\\",\\r\\n              marginBlock: this.state.isHover ? \\\"1px\\\" : \\\"3px\\\",\\r\\n              margin: this.state.isHover\\r\\n                ? \\\"2px 2px 2px 2px\\\"\\r\\n                : \\\"4px 4px 4px 4px\\\",\\r\\n              color: color\\r\\n            }}\\r\\n          >\\r\\n            {this.state.value}\\r\\n          </p>\\r\\n        )}\\r\\n      </div>\\r\\n    );\\r\\n  }\\r\\n}\\r\\n\\r\\nClickToEnterTextField.propTypes = {\\r\\n  /** Input Name. Recommend setting this to match object's property so a single change handler can be used */\\r\\n  name: PropTypes.string.isRequired,\\r\\n\\r\\n  /** Input Type */\\r\\n  type: PropTypes.oneOf([\\\"text\\\", \\\"number\\\", \\\"password\\\"]),\\r\\n\\r\\n  /** Mark label with asterisk if required */\\r\\n  required: PropTypes.bool,\\r\\n\\r\\n  /** Function to call onChange */\\r\\n  onChange: PropTypes.func.isRequired,\\r\\n\\r\\n  /** Function to call onSubmit */\\r\\n  onSubmit: PropTypes.func.isRequired,\\r\\n\\r\\n  /** Placeholder to display when empty */\\r\\n  placeholder: PropTypes.string,\\r\\n\\r\\n  /** Value */\\r\\n  value: PropTypes.any,\\r\\n\\r\\n  /** String to display when error occues */\\r\\n  error: PropTypes.string,\\r\\n\\r\\n  /** Child component to display next to the input */\\r\\n  children: PropTypes.node,\\r\\n\\r\\n  /** Display Format */\\r\\n  display: PropTypes.string,\\r\\n\\r\\n  /** Left Margin */\\r\\n  leftMargin: PropTypes.string,\\r\\n\\r\\n  /** Top Margin */\\r\\n  topMargin: PropTypes.string,\\r\\n\\r\\n  /** Bottom Margin */\\r\\n  bottomMargin: PropTypes.string,\\r\\n\\r\\n  /** Right Margin */\\r\\n  rightMargin: PropTypes.string,\\r\\n\\r\\n  /** Text Color */\\r\\n  color: PropTypes.string\\r\\n};\\r\\n\\r\\nClickToEnterTextField.defaultProps = {\\r\\n  value: \\\"PART NAME\\\",\\r\\n  leftMargin: \\\"5px\\\",\\r\\n  rightMargin: \\\"10px\\\",\\r\\n  topMargin: \\\"5px\\\",\\r\\n  bottomMargin: \\\"5px\\\",\\r\\n  display: \\\"inline-block\\\"\\r\\n};\\r\\n\\r\\nexport default ClickToEnterTextField;\\r\\n\",\n  \"examples\": [{\n    \"name\": \"ExampleTextField\",\n    \"description\": \"Optional TextBox\",\n    \"code\": \"import React from \\\"react\\\";\\r\\nimport ClickToEnterTextField from \\\"ps-react/ClickToEnterTextField\\\";\\r\\n\\r\\n/** Optional TextBox */\\r\\nexport default function ExampleTextField() {\\r\\n  function onSubmit(event) {\\r\\n    this.setState({isEntered: false});\\r\\n    this.setState({isHover: false});\\r\\n    /** make any additonal calls or logic when submitting here, e.g. updating the DB */\\r\\n    event.preventDefault();\\r\\n  }\\r\\n\\r\\n  function onChange(event) {\\r\\n    this.setState({ value: event.target.value });\\r\\n    /** make any additional calls or logic when submitting here */\\r\\n  }\\r\\n\\r\\n  return (\\r\\n    <ClickToEnterTextField name=\\\"partname\\\" onChange={onChange} onSubmit={onSubmit} />\\r\\n  );\\r\\n}\\r\\n\"\n  }]\n}, {\n  \"name\": \"Ellipses\",\n  \"description\": \"\",\n  \"props\": {\n    \"color\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": false,\n      \"description\": \"\",\n      \"defaultValue\": {\n        \"value\": \"\\\"#0d47a1\\\"\",\n        \"computed\": false\n      }\n    },\n    \"size\": {\n      \"type\": {\n        \"name\": \"number\"\n      },\n      \"required\": false,\n      \"description\": \"\",\n      \"defaultValue\": {\n        \"value\": \"3\",\n        \"computed\": false\n      }\n    },\n    \"direction\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": false,\n      \"description\": \"\",\n      \"defaultValue\": {\n        \"value\": \"\\\"row\\\"\",\n        \"computed\": false\n      }\n    }\n  },\n  \"code\": \"import React from \\\"react\\\";\\r\\nimport PropTypes from \\\"prop-types\\\";\\r\\n\\r\\nclass Ellipses extends React.Component {\\r\\n  render() {\\r\\n    const { color, size, direction } = this.props;\\r\\n\\r\\n    const dotStyle = {\\r\\n      margin: \\\"2px 2px 2px 2px\\\",\\r\\n      height: size,\\r\\n      width: size,\\r\\n      backgroundColor: color,\\r\\n      borderRadius: \\\"50%\\\"\\r\\n    };\\r\\n\\r\\n    return (\\r\\n      <div style={{ display: \\\"flex\\\", flexDirection: direction, float: \\\"left\\\" }}>\\r\\n        <div style={dotStyle} />\\r\\n        <div style={dotStyle} />\\r\\n        <div style={dotStyle} />\\r\\n      </div>\\r\\n    );\\r\\n  }\\r\\n}\\r\\n\\r\\nEllipses.propTypes = {\\r\\n  /* Color of the Dots */\\r\\n  color: PropTypes.string,\\r\\n\\r\\n  /* Size of the Dots */\\r\\n  size: PropTypes.number,\\r\\n\\r\\n  /* Direction of the Dots, Row or Column */\\r\\n  direction: PropTypes.string\\r\\n};\\r\\n\\r\\nEllipses.defaultProps = {\\r\\n  /* Color of the Dots */\\r\\n  color: \\\"#0d47a1\\\",\\r\\n\\r\\n  /* Diameter of the Dots */\\r\\n  size: 3,\\r\\n\\r\\n  /* Row or Column */\\r\\n  direction: \\\"row\\\"\\r\\n};\\r\\n\\r\\nexport default Ellipses;\\r\\n\",\n  \"examples\": [{\n    \"name\": \"EllipsesExample\",\n    \"description\": \"\",\n    \"code\": \"import React from \\\"react\\\";\\r\\nimport Ellipses from \\\"ps-react/Ellipses\\\";\\r\\n\\r\\nexport default function EllipsesExample() {\\r\\n  return (\\r\\n    <>\\r\\n      <Ellipses direction=\\\"row\\\" />\\r\\n      <Ellipses direction=\\\"column\\\" size={5} color=\\\"red\\\" />\\r\\n    </>\\r\\n  );\\r\\n}\\r\\n\"\n  }]\n}, {\n  \"name\": \"ExpandingBar\",\n  \"description\": \"\",\n  \"props\": {\n    \"backgroundColor\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": false,\n      \"description\": \"Background Color\",\n      \"defaultValue\": {\n        \"value\": \"\\\"#445160\\\"\",\n        \"computed\": false\n      }\n    },\n    \"height\": {\n      \"type\": {\n        \"name\": \"number\"\n      },\n      \"required\": false,\n      \"description\": \"Bar Height\",\n      \"defaultValue\": {\n        \"value\": \"50\",\n        \"computed\": false\n      }\n    },\n    \"multiplier\": {\n      \"type\": {\n        \"name\": \"number\"\n      },\n      \"required\": false,\n      \"description\": \"Factor to Expand By\",\n      \"defaultValue\": {\n        \"value\": \"1.5\",\n        \"computed\": false\n      }\n    }\n  },\n  \"code\": \"import React from \\\"react\\\";\\r\\nimport PropTypes from \\\"prop-types\\\";\\r\\nimport AnimateHeight from \\\"react-animate-height\\\";\\r\\nimport { faStarHalfAlt } from \\\"@fortawesome/free-solid-svg-icons\\\";\\r\\n\\r\\nclass ExpandingBar extends React.Component {\\r\\n  constructor(props) {\\r\\n    super(props);\\r\\n    this.state = { expanded: false, extracting: true };\\r\\n  }\\r\\n\\r\\n  toggleExpanded = () => {\\r\\n    this.setState({ expanded: !this.state.expanded });\\r\\n  };\\r\\n\\r\\n  hello = () => {\\r\\n    console.log(\\\"hello world\\\");\\r\\n  };\\r\\n\\r\\n  componentDidMount() {\\r\\n    this.hello();\\r\\n    this.toggleExpanded();\\r\\n  }\\r\\n\\r\\n  render() {\\r\\n    const { children, startHeight, endHeight, backgroundColor } = this.props;\\r\\n    return (\\r\\n      <div>\\r\\n        <AnimateHeight\\r\\n          duration={1000}\\r\\n          height={this.state.expanded ? endHeight : startHeight}\\r\\n        >\\r\\n          <div\\r\\n            style={{\\r\\n              backgroundColor: backgroundColor,\\r\\n              height: this.state.expanded ? endHeight : startHeight\\r\\n            }}\\r\\n            onClick={this.toggleExpanded}\\r\\n            onLoad={this.hello}\\r\\n          >\\r\\n            {this.state.expanded && children}\\r\\n          </div>\\r\\n        </AnimateHeight>\\r\\n      </div>\\r\\n    );\\r\\n  }\\r\\n}\\r\\n\\r\\nExpandingBar.propTypes = {\\r\\n  /** Background Color */\\r\\n  backgroundColor: PropTypes.string,\\r\\n\\r\\n  /** Bar Height */\\r\\n  height: PropTypes.number,\\r\\n\\r\\n  /** Factor to Expand By */\\r\\n  multiplier: PropTypes.number\\r\\n};\\r\\n\\r\\nExpandingBar.defaultProps = {\\r\\n  /** IX Extract Color */\\r\\n  backgroundColor: \\\"#445160\\\",\\r\\n\\r\\n  /** Height */\\r\\n  height: 50,\\r\\n\\r\\n  /** Expansion Factor */\\r\\n  multiplier: 1.5\\r\\n};\\r\\n\\r\\nexport default ExpandingBar;\\r\\n\",\n  \"examples\": [{\n    \"name\": \"ExampleBar\",\n    \"description\": \"\",\n    \"code\": \"import React from \\\"react\\\";\\r\\nimport ExpandingBar from \\\"ps-react/ExpandingBar\\\";\\r\\nimport ForTesting from \\\"ps-react/ForTesting\\\";\\r\\nimport IxButtonMainFlat from \\\"ps-react/IxButtonMainFlat\\\";\\r\\n\\r\\nexport default function ExampleBar() {\\r\\n  return (\\r\\n    <>\\r\\n      <ExpandingBar startHeight={50} endHeight={150}>\\r\\n        <div style={{ height: \\\"auto\\\" }}>\\r\\n          <div\\r\\n            style={{\\r\\n              display: \\\"inline-block\\\",\\r\\n              marginLeft: \\\"10px\\\",\\r\\n              marginTop: \\\"0px\\\"\\r\\n            }}\\r\\n          >\\r\\n            <div>\\r\\n              <h1\\r\\n                style={{\\r\\n                  display: \\\"inline-block\\\",\\r\\n                  marginBottom: \\\"0px\\\",\\r\\n                  color: \\\"white\\\",\\r\\n                  paddingBottom: 0\\r\\n                }}\\r\\n              >\\r\\n                PART NAME\\r\\n              </h1>\\r\\n            </div>\\r\\n            <div>\\r\\n              <h2\\r\\n                style={{\\r\\n                  display: \\\"inline-block\\\",\\r\\n                  marginTop: \\\"0px\\\",\\r\\n                  color: \\\"white\\\",\\r\\n                  marginBottom: 10\\r\\n                }}\\r\\n              >\\r\\n                PART NUMBER\\r\\n              </h2>\\r\\n              <h2\\r\\n                style={{\\r\\n                  display: \\\"inline-block\\\",\\r\\n                  marginLeft: \\\"20px\\\",\\r\\n                  marginTop: \\\"0px\\\",\\r\\n                  color: \\\"white\\\",\\r\\n                  marginBottom: 10\\r\\n                }}\\r\\n              >\\r\\n                PART REVISION\\r\\n              </h2>\\r\\n            </div>\\r\\n            <div>\\r\\n              <div style={{ display: \\\"inline-block\\\" }}>\\r\\n                <IxButtonMainFlat\\r\\n                  type=\\\"small\\\"\\r\\n                  backgroundColor=\\\"green\\\"\\r\\n                  label=\\\"NEXT\\\"\\r\\n                />\\r\\n              </div>\\r\\n              <div\\r\\n                style={{\\r\\n                  display: \\\"inline-block\\\",\\r\\n                  marginLeft: 25\\r\\n                }}\\r\\n              >\\r\\n                <label\\r\\n                  class=\\\"container\\\"\\r\\n                  style={{ fontColor: \\\"white\\\", marginRight: 25 }}\\r\\n                >\\r\\n                  Part\\r\\n                  <input type=\\\"radio\\\" checked=\\\"checked\\\" name=\\\"Part\\\" />\\r\\n                  <span class=\\\"checkmark\\\" />\\r\\n                </label>\\r\\n                <label class=\\\"container\\\" style={{ fontColor: \\\"white\\\" }}>\\r\\n                  Assembly\\r\\n                  <input type=\\\"radio\\\" name=\\\"Assembly\\\" />\\r\\n                  <span class=\\\"checkmark\\\" />\\r\\n                </label>\\r\\n              </div>\\r\\n            </div>\\r\\n          </div>\\r\\n          <div />\\r\\n        </div>\\r\\n      </ExpandingBar>\\r\\n    </>\\r\\n  );\\r\\n}\\r\\n\"\n  }, {\n    \"name\": \"IxBarExample\",\n    \"description\": \"\",\n    \"code\": \"import React from \\\"react\\\";\\r\\nimport ExpandingBar from \\\"ps-react/ExpandingBar\\\";\\r\\nimport ClickToEnterTextField from \\\"ps-react/ClickToEnterTextField\\\";\\r\\n\\r\\nexport default function ExampleBar() {\\r\\n  function onSubmit(event) {\\r\\n    this.setState({ isEntered: false });\\r\\n    this.setState({ isHover: false });\\r\\n    /** make any additonal calls or logic when submitting here, e.g. updating the DB */\\r\\n    event.preventDefault();\\r\\n  }\\r\\n\\r\\n  function onChange(event) {\\r\\n    this.setState({ value: event.target.value });\\r\\n    /** make any additional calls or logic when submitting here */\\r\\n  }\\r\\n\\r\\n  return (\\r\\n    <ExpandingBar duration={500} startHeight=\\\"auto\\\" endHeight=\\\"auto\\\">\\r\\n      <div style={{ height: \\\"auto\\\", display: \\\"flex\\\", flexDirection: \\\"row\\\" }}>\\r\\n        <div style={{ display: \\\"flex\\\", alignItems: \\\"center\\\" }}>\\r\\n          <i className={\\\"fa fa-cubes fa-3x\\\"} style={{ color: \\\"#0d47a1\\\" }} />\\r\\n        </div>\\r\\n        <div\\r\\n          style={{\\r\\n            display: \\\"inline-block\\\",\\r\\n            marginLeft: \\\"10px\\\",\\r\\n            marginTop: \\\"0px\\\"\\r\\n          }}\\r\\n        >\\r\\n          <ClickToEnterTextField\\r\\n            leftMargin=\\\"10px\\\"\\r\\n            topMargin=\\\"10px\\\"\\r\\n            color=\\\"white\\\"\\r\\n            name=\\\"partname\\\"\\r\\n            onChange={onChange}\\r\\n            onSubmit={onSubmit}\\r\\n            value=\\\"BLACK STEEL MULTI TOOL\\\"\\r\\n          />\\r\\n          <div>\\r\\n            <ClickToEnterTextField\\r\\n              bottomMargin=\\\"10px\\\"\\r\\n              topMargin=\\\"5px\\\"\\r\\n              leftMargin=\\\"10px\\\"\\r\\n              color=\\\"white\\\"\\r\\n              name=\\\"partnum\\\"\\r\\n              onChange={onChange}\\r\\n              onSubmit={onSubmit}\\r\\n              value=\\\"PRT-2322\\\"\\r\\n            />\\r\\n            <ClickToEnterTextField\\r\\n              name=\\\"partrev\\\"\\r\\n              onChange={onChange}\\r\\n              onSubmit={onSubmit}\\r\\n              bottomMargin=\\\"10px\\\"\\r\\n              topMargin=\\\"5px\\\"\\r\\n              leftMargin=\\\"50px\\\"\\r\\n              value=\\\"B3\\\"\\r\\n              color=\\\"white\\\"\\r\\n            />\\r\\n          </div>\\r\\n        </div>\\r\\n      </div>\\r\\n    </ExpandingBar>\\r\\n  );\\r\\n}\\r\\n\"\n  }]\n}, {\n  \"name\": \"EyeIcon\",\n  \"description\": \"SVG Eye Icon\",\n  \"code\": \"import React from \\\"react\\\";\\r\\n\\r\\n/** SVG Eye Icon */\\r\\nfunction EyeIcon() {\\r\\n  // Attribution: Fabian Alexis at https://commons.wikimedia.org/wiki/File:Antu_view-preview.svg\\r\\n  return (\\r\\n    <svg\\r\\n      width=\\\"25\\\"\\r\\n      height=\\\"25\\\"\\r\\n      xmlns=\\\"http://www.w3.org/2000/svg\\\"\\r\\n      viewBox=\\\"0 0 22 22\\\"\\r\\n    >\\r\\n      <g transform=\\\"matrix(.02146 0 0 .02146 1 1)\\\" fill=\\\"gray\\\">\\r\\n        <path d=\\\"m466.07 161.53c-205.6 0-382.8 121.2-464.2 296.1-2.5 5.3-2.5 11.5 0 16.9 81.4 174.9 258.6 296.1 464.2 296.1 205.6 0 382.8-121.2 464.2-296.1 2.5-5.3 2.5-11.5 0-16.9-81.4-174.9-258.6-296.1-464.2-296.1m0 514.7c-116.1 0-210.1-94.1-210.1-210.1 0-116.1 94.1-210.1 210.1-210.1 116.1 0 210.1 94.1 210.1 210.1 0 116-94.1 210.1-210.1 210.1\\\" />\\r\\n        <circle cx=\\\"466.08\\\" cy=\\\"466.02\\\" r=\\\"134.5\\\" />\\r\\n      </g>\\r\\n    </svg>\\r\\n  );\\r\\n}\\r\\n\\r\\nexport default EyeIcon;\\r\\n\",\n  \"examples\": [{\n    \"name\": \"ExampleEye\",\n    \"description\": \"\",\n    \"code\": \"import React from \\\"react\\\";\\r\\nimport EyeIcon from \\\"ps-react/EyeIcon\\\";\\r\\n\\r\\nexport default function EyeIconExample() {\\r\\n  return <EyeIcon />;\\r\\n}\\r\\n\"\n  }]\n}, {\n  \"name\": \"ForTesting\",\n  \"description\": \"\",\n  \"code\": \"import React from \\\"react\\\";\\r\\n\\r\\nclass ForTesting extends React.Component {\\r\\n  constructor(props) {\\r\\n    super(props);\\r\\n    this.state = { tog: false };\\r\\n  }\\r\\n\\r\\n  onClick() {\\r\\n    this.setState({ tog: !this.state.tog });\\r\\n  }\\r\\n\\r\\n  render() {\\r\\n    return (\\r\\n      <div>\\r\\n        <button onClick={this.onClick.bind(this)}>TOGGLE</button>\\r\\n        {this.state.tog ? <h1>FOUND ME!</h1> : <></>}\\r\\n      </div>\\r\\n    );\\r\\n  }\\r\\n}\\r\\n\\r\\nexport default ForTesting;\\r\\n\",\n  \"examples\": []\n}, {\n  \"name\": \"HelloWorld\",\n  \"description\": \"This is the Hello World Component.\",\n  \"props\": {\n    \"message\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": false,\n      \"description\": \"Message to display\",\n      \"defaultValue\": {\n        \"value\": \"\\\"World\\\"\",\n        \"computed\": false\n      }\n    }\n  },\n  \"code\": \"import React from \\\"react\\\";\\r\\nimport PropTypes from \\\"prop-types\\\";\\r\\n\\r\\n/** This is the Hello World Component. */\\r\\nconst HelloWorld = ({ message }) => {\\r\\n  return <div>Hello {message} </div>;\\r\\n};\\r\\n\\r\\nHelloWorld.propTypes = {\\r\\n  /** Message to display */\\r\\n  message: PropTypes.string\\r\\n};\\r\\n\\r\\nHelloWorld.defaultProps = {\\r\\n  message: \\\"World\\\"\\r\\n};\\r\\n\\r\\nexport default HelloWorld;\\r\\n\",\n  \"examples\": [{\n    \"name\": \"ExampleHelloWorld\",\n    \"description\": \"Custom Message\",\n    \"code\": \"import React from \\\"react\\\";\\r\\nimport HelloWorld from \\\"ps-react/HelloWorld\\\";\\r\\n\\r\\n/** Custom Message */\\r\\nexport default function ExampleHelloWorld() {\\r\\n  return <HelloWorld message=\\\"PluralSight Viewers!\\\" />;\\r\\n}\\r\\n\"\n  }]\n}, {\n  \"name\": \"IxButton\",\n  \"description\": \"\",\n  \"props\": {\n    \"color\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": false,\n      \"description\": \"Button Color\",\n      \"defaultValue\": {\n        \"value\": \"\\\"#0d47a1\\\"\",\n        \"computed\": false\n      }\n    },\n    \"backgroundColor\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": false,\n      \"description\": \"Button Background Color\",\n      \"defaultValue\": {\n        \"value\": \"\\\"transparent\\\"\",\n        \"computed\": false\n      }\n    },\n    \"iconHoverColor\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": false,\n      \"description\": \"Icon Hover Color\",\n      \"defaultValue\": {\n        \"value\": \"\\\"white\\\"\",\n        \"computed\": false\n      }\n    },\n    \"size\": {\n      \"type\": {\n        \"name\": \"number\"\n      },\n      \"required\": false,\n      \"description\": \"Width and Height\",\n      \"defaultValue\": {\n        \"value\": \"45\",\n        \"computed\": false\n      }\n    },\n    \"shadow\": {\n      \"type\": {\n        \"name\": \"bool\"\n      },\n      \"required\": false,\n      \"description\": \"Is there a Shadow?\",\n      \"defaultValue\": {\n        \"value\": \"true\",\n        \"computed\": false\n      }\n    },\n    \"handleClick\": {\n      \"type\": {\n        \"name\": \"func\"\n      },\n      \"required\": false,\n      \"description\": \"What to do when Clicking\",\n      \"defaultValue\": {\n        \"value\": \"() => {\\r\\n  console.log(\\\"Hello World!\\\");\\r\\n}\",\n        \"computed\": false\n      }\n    },\n    \"shape\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": false,\n      \"description\": \"Shape of the Button\"\n    },\n    \"icon\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": false,\n      \"description\": \"Icon to Display\",\n      \"defaultValue\": {\n        \"value\": \"\\\"fa fa-paw\\\"\",\n        \"computed\": false\n      }\n    }\n  },\n  \"code\": \"import React from \\\"react\\\";\\r\\nimport PropTypes from \\\"prop-types\\\";\\r\\nimport { faHome } from \\\"@fortawesome/free-solid-svg-icons\\\";\\r\\nimport { FontAwesomeIcon } from \\\"react-fontawesome\\\";\\r\\nimport Ellipses from \\\"../Ellipses\\\";\\r\\n\\r\\nconst sayHello = () => {\\r\\n  console.log(\\\"Hello World!\\\");\\r\\n};\\r\\n\\r\\nclass IxButton extends React.Component {\\r\\n  constructor(props) {\\r\\n    super(props);\\r\\n    this.state = { hover: false };\\r\\n  }\\r\\n\\r\\n  mouseOver() {\\r\\n    this.setState({ hover: true });\\r\\n  }\\r\\n\\r\\n  mouseOut() {\\r\\n    this.setState({ hover: false });\\r\\n  }\\r\\n\\r\\n  render() {\\r\\n    const {\\r\\n      color,\\r\\n      backgroundColor,\\r\\n      iconHoverColor,\\r\\n      size,\\r\\n      shadow,\\r\\n      handleClick,\\r\\n      shape,\\r\\n      icon,\\r\\n      dropdown\\r\\n    } = this.props;\\r\\n    return (\\r\\n      <div id=\\\"button box\\\">\\r\\n        <div\\r\\n          style={{\\r\\n            backgroundColor: this.state.hover ? color : backgroundColor,\\r\\n            width: size,\\r\\n            height: size,\\r\\n            borderRadius: shape === \\\"circle\\\" ? \\\"50%\\\" : \\\"10%\\\",\\r\\n            border: `3px solid ${color}`,\\r\\n            display: \\\"inline-block\\\",\\r\\n            boxShadow:\\r\\n              shadow &&\\r\\n              this.state.hover &&\\r\\n              \\\"2px 2px 4px 0px rgba(0, 0, 0, 0.47)\\\",\\r\\n            margin: \\\"5px 5px 5px 5px\\\",\\r\\n            cursor: this.state.hover && \\\"pointer\\\"\\r\\n          }}\\r\\n          onMouseOut={() => this.mouseOut()}\\r\\n          onMouseOver={() => this.mouseOver()}\\r\\n          onClick={handleClick}\\r\\n        >\\r\\n          <div\\r\\n            style={{\\r\\n              display: \\\"flex\\\",\\r\\n              justifyContent: \\\"center\\\",\\r\\n              height: \\\"100%\\\",\\r\\n              width: \\\"100%\\\"\\r\\n            }}\\r\\n          >\\r\\n            <i\\r\\n              className={icon}\\r\\n              style={{\\r\\n                color: this.state.hover ? iconHoverColor : color,\\r\\n                margin: \\\"auto auto\\\",\\r\\n                float: \\\"none\\\"\\r\\n              }}\\r\\n            />\\r\\n          </div>\\r\\n        </div>\\r\\n        <div\\r\\n          style={{\\r\\n            display: \\\"inline-block\\\",\\r\\n            margin: `0px 0px ${shape === \\\"circle\\\" ? \\\"-4px\\\" : \\\"5px\\\"} -5px`\\r\\n          }}\\r\\n        >\\r\\n          {dropdown && (\\r\\n            <Ellipses style={{ position: \\\"absolute\\\" }} direction=\\\"column\\\" />\\r\\n          )}\\r\\n        </div>\\r\\n      </div>\\r\\n    );\\r\\n  }\\r\\n}\\r\\n\\r\\nIxButton.propTypes = {\\r\\n  /** Button Color */\\r\\n  color: PropTypes.string,\\r\\n\\r\\n  /** Button Background Color */\\r\\n  backgroundColor: PropTypes.string,\\r\\n\\r\\n  /** Icon Hover Color */\\r\\n  iconHoverColor: PropTypes.string,\\r\\n\\r\\n  /** Width and Height */\\r\\n  size: PropTypes.number,\\r\\n\\r\\n  /** Is there a Shadow? */\\r\\n  shadow: PropTypes.bool,\\r\\n\\r\\n  /** What to do when Clicking */\\r\\n  handleClick: PropTypes.func.isRequired,\\r\\n\\r\\n  /** Shape of the Button */\\r\\n  shape: PropTypes.string,\\r\\n\\r\\n  /** Icon to Display */\\r\\n  icon: PropTypes.string\\r\\n};\\r\\n\\r\\nIxButton.defaultProps = {\\r\\n  /** Blue is my Favorite Color! */\\r\\n  color: \\\"#0d47a1\\\",\\r\\n\\r\\n  /** Transparent by default */\\r\\n  backgroundColor: \\\"transparent\\\",\\r\\n\\r\\n  /** Icon White on Hover by Default */\\r\\n  iconHoverColor: \\\"white\\\",\\r\\n\\r\\n  /** 25px Circle */\\r\\n  size: 45,\\r\\n\\r\\n  /** Show Shadow by Default */\\r\\n  shadow: true,\\r\\n\\r\\n  /** By Default prints Hello World to Console */\\r\\n  handleClick: sayHello,\\r\\n\\r\\n  /** icon */\\r\\n  icon: \\\"fa fa-paw\\\"\\r\\n};\\r\\n\\r\\nexport default IxButton;\\r\\n\",\n  \"examples\": [{\n    \"name\": \"ExampleButton\",\n    \"description\": \"\",\n    \"code\": \"import React from \\\"react\\\";\\r\\nimport IxButton from \\\"ps-react/IxButton\\\";\\r\\n\\r\\nexport default function ExampleButton() {\\r\\n  const helloExample = () => {\\r\\n    console.log(\\\"Hello Example World!\\\");\\r\\n  };\\r\\n  return <IxButton handleClick={helloExample} />;\\r\\n}\\r\\n\"\n  }]\n}, {\n  \"name\": \"IxButtonMainFlat\",\n  \"description\": \"\",\n  \"props\": {\n    \"type\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": false,\n      \"description\": \"\",\n      \"defaultValue\": {\n        \"value\": \"\\\"normal\\\"\",\n        \"computed\": false\n      }\n    },\n    \"backgroundColor\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": false,\n      \"description\": \"\",\n      \"defaultValue\": {\n        \"value\": \"\\\"#0d47a1\\\"\",\n        \"computed\": false\n      }\n    },\n    \"textColor\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": false,\n      \"description\": \"\",\n      \"defaultValue\": {\n        \"value\": \"\\\"white\\\"\",\n        \"computed\": false\n      }\n    },\n    \"label\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": false,\n      \"description\": \"\",\n      \"defaultValue\": {\n        \"value\": \"\\\"EXAMPLE\\\"\",\n        \"computed\": false\n      }\n    },\n    \"icon\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": false,\n      \"description\": \"\",\n      \"defaultValue\": {\n        \"value\": \"\\\"fa fa-paw\\\"\",\n        \"computed\": false\n      }\n    },\n    \"handleClick\": {\n      \"type\": {\n        \"name\": \"func\"\n      },\n      \"required\": false,\n      \"description\": \"\",\n      \"defaultValue\": {\n        \"value\": \"() => {\\r\\n  console.log(\\\"Hello World\\\");\\r\\n}\",\n        \"computed\": false\n      }\n    }\n  },\n  \"code\": \"import React from \\\"react\\\";\\r\\nimport PropTypes from \\\"prop-types\\\";\\r\\n\\r\\nconst handleClick = () => {\\r\\n  console.log(\\\"Hello World\\\");\\r\\n};\\r\\n\\r\\nclass IxButtonMainFlat extends React.Component {\\r\\n  constructor(props) {\\r\\n    super(props);\\r\\n    this.state = { hover: false };\\r\\n  }\\r\\n\\r\\n  mouseOver() {\\r\\n    this.setState({ hover: true });\\r\\n  }\\r\\n\\r\\n  mouseOut() {\\r\\n    this.setState({ hover: false });\\r\\n  }\\r\\n\\r\\n  getTypeStyle(type) {\\r\\n    switch (type) {\\r\\n      case \\\"small\\\":\\r\\n        return {\\r\\n          lineHeight: \\\"25px\\\",\\r\\n          height: 25,\\r\\n          width: 100,\\r\\n          borderRadius: \\\"5px 5px 5px 5px\\\",\\r\\n          fontSize: 10\\r\\n        };\\r\\n      case \\\"medium\\\":\\r\\n        return {\\r\\n          height: 35,\\r\\n          width: 150,\\r\\n          lineHeight: \\\"35px\\\",\\r\\n          borderRadius: \\\"7px 7px 7px 7px\\\",\\r\\n          fontSize: 12\\r\\n        };\\r\\n      case \\\"big\\\":\\r\\n        return {\\r\\n          lineHeight: \\\"45px\\\",\\r\\n          height: 45,\\r\\n          width: 200,\\r\\n          borderRadius: \\\"10px 10px 10px 10px\\\",\\r\\n          fontSize: 14\\r\\n        };\\r\\n      default:\\r\\n        return {\\r\\n          lineHeight: \\\"35px\\\",\\r\\n          height: 35,\\r\\n          width: 150,\\r\\n          borderRadius: \\\"7px 7px 7px 7px\\\",\\r\\n          fontSize: 12\\r\\n        };\\r\\n    }\\r\\n  }\\r\\n\\r\\n  getIconSize(type) {\\r\\n    switch (type) {\\r\\n      case \\\"small\\\":\\r\\n        return 12;\\r\\n      case \\\"medium\\\":\\r\\n        return 16;\\r\\n      case \\\"big\\\":\\r\\n        return 20;\\r\\n      default:\\r\\n        return 16;\\r\\n    }\\r\\n  }\\r\\n\\r\\n  render() {\\r\\n    const {\\r\\n      type,\\r\\n      backgroundColor,\\r\\n      textColor,\\r\\n      handleClick,\\r\\n      label,\\r\\n      icon\\r\\n    } = this.props;\\r\\n    return (\\r\\n      <div\\r\\n        style={{\\r\\n          ...this.getTypeStyle(type),\\r\\n          backgroundColor: backgroundColor,\\r\\n          boxShadow: this.state.hover && \\\"2px 2px 4px 0px rgba(0, 0, 0, 0.47)\\\",\\r\\n          cursor: this.state.hover && \\\"pointer\\\",\\r\\n          margin: \\\"5px 5px 5px 5px\\\"\\r\\n        }}\\r\\n        onMouseOut={() => this.mouseOut()}\\r\\n        onMouseOver={() => this.mouseOver()}\\r\\n        onClick={handleClick}\\r\\n      >\\r\\n        <i\\r\\n          className={icon}\\r\\n          style={{\\r\\n            color: textColor,\\r\\n            position: \\\"absolute\\\",\\r\\n            marginLeft: \\\"0.5em\\\",\\r\\n            marginTop: \\\"0.5em\\\",\\r\\n            fontSize: this.getIconSize(type)\\r\\n          }}\\r\\n        />\\r\\n        <div\\r\\n          style={{\\r\\n            display: \\\"inline-block\\\",\\r\\n            marginLeft: \\\"50%\\\",\\r\\n            WebkitTransform: \\\"translateX(-50%)\\\"\\r\\n          }}\\r\\n        >\\r\\n          <span\\r\\n            style={{\\r\\n              color: textColor,\\r\\n              fontWeight: \\\"bold\\\"\\r\\n            }}\\r\\n          >\\r\\n            {label}\\r\\n          </span>\\r\\n        </div>\\r\\n      </div>\\r\\n    );\\r\\n  }\\r\\n}\\r\\n\\r\\nIxButtonMainFlat.propTypes = {\\r\\n  /* small, medium, or big */\\r\\n  type: PropTypes.string,\\r\\n\\r\\n  /* background color of the button */\\r\\n  backgroundColor: PropTypes.string,\\r\\n\\r\\n  /* text and icon color of the button */\\r\\n  textColor: PropTypes.string,\\r\\n\\r\\n  /* button text */\\r\\n  label: PropTypes.string,\\r\\n\\r\\n  /* icon to be used */\\r\\n  icon: PropTypes.string,\\r\\n\\r\\n  /* function when clicked */\\r\\n  handleClick: PropTypes.func\\r\\n};\\r\\n\\r\\nIxButtonMainFlat.defaultProps = {\\r\\n  /* normal size */\\r\\n  type: \\\"normal\\\",\\r\\n\\r\\n  /* blue color */\\r\\n  backgroundColor: \\\"#0d47a1\\\",\\r\\n\\r\\n  /* white text */\\r\\n  textColor: \\\"white\\\",\\r\\n\\r\\n  /* sample label */\\r\\n  label: \\\"EXAMPLE\\\",\\r\\n\\r\\n  /* paw icon placeholder */\\r\\n  icon: \\\"fa fa-paw\\\",\\r\\n\\r\\n  /* uses the same onClick function that prints Hello World to console */\\r\\n  handleClick: handleClick\\r\\n};\\r\\n\\r\\nexport default IxButtonMainFlat;\\r\\n\",\n  \"examples\": [{\n    \"name\": \"IxButtonMainFlatExample\",\n    \"description\": \"\",\n    \"code\": \"import React from \\\"react\\\";\\r\\nimport IxButtonMainFlat from \\\"ps-react/IxButtonMainFlat\\\";\\r\\n\\r\\nexport default function IxButtonMainFlatExample() {\\r\\n  const helloExample = () => {\\r\\n    console.log(\\\"Hello Example World!\\\");\\r\\n  };\\r\\n  return (\\r\\n    <>\\r\\n      <IxButtonMainFlat\\r\\n        type=\\\"small\\\"\\r\\n        handleClick={() => {\\r\\n          console.log(\\\"small\\\");\\r\\n        }}\\r\\n      />\\r\\n      <IxButtonMainFlat\\r\\n        type=\\\"medium\\\"\\r\\n        handleClick={() => {\\r\\n          console.log(\\\"med\\\");\\r\\n        }}\\r\\n      />\\r\\n      <IxButtonMainFlat\\r\\n        type=\\\"big\\\"\\r\\n        handleClick={() => {\\r\\n          console.log(\\\"big\\\");\\r\\n        }}\\r\\n      />\\r\\n    </>\\r\\n  );\\r\\n}\\r\\n\"\n  }]\n}, {\n  \"name\": \"IxButtonMulti\",\n  \"description\": \"\",\n  \"props\": {\n    \"children\": {\n      \"type\": {\n        \"name\": \"any\"\n      },\n      \"required\": false,\n      \"description\": \"The Buttons that Exist in the Dropdown Menu\"\n    },\n    \"shape\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": false,\n      \"description\": \"The Shape of the Main Button\",\n      \"defaultValue\": {\n        \"value\": \"\\\"square\\\"\",\n        \"computed\": false\n      }\n    },\n    \"color\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": false,\n      \"description\": \"Button Color\",\n      \"defaultValue\": {\n        \"value\": \"\\\"#0d47a1\\\"\",\n        \"computed\": false\n      }\n    }\n  },\n  \"code\": \"import React from \\\"react\\\";\\r\\nimport PropTypes from \\\"prop-types\\\";\\r\\nimport IxButton from \\\"../IxButton\\\";\\r\\nimport Ellipses from \\\"../Ellipses\\\";\\r\\n\\r\\nclass IxButtonMulti extends React.Component {\\r\\n  constructor(props) {\\r\\n    super(props);\\r\\n    this.state = { open: false };\\r\\n  }\\r\\n\\r\\n  onClick() {\\r\\n    this.setState({ open: !this.state.open });\\r\\n  }\\r\\n\\r\\n  // The button defined here will handle the opening/closing of the dropdown.\\r\\n  // The buttons within the dropdown will be defined in the example.\\r\\n  render() {\\r\\n    const { children, shape, backgroundColor, color } = this.props;\\r\\n    return (\\r\\n      <div style={{ zIndex: this.state.open ? 100 : 10, position: \\\"relative\\\" }}>\\r\\n        <IxButton\\r\\n          shape={shape}\\r\\n          backgroundColor={backgroundColor}\\r\\n          handleClick={this.onClick.bind(this)}\\r\\n          dropdown={true}\\r\\n        />\\r\\n        <div style={{ position: \\\"absolute\\\" }}>\\r\\n          {this.state.open && children}\\r\\n        </div>\\r\\n      </div>\\r\\n    );\\r\\n  }\\r\\n}\\r\\n\\r\\nIxButtonMulti.propTypes = {\\r\\n  /** The Buttons that Exist in the Dropdown Menu */\\r\\n  children: PropTypes.any,\\r\\n\\r\\n  /** The Shape of the Main Button */\\r\\n  shape: PropTypes.string,\\r\\n\\r\\n  /** Button Color */\\r\\n  color: PropTypes.string\\r\\n};\\r\\n\\r\\nIxButtonMulti.defaultProps = {\\r\\n  shape: \\\"square\\\",\\r\\n  color: \\\"#0d47a1\\\"\\r\\n};\\r\\n\\r\\nexport default IxButtonMulti;\\r\\n\",\n  \"examples\": [{\n    \"name\": \"ExampleButtonMultiCircle\",\n    \"description\": \"\",\n    \"code\": \"import React from \\\"react\\\";\\r\\nimport IxButton from \\\"ps-react/IxButton\\\";\\r\\nimport IxButtonMulti from \\\"ps-react/IxButtonMulti\\\";\\r\\n\\r\\nexport default function ExampleCirclesMulti() {\\r\\n  return (\\r\\n    <IxButtonMulti shape=\\\"circle\\\" backgroundColor=\\\"white\\\">\\r\\n      <IxButton shape=\\\"circle\\\" backgroundColor=\\\"white\\\" />\\r\\n      <IxButton shape=\\\"circle\\\" backgroundColor=\\\"white\\\" />\\r\\n      <IxButton shape=\\\"circle\\\" backgroundColor=\\\"white\\\" />\\r\\n    </IxButtonMulti>\\r\\n  );\\r\\n}\\r\\n\"\n  }, {\n    \"name\": \"ExampleIxButtonMulti\",\n    \"description\": \"\",\n    \"code\": \"import React from \\\"react\\\";\\r\\nimport IxButton from \\\"ps-react/IxButton\\\";\\r\\nimport IxButtonMulti from \\\"ps-react/IxButtonMulti\\\";\\r\\n\\r\\nexport default function ExampleCirclesMulti() {\\r\\n  return (\\r\\n    <IxButtonMulti>\\r\\n      <IxButton />\\r\\n      <IxButton />\\r\\n      <IxButton />\\r\\n    </IxButtonMulti>\\r\\n  );\\r\\n}\\r\\n\"\n  }]\n}, {\n  \"name\": \"Label\",\n  \"description\": \"Label with Required Field, Display, htmlFor, and block styling\",\n  \"props\": {\n    \"htmlFor\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": true,\n      \"description\": \"HTML ID for associated input\"\n    },\n    \"label\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": true,\n      \"description\": \"Label Text\"\n    },\n    \"required\": {\n      \"type\": {\n        \"name\": \"bool\"\n      },\n      \"required\": false,\n      \"description\": \"Display asterisk after label if true\"\n    }\n  },\n  \"code\": \"import React from \\\"react\\\";\\r\\nimport PropTypes from \\\"prop-types\\\";\\r\\n\\r\\n/** Label with Required Field, Display, htmlFor, and block styling */\\r\\n\\r\\nfunction Label({ htmlFor, label, required }) {\\r\\n  return (\\r\\n    <label style={{ display: \\\"block\\\" }} htmlFor={htmlFor}>\\r\\n      {label} {required && <span style={{ color: \\\"red\\\" }}> *</span>}\\r\\n    </label>\\r\\n  );\\r\\n}\\r\\n\\r\\nLabel.propTypes = {\\r\\n  /** HTML ID for associated input */\\r\\n  htmlFor: PropTypes.string.isRequired,\\r\\n\\r\\n  /** Label Text */\\r\\n  label: PropTypes.string.isRequired,\\r\\n\\r\\n  /** Display asterisk after label if true */\\r\\n  required: PropTypes.bool\\r\\n};\\r\\n\\r\\nLabel.defaultProps = {};\\r\\n\\r\\nexport default Label;\\r\\n\",\n  \"examples\": [{\n    \"name\": \"ExampleOptional\",\n    \"description\": \"Optional Label\",\n    \"code\": \"import React from \\\"react\\\";\\r\\nimport Label from \\\"ps-react/Label\\\";\\r\\n\\r\\n/** Optional Label */\\r\\nexport default function ExampleOptional() {\\r\\n  return <Label htmlFor=\\\"test\\\" label=\\\"test\\\" />;\\r\\n}\\r\\n\"\n  }, {\n    \"name\": \"ExampleRequired\",\n    \"description\": \"Required Label\",\n    \"code\": \"import React from \\\"react\\\";\\r\\nimport Label from \\\"ps-react/Label\\\";\\r\\n\\r\\n/** Required Label */\\r\\nexport default function ExampleRequired() {\\r\\n  return <Label htmlFor=\\\"test\\\" label=\\\"required\\\" required />;\\r\\n}\\r\\n\"\n  }]\n}, {\n  \"name\": \"PasswordInput\",\n  \"description\": \"Password Input with Integrated Label, quality tips, and show password toggle\",\n  \"props\": {\n    \"htmlId\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": true,\n      \"description\": \"Unique HTML ID. Used for tying label to HTML input. Handy hook for automated testing.\"\n    },\n    \"name\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": true,\n      \"description\": \"Input name. Recommend setting this to match object's property so a single change handler can be used by convention.\"\n    },\n    \"value\": {\n      \"type\": {\n        \"name\": \"any\"\n      },\n      \"required\": false,\n      \"description\": \"Password value\"\n    },\n    \"label\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": false,\n      \"description\": \"Input label\",\n      \"defaultValue\": {\n        \"value\": \"\\\"Password\\\"\",\n        \"computed\": false\n      }\n    },\n    \"onChange\": {\n      \"type\": {\n        \"name\": \"func\"\n      },\n      \"required\": true,\n      \"description\": \"Function called when password input value changes\"\n    },\n    \"maxLength\": {\n      \"type\": {\n        \"name\": \"number\"\n      },\n      \"required\": false,\n      \"description\": \"Max password length accepted\",\n      \"defaultValue\": {\n        \"value\": \"50\",\n        \"computed\": false\n      }\n    },\n    \"placeholder\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": false,\n      \"description\": \"Placeholder displayed when no password is entered\"\n    },\n    \"showVisibilityToggle\": {\n      \"type\": {\n        \"name\": \"bool\"\n      },\n      \"required\": false,\n      \"description\": \"Set to true to show the toggle for displaying the currently entered password\",\n      \"defaultValue\": {\n        \"value\": \"false\",\n        \"computed\": false\n      }\n    },\n    \"quality\": {\n      \"type\": {\n        \"name\": \"number\"\n      },\n      \"required\": false,\n      \"description\": \"Display password quality visually via ProgressBar, accepts a number between 0 and 100\"\n    },\n    \"error\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": false,\n      \"description\": \"Validation error to display\"\n    }\n  },\n  \"code\": \"import React from \\\"react\\\";\\r\\nimport Label from \\\"../Label\\\";\\r\\nimport TextInput from \\\"../TextInput\\\";\\r\\nimport PropTypes from \\\"prop-types\\\";\\r\\nimport EyeIcon from \\\"../EyeIcon\\\";\\r\\nimport ProgressBar from \\\"../ProgressBar\\\";\\r\\n\\r\\n/** Password Input with Integrated Label, quality tips, and show password toggle */\\r\\nclass PasswordInput extends React.Component {\\r\\n  constructor(props) {\\r\\n    super(props);\\r\\n    this.state = {\\r\\n      showPassword: false\\r\\n    };\\r\\n  }\\r\\n\\r\\n  toggleShowPassword = event => {\\r\\n    this.setState(prevState => {\\r\\n      return { showPassword: !prevState.showPassword };\\r\\n    });\\r\\n    if (event) event.preventDefault();\\r\\n  };\\r\\n\\r\\n  render() {\\r\\n    const {\\r\\n      htmlId,\\r\\n      value,\\r\\n      label,\\r\\n      error,\\r\\n      onChange,\\r\\n      placeholder,\\r\\n      maxLength,\\r\\n      showVisibilityToggle,\\r\\n      quality,\\r\\n      ...props\\r\\n    } = this.props;\\r\\n    const { showPassword } = this.state;\\r\\n\\r\\n    return (\\r\\n      <TextInput\\r\\n        htmlId={htmlId}\\r\\n        label={label}\\r\\n        placeholder={placeholder}\\r\\n        type={showPassword ? \\\"text\\\" : \\\"password\\\"}\\r\\n        onChange={onChange}\\r\\n        value={value}\\r\\n        maxLength={maxLength}\\r\\n        error={error}\\r\\n        required\\r\\n        {...props}\\r\\n      >\\r\\n        {showVisibilityToggle && (\\r\\n          <a\\r\\n            href=\\\"#\\\"\\r\\n            onClick={this.toggleShowPassword}\\r\\n            style={{ marginLeft: 5 }}\\r\\n          >\\r\\n            <EyeIcon />\\r\\n          </a>\\r\\n        )}\\r\\n        {value.length > 0 && quality && (\\r\\n          <ProgressBar percent={quality} width={130} />\\r\\n        )}\\r\\n      </TextInput>\\r\\n    );\\r\\n  }\\r\\n}\\r\\n\\r\\nPasswordInput.propTypes = {\\r\\n  /** Unique HTML ID. Used for tying label to HTML input. Handy hook for automated testing. */\\r\\n  htmlId: PropTypes.string.isRequired,\\r\\n\\r\\n  /** Input name. Recommend setting this to match object's property so a single change handler can be used by convention.*/\\r\\n  name: PropTypes.string.isRequired,\\r\\n\\r\\n  /** Password value */\\r\\n  value: PropTypes.any,\\r\\n\\r\\n  /** Input label */\\r\\n  label: PropTypes.string,\\r\\n\\r\\n  /** Function called when password input value changes */\\r\\n  onChange: PropTypes.func.isRequired,\\r\\n\\r\\n  /** Max password length accepted */\\r\\n  maxLength: PropTypes.number,\\r\\n\\r\\n  /** Placeholder displayed when no password is entered */\\r\\n  placeholder: PropTypes.string,\\r\\n\\r\\n  /** Set to true to show the toggle for displaying the currently entered password */\\r\\n  showVisibilityToggle: PropTypes.bool,\\r\\n\\r\\n  /** Display password quality visually via ProgressBar, accepts a number between 0 and 100 */\\r\\n  quality: PropTypes.number,\\r\\n\\r\\n  /** Validation error to display */\\r\\n  error: PropTypes.string\\r\\n};\\r\\n\\r\\nPasswordInput.defaultProps = {\\r\\n  maxLength: 50,\\r\\n  showVisibilityToggle: false,\\r\\n  label: \\\"Password\\\"\\r\\n};\\r\\n\\r\\nexport default PasswordInput;\\r\\n\",\n  \"examples\": [{\n    \"name\": \"ExampleAllFeatures\",\n    \"description\": \"All features enabled\",\n    \"code\": \"import React from \\\"react\\\";\\r\\nimport PasswordInput from \\\"ps-react/PasswordInput\\\";\\r\\n\\r\\n/** All features enabled */\\r\\nclass ExampleAllFeatures extends React.Component {\\r\\n  constructor(props) {\\r\\n    super(props);\\r\\n\\r\\n    this.state = {\\r\\n      password: \\\"\\\"\\r\\n    };\\r\\n  }\\r\\n\\r\\n  getQuality() {\\r\\n    const length = this.state.password.length;\\r\\n    return length > 10 ? 100 : length * 10;\\r\\n  }\\r\\n\\r\\n  render() {\\r\\n    return (\\r\\n      <div>\\r\\n        <PasswordInput\\r\\n          htmlId=\\\"password-input-example-all-features\\\"\\r\\n          name=\\\"password\\\"\\r\\n          onChange={event => this.setState({ password: event.target.value })}\\r\\n          value={this.state.password}\\r\\n          minLength={8}\\r\\n          placeholder=\\\"Enter password\\\"\\r\\n          showVisibilityToggle\\r\\n          quality={this.getQuality()}\\r\\n          {...this.props}\\r\\n        />\\r\\n      </div>\\r\\n    );\\r\\n  }\\r\\n}\\r\\n\\r\\nexport default ExampleAllFeatures;\\r\\n\"\n  }]\n}, {\n  \"name\": \"ProgressBar\",\n  \"description\": \"\",\n  \"props\": {\n    \"percent\": {\n      \"type\": {\n        \"name\": \"number\"\n      },\n      \"required\": true,\n      \"description\": \"Percent of progress completed\"\n    },\n    \"width\": {\n      \"type\": {\n        \"name\": \"number\"\n      },\n      \"required\": true,\n      \"description\": \"Bar Width\"\n    },\n    \"height\": {\n      \"type\": {\n        \"name\": \"number\"\n      },\n      \"required\": false,\n      \"description\": \"Bar Height\",\n      \"defaultValue\": {\n        \"value\": \"5\",\n        \"computed\": false\n      }\n    }\n  },\n  \"code\": \"import React from \\\"react\\\";\\r\\nimport PropTypes from \\\"prop-types\\\";\\r\\n\\r\\nconst borderStyle = {\\r\\n  border: `solid 1px #efefef`\\r\\n};\\r\\n\\r\\nclass ProgressBar extends React.Component {\\r\\n  getColor = percent => {\\r\\n    if (this.props.percent === 100) return \\\"green\\\";\\r\\n    return this.props.percent >= 50 ? \\\"lightgreen\\\" : \\\"red\\\";\\r\\n  };\\r\\n\\r\\n  getWidthAsPercentOfTotalWidth = () => {\\r\\n    return parseInt(this.props.width * (this.props.percent / 100), 10);\\r\\n  };\\r\\n\\r\\n  render() {\\r\\n    const { percent, width, height } = this.props;\\r\\n    return (\\r\\n      <div style={{ ...borderStyle, width: width }}>\\r\\n        <div\\r\\n          style={{\\r\\n            width: this.getWidthAsPercentOfTotalWidth(),\\r\\n            height,\\r\\n            backgroundColor: this.getColor(percent)\\r\\n          }}\\r\\n        />\\r\\n      </div>\\r\\n    );\\r\\n  }\\r\\n}\\r\\n\\r\\nProgressBar.propTypes = {\\r\\n  /** Percent of progress completed */\\r\\n  percent: PropTypes.number.isRequired,\\r\\n\\r\\n  /** Bar Width */\\r\\n  width: PropTypes.number.isRequired,\\r\\n\\r\\n  /** Bar Height */\\r\\n  height: PropTypes.number\\r\\n};\\r\\n\\r\\n// Declare Default Props\\r\\nProgressBar.defaultProps = {\\r\\n  height: 5\\r\\n};\\r\\n\\r\\nexport default ProgressBar;\\r\\n\",\n  \"examples\": [{\n    \"name\": \"Example100Percent\",\n    \"description\": \"100% Progress\",\n    \"code\": \"import React from \\\"react\\\";\\r\\nimport ProgressBar from \\\"ps-react/ProgressBar\\\";\\r\\n\\r\\n/** 100% Progress */\\r\\nexport default function Example10Percent() {\\r\\n  return <ProgressBar percent={100} width={150} />;\\r\\n}\\r\\n\"\n  }, {\n    \"name\": \"Example10Percent\",\n    \"description\": \"10% Progress\",\n    \"code\": \"import React from \\\"react\\\";\\r\\nimport ProgressBar from \\\"ps-react/ProgressBar\\\";\\r\\n\\r\\n/** 10% Progress */\\r\\nexport default function Example10Percent() {\\r\\n  return <ProgressBar percent={10} width={150} />;\\r\\n}\\r\\n\"\n  }, {\n    \"name\": \"Example50Percent\",\n    \"description\": \"50% Progress\",\n    \"code\": \"import React from \\\"react\\\";\\r\\nimport ProgressBar from \\\"ps-react/ProgressBar\\\";\\r\\n\\r\\n/** 50% Progress */\\r\\nexport default function Example10Percent() {\\r\\n  return <ProgressBar percent={50} width={150} />;\\r\\n}\\r\\n\"\n  }]\n}, {\n  \"name\": \"RegistrationForm\",\n  \"description\": \"Registration form with Built-In Validation\",\n  \"props\": {\n    \"confirmationMessage\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": false,\n      \"description\": \"Message displayed on success\",\n      \"defaultValue\": {\n        \"value\": \"\\\"Thanks for registering!\\\"\",\n        \"computed\": false\n      }\n    },\n    \"onSubmit\": {\n      \"type\": {\n        \"name\": \"func\"\n      },\n      \"required\": true,\n      \"description\": \"Called when form is submitted\"\n    },\n    \"minPasswordLength\": {\n      \"type\": {\n        \"name\": \"number\"\n      },\n      \"required\": false,\n      \"description\": \"Minimum Password Length\",\n      \"defaultValue\": {\n        \"value\": \"8\",\n        \"computed\": false\n      }\n    }\n  },\n  \"code\": \"import React from \\\"react\\\";\\r\\nimport PropTypes from \\\"prop-types\\\";\\r\\nimport TextInput from \\\"../TextInput\\\";\\r\\nimport PasswordInput from \\\"../PasswordInput\\\";\\r\\n\\r\\n/** Registration form with Built-In Validation */\\r\\nclass RegistrationForm extends React.Component {\\r\\n  constructor(props) {\\r\\n    super(props);\\r\\n\\r\\n    this.state = {\\r\\n      user: {\\r\\n        email: \\\"\\\",\\r\\n        password: \\\"\\\"\\r\\n      },\\r\\n      errors: {},\\r\\n      submitted: false\\r\\n    };\\r\\n  }\\r\\n\\r\\n  onChange = event => {\\r\\n    const user = this.state.user;\\r\\n    user[event.target.name] = event.target.value;\\r\\n    this.ListeningStateChangedEvent({ user });\\r\\n  };\\r\\n\\r\\n  /** Returns a number from 0 to 100 that represents password quality\\r\\n   *  For simplicity, just returning % of min length entered.\\r\\n   *  Enhance with checks for number, special char, unique chars, etc.\\r\\n   */\\r\\n  passwordQuality(password) {\\r\\n    if (!password) return null;\\r\\n    if (password.length >= this.props.minPasswordLength) return 100;\\r\\n    const percentOfMinLength = parseInt(\\r\\n      (password.length / this.props.minPasswordLength) * 100,\\r\\n      10\\r\\n    );\\r\\n    return percentOfMinLength;\\r\\n  }\\r\\n\\r\\n  validate({ email, password }) {\\r\\n    const errors = {};\\r\\n    const { minPasswordLength } = this.props;\\r\\n\\r\\n    if (!email) errors.email = \\\"Email required.\\\";\\r\\n    if (password.length < minPasswordLength)\\r\\n      errors.password = `Password must be at least ${minPasswordLength} characters.`;\\r\\n\\r\\n    this.setState({ errors });\\r\\n    const formIsValid = Object.getOwnPropertyNames(errors).length === 0;\\r\\n    return formIsValid;\\r\\n  }\\r\\n\\r\\n  onSubmit = () => {\\r\\n    const { user } = this.state;\\r\\n    const formIsValid = this.validate(user);\\r\\n    if (formIsValid) {\\r\\n      this.props.onSubmit(user);\\r\\n      this.setState({ submitted: true });\\r\\n    }\\r\\n  };\\r\\n\\r\\n  render() {\\r\\n    const { errors, submitted } = this.state;\\r\\n    const { email, password } = this.state.user;\\r\\n\\r\\n    return submitted ? (\\r\\n      <h2>{this.props.confirmationMessage}</h2>\\r\\n    ) : (\\r\\n      <div>\\r\\n        <TextInput\\r\\n          htmlId=\\\"registration-form-email\\\"\\r\\n          name=\\\"email\\\"\\r\\n          onChange={this.onChange}\\r\\n          label=\\\"Email\\\"\\r\\n          value={email}\\r\\n          error={errors.email}\\r\\n          required\\r\\n        />\\r\\n\\r\\n        <PasswordInput\\r\\n          htmlId=\\\"registration-form-password\\\"\\r\\n          name=\\\"password\\\"\\r\\n          value={password}\\r\\n          onChange={this.onChange}\\r\\n          quality={this.passwordQuality(password)}\\r\\n          showVisibilityToggle\\r\\n          maxLength={50}\\r\\n          error={errors.password}\\r\\n        />\\r\\n\\r\\n        <input type=\\\"submit\\\" value=\\\"Register\\\" onClick={this.onSubmit} />\\r\\n      </div>\\r\\n    );\\r\\n  }\\r\\n}\\r\\n\\r\\nRegistrationForm.propTypes = {\\r\\n  /** Message displayed on success */\\r\\n  confirmationMessage: PropTypes.string,\\r\\n\\r\\n  /** Called when form is submitted */\\r\\n  onSubmit: PropTypes.func.isRequired,\\r\\n\\r\\n  /** Minimum Password Length */\\r\\n  minPasswordLength: PropTypes.number\\r\\n};\\r\\n\\r\\nRegistrationForm.defaultProps = {\\r\\n  confirmationMessage: \\\"Thanks for registering!\\\",\\r\\n  minPasswordLength: 8\\r\\n};\\r\\n\\r\\nexport default RegistrationForm;\\r\\n\",\n  \"examples\": [{\n    \"name\": \"ExampleRegistrationForm\",\n    \"description\": \"\",\n    \"code\": \"import React from \\\"react\\\";\\r\\nimport RegistrationForm from \\\"ps-react/RegistrationForm\\\";\\r\\n\\r\\nexport default class ExampleRegistrationForm extends React.Component {\\r\\n  onSubmit = user => {\\r\\n    console.log(user);\\r\\n  };\\r\\n\\r\\n  render() {\\r\\n    return <RegistrationForm onSubmit={this.onSubmit} />;\\r\\n  }\\r\\n}\\r\\n\"\n  }]\n}, {\n  \"name\": \"TextInput\",\n  \"description\": \"Text Input with integrated label to enforce consistency in layout, error display, label placement\",\n  \"props\": {\n    \"htmlId\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": true,\n      \"description\": \"Unique HTML ID. USed for tying label to HTML input. Handy Hook for automated testing.\"\n    },\n    \"name\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": true,\n      \"description\": \"Input Name. Recommend setting this to match object's property so a single change handler can be used\"\n    },\n    \"label\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": true,\n      \"description\": \"Input Label\"\n    },\n    \"type\": {\n      \"type\": {\n        \"name\": \"enum\",\n        \"value\": [{\n          \"value\": \"\\\"text\\\"\",\n          \"computed\": false\n        }, {\n          \"value\": \"\\\"number\\\"\",\n          \"computed\": false\n        }, {\n          \"value\": \"\\\"password\\\"\",\n          \"computed\": false\n        }]\n      },\n      \"required\": false,\n      \"description\": \"Input Type\",\n      \"defaultValue\": {\n        \"value\": \"\\\"text\\\"\",\n        \"computed\": false\n      }\n    },\n    \"required\": {\n      \"type\": {\n        \"name\": \"bool\"\n      },\n      \"required\": false,\n      \"description\": \"Mark label with asterisk if required\",\n      \"defaultValue\": {\n        \"value\": \"false\",\n        \"computed\": false\n      }\n    },\n    \"onChange\": {\n      \"type\": {\n        \"name\": \"func\"\n      },\n      \"required\": true,\n      \"description\": \"Function to call onChange\"\n    },\n    \"placeholder\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": false,\n      \"description\": \"Placeholder to display when empty\"\n    },\n    \"value\": {\n      \"type\": {\n        \"name\": \"any\"\n      },\n      \"required\": false,\n      \"description\": \"Value\"\n    },\n    \"error\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": false,\n      \"description\": \"String to display when error occues\"\n    },\n    \"children\": {\n      \"type\": {\n        \"name\": \"node\"\n      },\n      \"required\": false,\n      \"description\": \"Child component to display next to the input\"\n    }\n  },\n  \"code\": \"import React from \\\"react\\\";\\r\\nimport PropTypes from \\\"prop-types\\\";\\r\\nimport Label from \\\"../Label\\\";\\r\\n\\r\\n/** Text Input with integrated label to enforce consistency in layout, error display, label placement */\\r\\nfunction TextInput({\\r\\n  htmlId,\\r\\n  name,\\r\\n  label,\\r\\n  type = \\\"text\\\",\\r\\n  required = false,\\r\\n  onChange,\\r\\n  placeholder,\\r\\n  value,\\r\\n  error,\\r\\n  children,\\r\\n  ...props\\r\\n}) {\\r\\n  return (\\r\\n    <div style={{ marginBottom: 16 }}>\\r\\n      <Label htmlFor={htmlId} label={label} required={required} />\\r\\n      <input\\r\\n        id={htmlId}\\r\\n        type={type}\\r\\n        name={name}\\r\\n        placeholder={placeholder}\\r\\n        value={value}\\r\\n        onChange={onChange}\\r\\n        style={error && { border: \\\"solid 1px red\\\" }}\\r\\n        {...props}\\r\\n      />\\r\\n      {children}\\r\\n      {error && (\\r\\n        <div className=\\\"error\\\" style={{ color: \\\"red\\\" }}>\\r\\n          {error}\\r\\n        </div>\\r\\n      )}\\r\\n    </div>\\r\\n  );\\r\\n}\\r\\n\\r\\nTextInput.propTypes = {\\r\\n  /** Unique HTML ID. USed for tying label to HTML input. Handy Hook for automated testing. */\\r\\n  htmlId: PropTypes.string.isRequired,\\r\\n\\r\\n  /** Input Name. Recommend setting this to match object's property so a single change handler can be used */\\r\\n  name: PropTypes.string.isRequired,\\r\\n\\r\\n  /** Input Label */\\r\\n  label: PropTypes.string.isRequired,\\r\\n\\r\\n  /** Input Type */\\r\\n  type: PropTypes.oneOf([\\\"text\\\", \\\"number\\\", \\\"password\\\"]),\\r\\n\\r\\n  /** Mark label with asterisk if required */\\r\\n  required: PropTypes.bool,\\r\\n\\r\\n  /** Function to call onChange */\\r\\n  onChange: PropTypes.func.isRequired,\\r\\n\\r\\n  /** Placeholder to display when empty */\\r\\n  placeholder: PropTypes.string,\\r\\n\\r\\n  /** Value */\\r\\n  value: PropTypes.any,\\r\\n\\r\\n  /** String to display when error occues */\\r\\n  error: PropTypes.string,\\r\\n\\r\\n  /** Child component to display next to the input */\\r\\n  children: PropTypes.node\\r\\n};\\r\\n\\r\\nexport default TextInput;\\r\\n\",\n  \"examples\": [{\n    \"name\": \"ExampleError\",\n    \"description\": \"Required TextBox with Error\",\n    \"code\": \"import React from \\\"react\\\";\\r\\nimport TextInput from \\\"ps-react/TextInput\\\";\\r\\n\\r\\n/** Required TextBox with Error */\\r\\nexport default class ExampleError extends React.Component {\\r\\n  render() {\\r\\n    return (\\r\\n      <TextInput\\r\\n        htmlId=\\\"example-required-error\\\"\\r\\n        value=\\\"wrong\\\"\\r\\n        type=\\\"password\\\"\\r\\n        label=\\\"Password\\\"\\r\\n        name=\\\"passwordInput\\\"\\r\\n        onChange={() => {}}\\r\\n        onSubmit={() => {}}\\r\\n        required\\r\\n        error=\\\"Incorrect Password\\\"\\r\\n      />\\r\\n    );\\r\\n  }\\r\\n}\\r\\n\"\n  }, {\n    \"name\": \"ExampleOptional\",\n    \"description\": \"Optional TextBox\",\n    \"code\": \"import React from \\\"react\\\";\\r\\nimport TextInput from \\\"ps-react/TextInput\\\";\\r\\n\\r\\n/** Optional TextBox */\\r\\nexport default class ExampleOptional extends React.Component {\\r\\n  render() {\\r\\n    return (\\r\\n      <TextInput\\r\\n        htmlId=\\\"example-optional\\\"\\r\\n        label=\\\"First Name\\\"\\r\\n        name=\\\"firstname\\\"\\r\\n        onChange={() => {}}\\r\\n        onSubmit={() => {}}\\r\\n      />\\r\\n    );\\r\\n  }\\r\\n}\\r\\n\"\n  }]\n}, {\n  \"name\": \"TextInputBEM\",\n  \"description\": \"Text Input with integrated label to enforce consistency in layout, error display, label placement\",\n  \"props\": {\n    \"htmlId\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": true,\n      \"description\": \"Unique HTML ID. USed for tying label to HTML input. Handy Hook for automated testing.\"\n    },\n    \"name\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": true,\n      \"description\": \"Input Name. Recommend setting this to match object's property so a single change handler can be used\"\n    },\n    \"label\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": true,\n      \"description\": \"Input Label\"\n    },\n    \"type\": {\n      \"type\": {\n        \"name\": \"enum\",\n        \"value\": [{\n          \"value\": \"\\\"text\\\"\",\n          \"computed\": false\n        }, {\n          \"value\": \"\\\"number\\\"\",\n          \"computed\": false\n        }, {\n          \"value\": \"\\\"password\\\"\",\n          \"computed\": false\n        }]\n      },\n      \"required\": false,\n      \"description\": \"Input Type\",\n      \"defaultValue\": {\n        \"value\": \"\\\"text\\\"\",\n        \"computed\": false\n      }\n    },\n    \"required\": {\n      \"type\": {\n        \"name\": \"bool\"\n      },\n      \"required\": false,\n      \"description\": \"Mark label with asterisk if required\",\n      \"defaultValue\": {\n        \"value\": \"false\",\n        \"computed\": false\n      }\n    },\n    \"onChange\": {\n      \"type\": {\n        \"name\": \"func\"\n      },\n      \"required\": true,\n      \"description\": \"Function to call onChange\"\n    },\n    \"placeholder\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": false,\n      \"description\": \"Placeholder to display when empty\"\n    },\n    \"value\": {\n      \"type\": {\n        \"name\": \"any\"\n      },\n      \"required\": false,\n      \"description\": \"Value\"\n    },\n    \"error\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": false,\n      \"description\": \"String to display when error occues\"\n    },\n    \"children\": {\n      \"type\": {\n        \"name\": \"node\"\n      },\n      \"required\": false,\n      \"description\": \"Child component to display next to the input\"\n    }\n  },\n  \"code\": \"import React from \\\"react\\\";\\r\\nimport PropTypes from \\\"prop-types\\\";\\r\\nimport Label from \\\"../Label\\\";\\r\\n\\r\\n/** Text Input with integrated label to enforce consistency in layout, error display, label placement */\\r\\nfunction TextInput({\\r\\n  htmlId,\\r\\n  name,\\r\\n  label,\\r\\n  type = \\\"text\\\",\\r\\n  required = false,\\r\\n  onChange,\\r\\n  placeholder,\\r\\n  value,\\r\\n  error,\\r\\n  children,\\r\\n  ...props\\r\\n}) {\\r\\n  return (\\r\\n    <div className=\\\"textinput\\\">\\r\\n      <Label htmlFor={htmlId} label={label} required={required} />\\r\\n      <input\\r\\n        id={htmlId}\\r\\n        type={type}\\r\\n        name={name}\\r\\n        placeholder={placeholder}\\r\\n        value={value}\\r\\n        onChange={onChange}\\r\\n        className={error && \\\"textinput__input--state-error\\\"}\\r\\n        {...props}\\r\\n      />\\r\\n      {children}\\r\\n      {error && <div className=\\\"textinput__error\\\">{error}</div>}\\r\\n    </div>\\r\\n  );\\r\\n}\\r\\n\\r\\nTextInput.propTypes = {\\r\\n  /** Unique HTML ID. USed for tying label to HTML input. Handy Hook for automated testing. */\\r\\n  htmlId: PropTypes.string.isRequired,\\r\\n\\r\\n  /** Input Name. Recommend setting this to match object's property so a single change handler can be used */\\r\\n  name: PropTypes.string.isRequired,\\r\\n\\r\\n  /** Input Label */\\r\\n  label: PropTypes.string.isRequired,\\r\\n\\r\\n  /** Input Type */\\r\\n  type: PropTypes.oneOf([\\\"text\\\", \\\"number\\\", \\\"password\\\"]),\\r\\n\\r\\n  /** Mark label with asterisk if required */\\r\\n  required: PropTypes.bool,\\r\\n\\r\\n  /** Function to call onChange */\\r\\n  onChange: PropTypes.func.isRequired,\\r\\n\\r\\n  /** Placeholder to display when empty */\\r\\n  placeholder: PropTypes.string,\\r\\n\\r\\n  /** Value */\\r\\n  value: PropTypes.any,\\r\\n\\r\\n  /** String to display when error occues */\\r\\n  error: PropTypes.string,\\r\\n\\r\\n  /** Child component to display next to the input */\\r\\n  children: PropTypes.node\\r\\n};\\r\\n\\r\\nexport default TextInput;\\r\\n\",\n  \"examples\": [{\n    \"name\": \"ExampleError\",\n    \"description\": \"Required TextBox with Error\",\n    \"code\": \"import React from \\\"react\\\";\\r\\nimport TextInputBEM from \\\"ps-react/TextInputBEM\\\";\\r\\n\\r\\n/** Required TextBox with Error */\\r\\nexport default class ExampleError extends React.Component {\\r\\n  render() {\\r\\n    return (\\r\\n      <TextInputBEM\\r\\n        htmlId=\\\"example-required-error\\\"\\r\\n        value=\\\"wrong\\\"\\r\\n        type=\\\"password\\\"\\r\\n        label=\\\"Password\\\"\\r\\n        name=\\\"passwordInput\\\"\\r\\n        onChange={() => {}}\\r\\n        required\\r\\n        error=\\\"Incorrect Password\\\"\\r\\n      />\\r\\n    );\\r\\n  }\\r\\n}\\r\\n\"\n  }]\n}, {\n  \"name\": \"TextInputCSSModules\",\n  \"description\": \"Text Input with integrated label to enforce consistency in layout, error display, label placement\",\n  \"props\": {\n    \"htmlId\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": true,\n      \"description\": \"Unique HTML ID. USed for tying label to HTML input. Handy Hook for automated testing.\"\n    },\n    \"name\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": true,\n      \"description\": \"Input Name. Recommend setting this to match object's property so a single change handler can be used\"\n    },\n    \"label\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": true,\n      \"description\": \"Input Label\"\n    },\n    \"type\": {\n      \"type\": {\n        \"name\": \"enum\",\n        \"value\": [{\n          \"value\": \"\\\"text\\\"\",\n          \"computed\": false\n        }, {\n          \"value\": \"\\\"number\\\"\",\n          \"computed\": false\n        }, {\n          \"value\": \"\\\"password\\\"\",\n          \"computed\": false\n        }]\n      },\n      \"required\": false,\n      \"description\": \"Input Type\",\n      \"defaultValue\": {\n        \"value\": \"\\\"text\\\"\",\n        \"computed\": false\n      }\n    },\n    \"required\": {\n      \"type\": {\n        \"name\": \"bool\"\n      },\n      \"required\": false,\n      \"description\": \"Mark label with asterisk if required\",\n      \"defaultValue\": {\n        \"value\": \"false\",\n        \"computed\": false\n      }\n    },\n    \"onChange\": {\n      \"type\": {\n        \"name\": \"func\"\n      },\n      \"required\": true,\n      \"description\": \"Function to call onChange\"\n    },\n    \"placeholder\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": false,\n      \"description\": \"Placeholder to display when empty\"\n    },\n    \"value\": {\n      \"type\": {\n        \"name\": \"any\"\n      },\n      \"required\": false,\n      \"description\": \"Value\"\n    },\n    \"error\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": false,\n      \"description\": \"String to display when error occues\"\n    },\n    \"children\": {\n      \"type\": {\n        \"name\": \"node\"\n      },\n      \"required\": false,\n      \"description\": \"Child component to display next to the input\"\n    }\n  },\n  \"code\": \"import React from \\\"react\\\";\\r\\nimport PropTypes from \\\"prop-types\\\";\\r\\nimport Label from \\\"../Label\\\";\\r\\nimport styles from \\\"./textInput.css\\\";\\r\\n\\r\\n/** Text Input with integrated label to enforce consistency in layout, error display, label placement */\\r\\nfunction TextInput({\\r\\n  htmlId,\\r\\n  name,\\r\\n  label,\\r\\n  type = \\\"text\\\",\\r\\n  required = false,\\r\\n  onChange,\\r\\n  placeholder,\\r\\n  value,\\r\\n  error,\\r\\n  children,\\r\\n  ...props\\r\\n}) {\\r\\n  return (\\r\\n    <div className={styles.fieldset}>\\r\\n      <Label htmlFor={htmlId} label={label} required={required} />\\r\\n      <input\\r\\n        id={htmlId}\\r\\n        type={type}\\r\\n        name={name}\\r\\n        placeholder={placeholder}\\r\\n        value={value}\\r\\n        onChange={onChange}\\r\\n        className={error && styles.inputError}\\r\\n        {...props}\\r\\n      />\\r\\n      {children}\\r\\n      {error && <div className={styles.error}>{error}</div>}\\r\\n    </div>\\r\\n  );\\r\\n}\\r\\n\\r\\nTextInput.propTypes = {\\r\\n  /** Unique HTML ID. USed for tying label to HTML input. Handy Hook for automated testing. */\\r\\n  htmlId: PropTypes.string.isRequired,\\r\\n\\r\\n  /** Input Name. Recommend setting this to match object's property so a single change handler can be used */\\r\\n  name: PropTypes.string.isRequired,\\r\\n\\r\\n  /** Input Label */\\r\\n  label: PropTypes.string.isRequired,\\r\\n\\r\\n  /** Input Type */\\r\\n  type: PropTypes.oneOf([\\\"text\\\", \\\"number\\\", \\\"password\\\"]),\\r\\n\\r\\n  /** Mark label with asterisk if required */\\r\\n  required: PropTypes.bool,\\r\\n\\r\\n  /** Function to call onChange */\\r\\n  onChange: PropTypes.func.isRequired,\\r\\n\\r\\n  /** Placeholder to display when empty */\\r\\n  placeholder: PropTypes.string,\\r\\n\\r\\n  /** Value */\\r\\n  value: PropTypes.any,\\r\\n\\r\\n  /** String to display when error occues */\\r\\n  error: PropTypes.string,\\r\\n\\r\\n  /** Child component to display next to the input */\\r\\n  children: PropTypes.node\\r\\n};\\r\\n\\r\\nexport default TextInput;\\r\\n\",\n  \"examples\": [{\n    \"name\": \"ExampleError\",\n    \"description\": \"Required TextBox with Error\",\n    \"code\": \"import React from \\\"react\\\";\\r\\nimport TextInputCSSModules from \\\"ps-react/TextInputCSSModules\\\";\\r\\n\\r\\n/** Required TextBox with Error */\\r\\nexport default class ExampleError extends React.Component {\\r\\n  render() {\\r\\n    return (\\r\\n      <TextInputCSSModules\\r\\n        htmlId=\\\"example-required-error\\\"\\r\\n        value=\\\"wrong\\\"\\r\\n        type=\\\"password\\\"\\r\\n        label=\\\"Password\\\"\\r\\n        name=\\\"passwordInput\\\"\\r\\n        onChange={() => {}}\\r\\n        required\\r\\n        error=\\\"Incorrect Password\\\"\\r\\n      />\\r\\n    );\\r\\n  }\\r\\n}\\r\\n\"\n  }]\n}, {\n  \"name\": \"TextInputStyledComponents\",\n  \"description\": \"Text Input with integrated label to enforce consistency in layout, error display, label placement\",\n  \"props\": {\n    \"htmlId\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": true,\n      \"description\": \"Unique HTML ID. USed for tying label to HTML input. Handy Hook for automated testing.\"\n    },\n    \"name\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": true,\n      \"description\": \"Input Name. Recommend setting this to match object's property so a single change handler can be used\"\n    },\n    \"label\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": true,\n      \"description\": \"Input Label\"\n    },\n    \"type\": {\n      \"type\": {\n        \"name\": \"enum\",\n        \"value\": [{\n          \"value\": \"\\\"text\\\"\",\n          \"computed\": false\n        }, {\n          \"value\": \"\\\"number\\\"\",\n          \"computed\": false\n        }, {\n          \"value\": \"\\\"password\\\"\",\n          \"computed\": false\n        }]\n      },\n      \"required\": false,\n      \"description\": \"Input Type\",\n      \"defaultValue\": {\n        \"value\": \"\\\"text\\\"\",\n        \"computed\": false\n      }\n    },\n    \"required\": {\n      \"type\": {\n        \"name\": \"bool\"\n      },\n      \"required\": false,\n      \"description\": \"Mark label with asterisk if required\",\n      \"defaultValue\": {\n        \"value\": \"false\",\n        \"computed\": false\n      }\n    },\n    \"onChange\": {\n      \"type\": {\n        \"name\": \"func\"\n      },\n      \"required\": true,\n      \"description\": \"Function to call onChange\"\n    },\n    \"placeholder\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": false,\n      \"description\": \"Placeholder to display when empty\"\n    },\n    \"value\": {\n      \"type\": {\n        \"name\": \"any\"\n      },\n      \"required\": false,\n      \"description\": \"Value\"\n    },\n    \"error\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": false,\n      \"description\": \"String to display when error occues\"\n    },\n    \"children\": {\n      \"type\": {\n        \"name\": \"node\"\n      },\n      \"required\": false,\n      \"description\": \"Child component to display next to the input\"\n    }\n  },\n  \"code\": \"import React from \\\"react\\\";\\r\\nimport PropTypes from \\\"prop-types\\\";\\r\\nimport Label from \\\"../Label\\\";\\r\\nimport styled from \\\"styled-components\\\";\\r\\n\\r\\n/** Text Input with integrated label to enforce consistency in layout, error display, label placement */\\r\\nfunction TextInput({\\r\\n  htmlId,\\r\\n  name,\\r\\n  label,\\r\\n  type = \\\"text\\\",\\r\\n  required = false,\\r\\n  onChange,\\r\\n  placeholder,\\r\\n  value,\\r\\n  error,\\r\\n  children,\\r\\n  ...props\\r\\n}) {\\r\\n  const Error = styled.div`\\r\\n    color: red;\\r\\n  `;\\r\\n\\r\\n  const Input = styled.input`\\r\\n    border: ${error && \\\"solid 1px red\\\"};\\r\\n  `;\\r\\n\\r\\n  const Fieldset = styled.div`\\r\\n    margin-bottom: 16px;\\r\\n  `;\\r\\n\\r\\n  return (\\r\\n    <Fieldset>\\r\\n      <Label htmlFor={htmlId} label={label} required={required} />\\r\\n      <Input\\r\\n        id={htmlId}\\r\\n        type={type}\\r\\n        name={name}\\r\\n        placeholder={placeholder}\\r\\n        value={value}\\r\\n        onChange={onChange}\\r\\n        {...props}\\r\\n      />\\r\\n      {children}\\r\\n      {error && <Error>{error}</Error>}\\r\\n    </Fieldset>\\r\\n  );\\r\\n}\\r\\n\\r\\nTextInput.propTypes = {\\r\\n  /** Unique HTML ID. USed for tying label to HTML input. Handy Hook for automated testing. */\\r\\n  htmlId: PropTypes.string.isRequired,\\r\\n\\r\\n  /** Input Name. Recommend setting this to match object's property so a single change handler can be used */\\r\\n  name: PropTypes.string.isRequired,\\r\\n\\r\\n  /** Input Label */\\r\\n  label: PropTypes.string.isRequired,\\r\\n\\r\\n  /** Input Type */\\r\\n  type: PropTypes.oneOf([\\\"text\\\", \\\"number\\\", \\\"password\\\"]),\\r\\n\\r\\n  /** Mark label with asterisk if required */\\r\\n  required: PropTypes.bool,\\r\\n\\r\\n  /** Function to call onChange */\\r\\n  onChange: PropTypes.func.isRequired,\\r\\n\\r\\n  /** Placeholder to display when empty */\\r\\n  placeholder: PropTypes.string,\\r\\n\\r\\n  /** Value */\\r\\n  value: PropTypes.any,\\r\\n\\r\\n  /** String to display when error occues */\\r\\n  error: PropTypes.string,\\r\\n\\r\\n  /** Child component to display next to the input */\\r\\n  children: PropTypes.node\\r\\n};\\r\\n\\r\\nexport default TextInput;\\r\\n\",\n  \"examples\": [{\n    \"name\": \"ExampleError\",\n    \"description\": \"Required TextBox with Error\",\n    \"code\": \"import React from \\\"react\\\";\\r\\nimport TextInputStyledComponents from \\\"ps-react/TextInputStyledComponents\\\";\\r\\n\\r\\n/** Required TextBox with Error */\\r\\nexport default class ExampleError extends React.Component {\\r\\n  render() {\\r\\n    return (\\r\\n      <TextInputStyledComponents\\r\\n        htmlId=\\\"example-required-error\\\"\\r\\n        value=\\\"wrong\\\"\\r\\n        type=\\\"password\\\"\\r\\n        label=\\\"Password\\\"\\r\\n        name=\\\"passwordInput\\\"\\r\\n        onChange={() => {}}\\r\\n        required\\r\\n        error=\\\"Incorrect Password\\\"\\r\\n      />\\r\\n    );\\r\\n  }\\r\\n}\\r\\n\"\n  }]\n}, {\n  \"name\": \"Tooltip\",\n  \"description\": \"\",\n  \"props\": {\n    \"color\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": false,\n      \"description\": \"Tooltip Color\",\n      \"defaultValue\": {\n        \"value\": \"\\\"#445160\\\"\",\n        \"computed\": false\n      }\n    },\n    \"tip\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": false,\n      \"description\": \"Tooltip Message\",\n      \"defaultValue\": {\n        \"value\": \"\\\"TOOLTIP\\\"\",\n        \"computed\": false\n      }\n    },\n    \"direction\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": false,\n      \"description\": \"Direction of Arrow\",\n      \"defaultValue\": {\n        \"value\": \"'right'\",\n        \"computed\": false\n      }\n    }\n  },\n  \"code\": \"import React from 'react';\\r\\nimport PropTypes from 'prop-types';\\r\\n\\r\\nconst bottom = {\\r\\n    left: '50%',\\r\\n    transform: 'translate(-50%,0%)'\\r\\n}\\r\\n\\r\\nconst top = {\\r\\n    left: '50%',\\r\\n    transform: 'translate(-50%,0%)'\\r\\n}\\r\\n\\r\\nconst left = {\\r\\n    top: '0%',\\r\\n    transform: 'translate(-100%, 0%)'\\r\\n}\\r\\n\\r\\nconst right = {\\r\\n    top: '50%',\\r\\n    transform: 'translate(50%, -50%)'\\r\\n}\\r\\n\\r\\nfunction getLocation(dir) {\\r\\n    switch(dir) {\\r\\n        case \\\"left\\\":\\r\\n            return left;\\r\\n        case \\\"right\\\":\\r\\n            return right;\\r\\n        case \\\"top\\\":\\r\\n            return top;\\r\\n        case \\\"bottom\\\":\\r\\n            return bottom;\\r\\n        default:\\r\\n            return right;\\r\\n    }\\r\\n}\\r\\nclass Tooltip extends React.Component {\\r\\n    constructor(props) {\\r\\n        super(props);\\r\\n    }\\r\\n\\r\\n    render () {\\r\\n        const { color, tip, direction } = this.props;\\r\\n        return (\\r\\n            <div id=\\\"tooltip\\\" style ={{\\r\\n                display: 'inline-block',\\r\\n                backgroundColor: color,\\r\\n                padding: '5px 5px 5px 5px',\\r\\n                color: 'white',\\r\\n                fontWeight: 'bold',\\r\\n                fontSize: 10,\\r\\n                borderRadius: '5px',\\r\\n                position: 'relative',\\r\\n                zIndex: 100,\\r\\n                ...getLocation(direction)\\r\\n            }}>\\r\\n                {tip}\\r\\n            </div>\\r\\n        )\\r\\n    }\\r\\n}\\r\\n\\r\\nTooltip.propTypes = {\\r\\n    /** Tooltip Color */\\r\\n    color: PropTypes.string,\\r\\n\\r\\n    /** Tooltip Message */\\r\\n    tip: PropTypes.string,\\r\\n\\r\\n    /** Direction of Arrow */\\r\\n    direction: PropTypes.string\\r\\n}\\r\\n\\r\\nTooltip.defaultProps = {\\r\\n    /** Default IX Tooltip Color */\\r\\n    color: \\\"#445160\\\",\\r\\n\\r\\n    /** Placeholder Tip */\\r\\n    tip: \\\"TOOLTIP\\\",\\r\\n\\r\\n    /** Direction of Arrow */\\r\\n    direction: 'right'\\r\\n}\\r\\n\\r\\nexport default Tooltip;\",\n  \"examples\": [{\n    \"name\": \"TooltipExample\",\n    \"description\": \"\",\n    \"code\": \"import React from 'react';\\r\\nimport Tooltip from 'ps-react/Tooltip';\\r\\nimport IxButton from 'ps-react/IxButton';\\r\\n\\r\\nexport default class TooltipExample extends React.Component {\\r\\n    render() {\\r\\n        return (\\r\\n            <>\\r\\n                <div style={{display: 'inline-block'}}>\\r\\n                    <IxButton />\\r\\n                    <Tooltip direction=\\\"left\\\" />\\r\\n                </div>\\r\\n                <div style={{display: 'inline-block'}}>\\r\\n                    <IxButton></IxButton>\\r\\n                    <Tooltip direction=\\\"right\\\"/>\\r\\n                </div>\\r\\n                <div style={{display: 'inline-block'}}>\\r\\n                    <Tooltip direction=\\\"up\\\"/>\\r\\n                    <IxButton></IxButton>\\r\\n                </div>\\r\\n                <div style={{display: 'inline-block'}}>\\r\\n                    <IxButton></IxButton>\\r\\n                    <Tooltip direction=\\\"down\\\"/>\\r\\n                </div>\\r\\n            </>\\r\\n        );\\r\\n    }\\r\\n}\"\n  }]\n}];","import React from \"react\";\r\nimport ClickToEnterTextField from \"ps-react/ClickToEnterTextField\";\r\n\r\n/** Optional TextBox */\r\nexport default function ExampleTextField() {\r\n  function onSubmit(event) {\r\n    this.setState({isEntered: false});\r\n    this.setState({isHover: false});\r\n    /** make any additonal calls or logic when submitting here, e.g. updating the DB */\r\n    event.preventDefault();\r\n  }\r\n\r\n  function onChange(event) {\r\n    this.setState({ value: event.target.value });\r\n    /** make any additional calls or logic when submitting here */\r\n  }\r\n\r\n  return (\r\n    <ClickToEnterTextField name=\"partname\" onChange={onChange} onSubmit={onSubmit} />\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport Ellipses from \"ps-react/Ellipses\";\r\n\r\nexport default function EllipsesExample() {\r\n  return (\r\n    <>\r\n      <Ellipses direction=\"row\" />\r\n      <Ellipses direction=\"column\" size={5} color=\"red\" />\r\n    </>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport ExpandingBar from \"ps-react/ExpandingBar\";\r\nimport ClickToEnterTextField from \"ps-react/ClickToEnterTextField\";\r\n\r\nexport default function ExampleBar() {\r\n  function onSubmit(event) {\r\n    this.setState({ isEntered: false });\r\n    this.setState({ isHover: false });\r\n    /** make any additonal calls or logic when submitting here, e.g. updating the DB */\r\n    event.preventDefault();\r\n  }\r\n\r\n  function onChange(event) {\r\n    this.setState({ value: event.target.value });\r\n    /** make any additional calls or logic when submitting here */\r\n  }\r\n\r\n  return (\r\n    <ExpandingBar duration={500} startHeight=\"auto\" endHeight=\"auto\">\r\n      <div style={{ height: \"auto\", display: \"flex\", flexDirection: \"row\" }}>\r\n        <div style={{ display: \"flex\", alignItems: \"center\" }}>\r\n          <i className={\"fa fa-cubes fa-3x\"} style={{ color: \"#0d47a1\" }} />\r\n        </div>\r\n        <div\r\n          style={{\r\n            display: \"inline-block\",\r\n            marginLeft: \"10px\",\r\n            marginTop: \"0px\"\r\n          }}\r\n        >\r\n          <ClickToEnterTextField\r\n            leftMargin=\"10px\"\r\n            topMargin=\"10px\"\r\n            color=\"white\"\r\n            name=\"partname\"\r\n            onChange={onChange}\r\n            onSubmit={onSubmit}\r\n            value=\"BLACK STEEL MULTI TOOL\"\r\n          />\r\n          <div>\r\n            <ClickToEnterTextField\r\n              bottomMargin=\"10px\"\r\n              topMargin=\"5px\"\r\n              leftMargin=\"10px\"\r\n              color=\"white\"\r\n              name=\"partnum\"\r\n              onChange={onChange}\r\n              onSubmit={onSubmit}\r\n              value=\"PRT-2322\"\r\n            />\r\n            <ClickToEnterTextField\r\n              name=\"partrev\"\r\n              onChange={onChange}\r\n              onSubmit={onSubmit}\r\n              bottomMargin=\"10px\"\r\n              topMargin=\"5px\"\r\n              leftMargin=\"50px\"\r\n              value=\"B3\"\r\n              color=\"white\"\r\n            />\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </ExpandingBar>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport EyeIcon from \"ps-react/EyeIcon\";\r\n\r\nexport default function EyeIconExample() {\r\n  return <EyeIcon />;\r\n}\r\n","import React from \"react\";\r\nimport IxButton from \"ps-react/IxButton\";\r\n\r\nexport default function ExampleButton() {\r\n  const helloExample = () => {\r\n    console.log(\"Hello Example World!\");\r\n  };\r\n  return <IxButton handleClick={helloExample} />;\r\n}\r\n","import React from \"react\";\r\nimport IxButtonMainFlat from \"ps-react/IxButtonMainFlat\";\r\n\r\nexport default function IxButtonMainFlatExample() {\r\n  const helloExample = () => {\r\n    console.log(\"Hello Example World!\");\r\n  };\r\n  return (\r\n    <>\r\n      <IxButtonMainFlat\r\n        type=\"small\"\r\n        handleClick={() => {\r\n          console.log(\"small\");\r\n        }}\r\n      />\r\n      <IxButtonMainFlat\r\n        type=\"medium\"\r\n        handleClick={() => {\r\n          console.log(\"med\");\r\n        }}\r\n      />\r\n      <IxButtonMainFlat\r\n        type=\"big\"\r\n        handleClick={() => {\r\n          console.log(\"big\");\r\n        }}\r\n      />\r\n    </>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport IxButton from \"ps-react/IxButton\";\r\nimport IxButtonMulti from \"ps-react/IxButtonMulti\";\r\n\r\nexport default function ExampleCirclesMulti() {\r\n  return (\r\n    <IxButtonMulti shape=\"circle\" backgroundColor=\"white\">\r\n      <IxButton shape=\"circle\" backgroundColor=\"white\" />\r\n      <IxButton shape=\"circle\" backgroundColor=\"white\" />\r\n      <IxButton shape=\"circle\" backgroundColor=\"white\" />\r\n    </IxButtonMulti>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport IxButton from \"ps-react/IxButton\";\r\nimport IxButtonMulti from \"ps-react/IxButtonMulti\";\r\n\r\nexport default function ExampleCirclesMulti() {\r\n  return (\r\n    <IxButtonMulti>\r\n      <IxButton />\r\n      <IxButton />\r\n      <IxButton />\r\n    </IxButtonMulti>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport Label from \"ps-react/Label\";\r\n\r\n/** Optional Label */\r\nexport default function ExampleOptional() {\r\n  return <Label htmlFor=\"test\" label=\"test\" />;\r\n}\r\n","import React from \"react\";\r\nimport Label from \"ps-react/Label\";\r\n\r\n/** Required Label */\r\nexport default function ExampleRequired() {\r\n  return <Label htmlFor=\"test\" label=\"required\" required />;\r\n}\r\n","import React from \"react\";\r\nimport PasswordInput from \"ps-react/PasswordInput\";\r\n\r\n/** All features enabled */\r\nclass ExampleAllFeatures extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      password: \"\"\r\n    };\r\n  }\r\n\r\n  getQuality() {\r\n    const length = this.state.password.length;\r\n    return length > 10 ? 100 : length * 10;\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <PasswordInput\r\n          htmlId=\"password-input-example-all-features\"\r\n          name=\"password\"\r\n          onChange={event => this.setState({ password: event.target.value })}\r\n          value={this.state.password}\r\n          minLength={8}\r\n          placeholder=\"Enter password\"\r\n          showVisibilityToggle\r\n          quality={this.getQuality()}\r\n          {...this.props}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ExampleAllFeatures;\r\n","import React from \"react\";\r\nimport ProgressBar from \"ps-react/ProgressBar\";\r\n\r\n/** 100% Progress */\r\nexport default function Example10Percent() {\r\n  return <ProgressBar percent={100} width={150} />;\r\n}\r\n","import React from \"react\";\r\nimport ProgressBar from \"ps-react/ProgressBar\";\r\n\r\n/** 10% Progress */\r\nexport default function Example10Percent() {\r\n  return <ProgressBar percent={10} width={150} />;\r\n}\r\n","import React from \"react\";\r\nimport ProgressBar from \"ps-react/ProgressBar\";\r\n\r\n/** 50% Progress */\r\nexport default function Example10Percent() {\r\n  return <ProgressBar percent={50} width={150} />;\r\n}\r\n","import React from \"react\";\r\nimport TextInput from \"ps-react/TextInput\";\r\n\r\n/** Required TextBox with Error */\r\nexport default class ExampleError extends React.Component {\r\n  render() {\r\n    return (\r\n      <TextInput\r\n        htmlId=\"example-required-error\"\r\n        value=\"wrong\"\r\n        type=\"password\"\r\n        label=\"Password\"\r\n        name=\"passwordInput\"\r\n        onChange={() => {}}\r\n        onSubmit={() => {}}\r\n        required\r\n        error=\"Incorrect Password\"\r\n      />\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport TextInput from \"ps-react/TextInput\";\r\n\r\n/** Optional TextBox */\r\nexport default class ExampleOptional extends React.Component {\r\n  render() {\r\n    return (\r\n      <TextInput\r\n        htmlId=\"example-optional\"\r\n        label=\"First Name\"\r\n        name=\"firstname\"\r\n        onChange={() => {}}\r\n        onSubmit={() => {}}\r\n      />\r\n    );\r\n  }\r\n}\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst bottom = {\r\n    left: '50%',\r\n    transform: 'translate(-50%,0%)'\r\n}\r\n\r\nconst top = {\r\n    left: '50%',\r\n    transform: 'translate(-50%,0%)'\r\n}\r\n\r\nconst left = {\r\n    top: '0%',\r\n    transform: 'translate(-100%, 0%)'\r\n}\r\n\r\nconst right = {\r\n    top: '50%',\r\n    transform: 'translate(50%, -50%)'\r\n}\r\n\r\nfunction getLocation(dir) {\r\n    switch(dir) {\r\n        case \"left\":\r\n            return left;\r\n        case \"right\":\r\n            return right;\r\n        case \"top\":\r\n            return top;\r\n        case \"bottom\":\r\n            return bottom;\r\n        default:\r\n            return right;\r\n    }\r\n}\r\nclass Tooltip extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n\r\n    render () {\r\n        const { color, tip, direction } = this.props;\r\n        return (\r\n            <div id=\"tooltip\" style ={{\r\n                display: 'inline-block',\r\n                backgroundColor: color,\r\n                padding: '5px 5px 5px 5px',\r\n                color: 'white',\r\n                fontWeight: 'bold',\r\n                fontSize: 10,\r\n                borderRadius: '5px',\r\n                position: 'relative',\r\n                zIndex: 100,\r\n                ...getLocation(direction)\r\n            }}>\r\n                {tip}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nTooltip.propTypes = {\r\n    /** Tooltip Color */\r\n    color: PropTypes.string,\r\n\r\n    /** Tooltip Message */\r\n    tip: PropTypes.string,\r\n\r\n    /** Direction of Arrow */\r\n    direction: PropTypes.string\r\n}\r\n\r\nTooltip.defaultProps = {\r\n    /** Default IX Tooltip Color */\r\n    color: \"#445160\",\r\n\r\n    /** Placeholder Tip */\r\n    tip: \"TOOLTIP\",\r\n\r\n    /** Direction of Arrow */\r\n    direction: 'right'\r\n}\r\n\r\nexport default Tooltip;","import React from 'react';\r\nimport Tooltip from 'ps-react/Tooltip';\r\nimport IxButton from 'ps-react/IxButton';\r\n\r\nexport default class TooltipExample extends React.Component {\r\n    render() {\r\n        return (\r\n            <>\r\n                <div style={{display: 'inline-block'}}>\r\n                    <IxButton />\r\n                    <Tooltip direction=\"left\" />\r\n                </div>\r\n                <div style={{display: 'inline-block'}}>\r\n                    <IxButton></IxButton>\r\n                    <Tooltip direction=\"right\"/>\r\n                </div>\r\n                <div style={{display: 'inline-block'}}>\r\n                    <Tooltip direction=\"up\"/>\r\n                    <IxButton></IxButton>\r\n                </div>\r\n                <div style={{display: 'inline-block'}}>\r\n                    <IxButton></IxButton>\r\n                    <Tooltip direction=\"down\"/>\r\n                </div>\r\n            </>\r\n        );\r\n    }\r\n}","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport Label from \"../Label\";\r\nimport styled from \"styled-components\";\r\n\r\n/** Text Input with integrated label to enforce consistency in layout, error display, label placement */\r\nfunction TextInput({\r\n  htmlId,\r\n  name,\r\n  label,\r\n  type = \"text\",\r\n  required = false,\r\n  onChange,\r\n  placeholder,\r\n  value,\r\n  error,\r\n  children,\r\n  ...props\r\n}) {\r\n  const Error = styled.div`\r\n    color: red;\r\n  `;\r\n\r\n  const Input = styled.input`\r\n    border: ${error && \"solid 1px red\"};\r\n  `;\r\n\r\n  const Fieldset = styled.div`\r\n    margin-bottom: 16px;\r\n  `;\r\n\r\n  return (\r\n    <Fieldset>\r\n      <Label htmlFor={htmlId} label={label} required={required} />\r\n      <Input\r\n        id={htmlId}\r\n        type={type}\r\n        name={name}\r\n        placeholder={placeholder}\r\n        value={value}\r\n        onChange={onChange}\r\n        {...props}\r\n      />\r\n      {children}\r\n      {error && <Error>{error}</Error>}\r\n    </Fieldset>\r\n  );\r\n}\r\n\r\nTextInput.propTypes = {\r\n  /** Unique HTML ID. USed for tying label to HTML input. Handy Hook for automated testing. */\r\n  htmlId: PropTypes.string.isRequired,\r\n\r\n  /** Input Name. Recommend setting this to match object's property so a single change handler can be used */\r\n  name: PropTypes.string.isRequired,\r\n\r\n  /** Input Label */\r\n  label: PropTypes.string.isRequired,\r\n\r\n  /** Input Type */\r\n  type: PropTypes.oneOf([\"text\", \"number\", \"password\"]),\r\n\r\n  /** Mark label with asterisk if required */\r\n  required: PropTypes.bool,\r\n\r\n  /** Function to call onChange */\r\n  onChange: PropTypes.func.isRequired,\r\n\r\n  /** Placeholder to display when empty */\r\n  placeholder: PropTypes.string,\r\n\r\n  /** Value */\r\n  value: PropTypes.any,\r\n\r\n  /** String to display when error occues */\r\n  error: PropTypes.string,\r\n\r\n  /** Child component to display next to the input */\r\n  children: PropTypes.node\r\n};\r\n\r\nexport default TextInput;\r\n","import React from \"react\";\r\nimport TextInputStyledComponents from \"ps-react/TextInputStyledComponents\";\r\n\r\n/** Required TextBox with Error */\r\nexport default class ExampleError extends React.Component {\r\n  render() {\r\n    return (\r\n      <TextInputStyledComponents\r\n        htmlId=\"example-required-error\"\r\n        value=\"wrong\"\r\n        type=\"password\"\r\n        label=\"Password\"\r\n        name=\"passwordInput\"\r\n        onChange={() => {}}\r\n        required\r\n        error=\"Incorrect Password\"\r\n      />\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport Label from \"../Label\";\r\nimport styles from \"./textInput.css\";\r\n\r\n/** Text Input with integrated label to enforce consistency in layout, error display, label placement */\r\nfunction TextInput({\r\n  htmlId,\r\n  name,\r\n  label,\r\n  type = \"text\",\r\n  required = false,\r\n  onChange,\r\n  placeholder,\r\n  value,\r\n  error,\r\n  children,\r\n  ...props\r\n}) {\r\n  return (\r\n    <div className={styles.fieldset}>\r\n      <Label htmlFor={htmlId} label={label} required={required} />\r\n      <input\r\n        id={htmlId}\r\n        type={type}\r\n        name={name}\r\n        placeholder={placeholder}\r\n        value={value}\r\n        onChange={onChange}\r\n        className={error && styles.inputError}\r\n        {...props}\r\n      />\r\n      {children}\r\n      {error && <div className={styles.error}>{error}</div>}\r\n    </div>\r\n  );\r\n}\r\n\r\nTextInput.propTypes = {\r\n  /** Unique HTML ID. USed for tying label to HTML input. Handy Hook for automated testing. */\r\n  htmlId: PropTypes.string.isRequired,\r\n\r\n  /** Input Name. Recommend setting this to match object's property so a single change handler can be used */\r\n  name: PropTypes.string.isRequired,\r\n\r\n  /** Input Label */\r\n  label: PropTypes.string.isRequired,\r\n\r\n  /** Input Type */\r\n  type: PropTypes.oneOf([\"text\", \"number\", \"password\"]),\r\n\r\n  /** Mark label with asterisk if required */\r\n  required: PropTypes.bool,\r\n\r\n  /** Function to call onChange */\r\n  onChange: PropTypes.func.isRequired,\r\n\r\n  /** Placeholder to display when empty */\r\n  placeholder: PropTypes.string,\r\n\r\n  /** Value */\r\n  value: PropTypes.any,\r\n\r\n  /** String to display when error occues */\r\n  error: PropTypes.string,\r\n\r\n  /** Child component to display next to the input */\r\n  children: PropTypes.node\r\n};\r\n\r\nexport default TextInput;\r\n","import React from \"react\";\r\nimport TextInputCSSModules from \"ps-react/TextInputCSSModules\";\r\n\r\n/** Required TextBox with Error */\r\nexport default class ExampleError extends React.Component {\r\n  render() {\r\n    return (\r\n      <TextInputCSSModules\r\n        htmlId=\"example-required-error\"\r\n        value=\"wrong\"\r\n        type=\"password\"\r\n        label=\"Password\"\r\n        name=\"passwordInput\"\r\n        onChange={() => {}}\r\n        required\r\n        error=\"Incorrect Password\"\r\n      />\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\n/** This is the Hello World Component. */\r\nconst HelloWorld = ({ message }) => {\r\n  return <div>Hello {message} </div>;\r\n};\r\n\r\nHelloWorld.propTypes = {\r\n  /** Message to display */\r\n  message: PropTypes.string\r\n};\r\n\r\nHelloWorld.defaultProps = {\r\n  message: \"World\"\r\n};\r\n\r\nexport default HelloWorld;\r\n","import React from \"react\";\r\nimport HelloWorld from \"ps-react/HelloWorld\";\r\n\r\n/** Custom Message */\r\nexport default function ExampleHelloWorld() {\r\n  return <HelloWorld message=\"PluralSight Viewers!\" />;\r\n}\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport Label from \"../Label\";\r\n\r\n/** Text Input with integrated label to enforce consistency in layout, error display, label placement */\r\nfunction TextInput({\r\n  htmlId,\r\n  name,\r\n  label,\r\n  type = \"text\",\r\n  required = false,\r\n  onChange,\r\n  placeholder,\r\n  value,\r\n  error,\r\n  children,\r\n  ...props\r\n}) {\r\n  return (\r\n    <div className=\"textinput\">\r\n      <Label htmlFor={htmlId} label={label} required={required} />\r\n      <input\r\n        id={htmlId}\r\n        type={type}\r\n        name={name}\r\n        placeholder={placeholder}\r\n        value={value}\r\n        onChange={onChange}\r\n        className={error && \"textinput__input--state-error\"}\r\n        {...props}\r\n      />\r\n      {children}\r\n      {error && <div className=\"textinput__error\">{error}</div>}\r\n    </div>\r\n  );\r\n}\r\n\r\nTextInput.propTypes = {\r\n  /** Unique HTML ID. USed for tying label to HTML input. Handy Hook for automated testing. */\r\n  htmlId: PropTypes.string.isRequired,\r\n\r\n  /** Input Name. Recommend setting this to match object's property so a single change handler can be used */\r\n  name: PropTypes.string.isRequired,\r\n\r\n  /** Input Label */\r\n  label: PropTypes.string.isRequired,\r\n\r\n  /** Input Type */\r\n  type: PropTypes.oneOf([\"text\", \"number\", \"password\"]),\r\n\r\n  /** Mark label with asterisk if required */\r\n  required: PropTypes.bool,\r\n\r\n  /** Function to call onChange */\r\n  onChange: PropTypes.func.isRequired,\r\n\r\n  /** Placeholder to display when empty */\r\n  placeholder: PropTypes.string,\r\n\r\n  /** Value */\r\n  value: PropTypes.any,\r\n\r\n  /** String to display when error occues */\r\n  error: PropTypes.string,\r\n\r\n  /** Child component to display next to the input */\r\n  children: PropTypes.node\r\n};\r\n\r\nexport default TextInput;\r\n","import React from \"react\";\r\nimport TextInputBEM from \"ps-react/TextInputBEM\";\r\n\r\n/** Required TextBox with Error */\r\nexport default class ExampleError extends React.Component {\r\n  render() {\r\n    return (\r\n      <TextInputBEM\r\n        htmlId=\"example-required-error\"\r\n        value=\"wrong\"\r\n        type=\"password\"\r\n        label=\"Password\"\r\n        name=\"passwordInput\"\r\n        onChange={() => {}}\r\n        required\r\n        error=\"Incorrect Password\"\r\n      />\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport TextInput from \"../TextInput\";\r\nimport PasswordInput from \"../PasswordInput\";\r\n\r\n/** Registration form with Built-In Validation */\r\nclass RegistrationForm extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      user: {\r\n        email: \"\",\r\n        password: \"\"\r\n      },\r\n      errors: {},\r\n      submitted: false\r\n    };\r\n  }\r\n\r\n  onChange = event => {\r\n    const user = this.state.user;\r\n    user[event.target.name] = event.target.value;\r\n    this.ListeningStateChangedEvent({ user });\r\n  };\r\n\r\n  /** Returns a number from 0 to 100 that represents password quality\r\n   *  For simplicity, just returning % of min length entered.\r\n   *  Enhance with checks for number, special char, unique chars, etc.\r\n   */\r\n  passwordQuality(password) {\r\n    if (!password) return null;\r\n    if (password.length >= this.props.minPasswordLength) return 100;\r\n    const percentOfMinLength = parseInt(\r\n      (password.length / this.props.minPasswordLength) * 100,\r\n      10\r\n    );\r\n    return percentOfMinLength;\r\n  }\r\n\r\n  validate({ email, password }) {\r\n    const errors = {};\r\n    const { minPasswordLength } = this.props;\r\n\r\n    if (!email) errors.email = \"Email required.\";\r\n    if (password.length < minPasswordLength)\r\n      errors.password = `Password must be at least ${minPasswordLength} characters.`;\r\n\r\n    this.setState({ errors });\r\n    const formIsValid = Object.getOwnPropertyNames(errors).length === 0;\r\n    return formIsValid;\r\n  }\r\n\r\n  onSubmit = () => {\r\n    const { user } = this.state;\r\n    const formIsValid = this.validate(user);\r\n    if (formIsValid) {\r\n      this.props.onSubmit(user);\r\n      this.setState({ submitted: true });\r\n    }\r\n  };\r\n\r\n  render() {\r\n    const { errors, submitted } = this.state;\r\n    const { email, password } = this.state.user;\r\n\r\n    return submitted ? (\r\n      <h2>{this.props.confirmationMessage}</h2>\r\n    ) : (\r\n      <div>\r\n        <TextInput\r\n          htmlId=\"registration-form-email\"\r\n          name=\"email\"\r\n          onChange={this.onChange}\r\n          label=\"Email\"\r\n          value={email}\r\n          error={errors.email}\r\n          required\r\n        />\r\n\r\n        <PasswordInput\r\n          htmlId=\"registration-form-password\"\r\n          name=\"password\"\r\n          value={password}\r\n          onChange={this.onChange}\r\n          quality={this.passwordQuality(password)}\r\n          showVisibilityToggle\r\n          maxLength={50}\r\n          error={errors.password}\r\n        />\r\n\r\n        <input type=\"submit\" value=\"Register\" onClick={this.onSubmit} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nRegistrationForm.propTypes = {\r\n  /** Message displayed on success */\r\n  confirmationMessage: PropTypes.string,\r\n\r\n  /** Called when form is submitted */\r\n  onSubmit: PropTypes.func.isRequired,\r\n\r\n  /** Minimum Password Length */\r\n  minPasswordLength: PropTypes.number\r\n};\r\n\r\nRegistrationForm.defaultProps = {\r\n  confirmationMessage: \"Thanks for registering!\",\r\n  minPasswordLength: 8\r\n};\r\n\r\nexport default RegistrationForm;\r\n","import React from \"react\";\r\nimport RegistrationForm from \"ps-react/RegistrationForm\";\r\n\r\nexport default class ExampleRegistrationForm extends React.Component {\r\n  onSubmit = user => {\r\n    console.log(user);\r\n  };\r\n\r\n  render() {\r\n    return <RegistrationForm onSubmit={this.onSubmit} />;\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ExpandingBar from \"ps-react/ExpandingBar\";\r\nimport ForTesting from \"ps-react/ForTesting\";\r\nimport IxButtonMainFlat from \"ps-react/IxButtonMainFlat\";\r\n\r\nexport default function ExampleBar() {\r\n  return (\r\n    <>\r\n      <ExpandingBar startHeight={50} endHeight={150}>\r\n        <div style={{ height: \"auto\" }}>\r\n          <div\r\n            style={{\r\n              display: \"inline-block\",\r\n              marginLeft: \"10px\",\r\n              marginTop: \"0px\"\r\n            }}\r\n          >\r\n            <div>\r\n              <h1\r\n                style={{\r\n                  display: \"inline-block\",\r\n                  marginBottom: \"0px\",\r\n                  color: \"white\",\r\n                  paddingBottom: 0\r\n                }}\r\n              >\r\n                PART NAME\r\n              </h1>\r\n            </div>\r\n            <div>\r\n              <h2\r\n                style={{\r\n                  display: \"inline-block\",\r\n                  marginTop: \"0px\",\r\n                  color: \"white\",\r\n                  marginBottom: 10\r\n                }}\r\n              >\r\n                PART NUMBER\r\n              </h2>\r\n              <h2\r\n                style={{\r\n                  display: \"inline-block\",\r\n                  marginLeft: \"20px\",\r\n                  marginTop: \"0px\",\r\n                  color: \"white\",\r\n                  marginBottom: 10\r\n                }}\r\n              >\r\n                PART REVISION\r\n              </h2>\r\n            </div>\r\n            <div>\r\n              <div style={{ display: \"inline-block\" }}>\r\n                <IxButtonMainFlat\r\n                  type=\"small\"\r\n                  backgroundColor=\"green\"\r\n                  label=\"NEXT\"\r\n                />\r\n              </div>\r\n              <div\r\n                style={{\r\n                  display: \"inline-block\",\r\n                  marginLeft: 25\r\n                }}\r\n              >\r\n                <label\r\n                  class=\"container\"\r\n                  style={{ fontColor: \"white\", marginRight: 25 }}\r\n                >\r\n                  Part\r\n                  <input type=\"radio\" checked=\"checked\" name=\"Part\" />\r\n                  <span class=\"checkmark\" />\r\n                </label>\r\n                <label class=\"container\" style={{ fontColor: \"white\" }}>\r\n                  Assembly\r\n                  <input type=\"radio\" name=\"Assembly\" />\r\n                  <span class=\"checkmark\" />\r\n                </label>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div />\r\n        </div>\r\n      </ExpandingBar>\r\n    </>\r\n  );\r\n}\r\n","var map = {\n\t\"./ClickToEnterTextField/ExampleTextField\": 22,\n\t\"./ClickToEnterTextField/ExampleTextField.js\": 22,\n\t\"./Ellipses/EllipsesExample\": 23,\n\t\"./Ellipses/EllipsesExample.js\": 23,\n\t\"./ExpandingBar/ExampleBar\": 45,\n\t\"./ExpandingBar/ExampleBar.js\": 45,\n\t\"./ExpandingBar/IxBarExample\": 25,\n\t\"./ExpandingBar/IxBarExample.js\": 25,\n\t\"./EyeIcon/ExampleEye\": 26,\n\t\"./EyeIcon/ExampleEye.js\": 26,\n\t\"./HelloWorld/ExampleHelloWorld\": 42,\n\t\"./HelloWorld/ExampleHelloWorld.js\": 42,\n\t\"./IxButton/ExampleButton\": 27,\n\t\"./IxButton/ExampleButton.js\": 27,\n\t\"./IxButtonMainFlat/IxButtonMainFlatExample\": 28,\n\t\"./IxButtonMainFlat/IxButtonMainFlatExample.js\": 28,\n\t\"./IxButtonMulti/ExampleButtonMultiCircle\": 29,\n\t\"./IxButtonMulti/ExampleButtonMultiCircle.js\": 29,\n\t\"./IxButtonMulti/ExampleIxButtonMulti\": 30,\n\t\"./IxButtonMulti/ExampleIxButtonMulti.js\": 30,\n\t\"./Label/ExampleOptional\": 31,\n\t\"./Label/ExampleOptional.js\": 31,\n\t\"./Label/ExampleRequired\": 32,\n\t\"./Label/ExampleRequired.js\": 32,\n\t\"./PasswordInput/ExampleAllFeatures\": 33,\n\t\"./PasswordInput/ExampleAllFeatures.js\": 33,\n\t\"./ProgressBar/Example100Percent\": 34,\n\t\"./ProgressBar/Example100Percent.js\": 34,\n\t\"./ProgressBar/Example10Percent\": 35,\n\t\"./ProgressBar/Example10Percent.js\": 35,\n\t\"./ProgressBar/Example50Percent\": 36,\n\t\"./ProgressBar/Example50Percent.js\": 36,\n\t\"./RegistrationForm/ExampleRegistrationForm\": 44,\n\t\"./RegistrationForm/ExampleRegistrationForm.js\": 44,\n\t\"./TextInput/ExampleError\": 37,\n\t\"./TextInput/ExampleError.js\": 37,\n\t\"./TextInput/ExampleOptional\": 38,\n\t\"./TextInput/ExampleOptional.js\": 38,\n\t\"./TextInputBEM/ExampleError\": 43,\n\t\"./TextInputBEM/ExampleError.js\": 43,\n\t\"./TextInputCSSModules/ExampleError\": 41,\n\t\"./TextInputCSSModules/ExampleError.js\": 41,\n\t\"./TextInputStyledComponents/ExampleError\": 40,\n\t\"./TextInputStyledComponents/ExampleError.js\": 40,\n\t\"./Tooltip/TooltipExample\": 39,\n\t\"./Tooltip/TooltipExample.js\": 39\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tvar id = map[req];\n\tif(!(id + 1)) { // check for number or string\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn id;\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 60;","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst Navigation = ({ components }) => {\r\n  return (\r\n    <ul className=\"navigation\">\r\n      {components.map(name => {\r\n        return (\r\n          <li key={name}>\r\n            <a href={`#${name}`}>{name}</a>\r\n          </li>\r\n        );\r\n      })}\r\n    </ul>\r\n  );\r\n};\r\n\r\nNavigation.propTypes = {\r\n  components: PropTypes.array.isRequired\r\n};\r\n\r\nexport default Navigation;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport hljs from \"highlight.js/lib/highlight\";\r\nimport javascript from \"highlight.js/lib/languages/javascript\";\r\n\r\n// Could easily use import Highlight from 'react-highlight';\r\n// But, that adds 170k zipped to our bundle, b/c all langs are included\r\n// check out prism for a better solution\r\n\r\nclass CodeExample extends React.Component {\r\n  componentDidMount() {\r\n    hljs.registerLanguage(\"javascript\", javascript);\r\n    hljs.highlightBlock(this.element);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <pre\r\n        ref={ref => {\r\n          this.element = ref;\r\n        }}\r\n      >\r\n        <code>{this.props.children}</code>\r\n      </pre>\r\n    );\r\n  }\r\n}\r\n\r\nCodeExample.propTypes = {\r\n  children: PropTypes.string.isRequired\r\n};\r\n\r\nexport default CodeExample;\r\n","// displays examples of components in action\r\n\r\nimport React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport CodeExample from \"./CodeExample\";\r\n\r\nclass Example extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { showCode: false };\r\n  }\r\n\r\n  // Don't need to do an explicit bind\r\n  // Doesn't change the value of 'this'\r\n  toggleCode = event => {\r\n    event.preventDefault();\r\n    this.setState(prevState => {\r\n      return { showCode: !prevState.showCode };\r\n    });\r\n  };\r\n\r\n  render() {\r\n    const { showCode } = this.state;\r\n    const { code, description, name } = this.props.example;\r\n\r\n    // Must use CommonJS require to dynamically require because\r\n    // ES Modules must be statically analyzable\r\n    // Dynamically requiring the Example component\r\n    // Don't need to add imports for every Component type we create\r\n    const ExampleComponent = require(`./examples/${\r\n      this.props.componentName\r\n    }/${name}`).default;\r\n    return (\r\n      <div className=\"example\">\r\n        {description && <h4>{description}</h4>}\r\n\r\n        <ExampleComponent />\r\n\r\n        <p>\r\n          <a href=\"#\" onClick={this.toggleCode}>\r\n            {showCode ? \"Hide\" : \"Show\"} Code\r\n          </a>\r\n        </p>\r\n\r\n        {showCode && <CodeExample>{code}</CodeExample>}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nExample.propTypes = {\r\n  example: PropTypes.object.isRequired,\r\n  componentName: PropTypes.string.isRequired\r\n};\r\n\r\nexport default Example;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst Props = ({ props }) => {\r\n  return (\r\n    <table className=\"props\">\r\n      <thead>\r\n        <tr>\r\n          <th>Name</th>\r\n          <th>Description</th>\r\n          <th>Type</th>\r\n          <th>Default</th>\r\n          <th>Required</th>\r\n        </tr>\r\n      </thead>\r\n      <tbody>\r\n        {Object.keys(props).map(key => {\r\n          return (\r\n            <tr key={key}>\r\n              <td>{key}</td>\r\n              <td>{props[key].description}</td>\r\n              <td>{props[key].type.name}</td>\r\n              <td>\r\n                {props[key].defaultValue && props[key].defaultValue.value}\r\n              </td>\r\n              <td>{props[key].required && \"X\"}</td>\r\n            </tr>\r\n          );\r\n        })}\r\n      </tbody>\r\n    </table>\r\n  );\r\n};\r\n\r\nProps.propTypes = {\r\n  props: PropTypes.object.isRequired\r\n};\r\n\r\nexport default Props;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport Example from \"./Example\";\r\nimport Props from \"./Props\";\r\n\r\nconst ComponentPage = ({ component }) => {\r\n  const { name, description, props, examples } = component;\r\n\r\n  return (\r\n    <div className=\"componentpage\">\r\n      <h2>{name}</h2>\r\n      <p>{description}</p>\r\n      <h3>Example{examples.length > 1 && \"s\"}</h3>\r\n      {examples.length > 0\r\n        ? examples.map(example => (\r\n            <Example\r\n              key={example.code}\r\n              example={example}\r\n              componentName={name}\r\n            />\r\n          ))\r\n        : \"No Examples Exist.\"}\r\n      <h3>Props</h3>\r\n      {props ? <Props props={props} /> : \"This component accepts no props.\"}\r\n    </div>\r\n  );\r\n};\r\n\r\nComponentPage.propTypes = {\r\n  component: PropTypes.object.isRequired\r\n};\r\n\r\nexport default ComponentPage;\r\n","import React from \"react\";\r\nimport Navigation from \"./Navigation\";\r\nimport ComponentPage from \"./ComponentPage\";\r\nimport componentData from \"../../config/componentData\";\r\n\r\nexport default class Docs extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      route: window.location.hash.substr(1)\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    window.addEventListener(\"hashchange\", () => {\r\n      this.setState({ route: window.location.hash.substr(1) });\r\n    });\r\n  }\r\n\r\n  render() {\r\n    const { route } = this.state;\r\n    const component = route\r\n      ? componentData.filter(component => component.name === route)[0]\r\n      : componentData[0];\r\n\r\n    // routing is done manually rather than via a library\r\n    // Client side routing\r\n    return (\r\n      <div>\r\n        <Navigation\r\n          components={componentData.map(component => component.name)}\r\n        />\r\n        <ComponentPage component={component} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport Docs from \"./docs/Docs\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"../node_modules/highlight.js/styles/ocean.css\";\nimport \"../node_modules/font-awesome/css/font-awesome.min.css\";\n\nReactDOM.render(<Docs />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}